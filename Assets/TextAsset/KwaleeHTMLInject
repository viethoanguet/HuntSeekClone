let baseTimerInitial = 10;
let baseTimerRemaining = 10;
let baseTimerInterval = null;

function onCancelMouseDown(event) {
    console.log("onCancelMouseDown()");
    event.preventDefault();
    event.stopPropagation();
}

function setTimeInitial(initial) {
    baseTimerInitial = initial;
}

function setCloseTimeRemaining(remaining) {
    baseTimerRemaining = remaining;
}

// Divides time left by the defined time limit.
function calculateTimePercentile(remaining, initial) {
    const rawTimeFraction = remaining / initial;
    return rawTimeFraction - (1 / initial) * (1 - rawTimeFraction);
}

// Update the dasharray value as time passes, starting with 283
function setCircleDashArray() {
    const circleDasharray = `${(calculateTimePercentile(baseTimerRemaining, baseTimerInitial) * 283).toFixed(0)} 283`;
    document.getElementById("base-timer-path-remaining").setAttribute("stroke-dasharray", circleDasharray);
}

// Fully update the countdown
function updateCountdown() {
    document.getElementById('base-timer-label').innerText = baseTimerRemaining > 0 ? baseTimerRemaining : "X";
    setCircleDashArray();
}


function startCloseTimer() {
    if (baseTimerInterval !== null) {
        return;
    }
    baseTimerInterval = setInterval(() => {
        // The amount of time remaining decrements by one
        baseTimerRemaining -= 1;

        // Update visually
        updateCountdown();
        if (baseTimerRemaining <= 0) {
            baseTimerRemaining = 0;
            stopTimer();
        }
    }, 1000);
}

function stopTimer() {
    if (!baseTimerInterval) {
        return;
    }

    clearInterval(baseTimerInterval);
    baseTimerInterval = null;
}

function onBaseTimerClick(event) {
    onCancelMouseDown(event);
    if (baseTimerRemaining > 0) {
        return;
    }
    window.location.href = 'uniwebview://kwResumeUnity'
    window.location.href = 'uniwebview://close_ad'
}

function initCloseTimer() {
    const style = `
            /* Sets the containers height and width */
                .base-timer {
                position: fixed;
                top: 15px;
                right: 15px;
                height: 30px;
                width: 30px;
                z-index: 99999;
                }

                .base-timer__svg {
                /* Flips the svg and makes the animation to move left-to-right */
                transform: scaleX(-1);
                }

                /* Removes SVG styling that would hide the time label */
                .base-timer__circle {
                fill: #000000aa;
                stroke: none;
                }

                /* The SVG path that displays the timer's progress */
                .base-timer__path-elapsed {
                stroke-width: 10px;
                stroke: grey;
                }

                .base-timer__path-remaining {
                /* Just as thick as the original ring */
                stroke-width: 10px;

                /* Rounds the line endings to create a seamless circle */
                stroke-linecap: round;

                /* Makes sure the animation starts at the top of the circle */
                transform: rotate(90deg);
                transform-origin: center;

                /* One second aligns with the speed of the countdown timer */
                transition: 1s linear all;

                stroke: #fff;
                }

                .base-timer__label {
                position: absolute;

                /* Size should match the parent container */
                width: 30px;
                height: 30px;

                /* Keep the label aligned to the top */
                top: 0;

                /* Create a flexible box that centers content vertically and horizontally */
                display: flex;
                align-items: center;
                justify-content: center;

                /* Time remaining font size */
                font-size: 14px;

                /* Text color */
                color: #fff;
                }
            `;

    const styleSheet = document.createElement('style');
    styleSheet.type = 'text/css';
    styleSheet.innerHTML = style;
    document.head.appendChild(styleSheet);

    const timer = document.createElement('div');
    timer.id = 'base-timer';
    timer.classList.add('base-timer');

    timer.innerHTML = `
                <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                    <g class="base-timer__circle">
                        <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45" />
                        <path
                            id="base-timer-path-remaining"
                            stroke-dasharray="283"
                            class="base-timer__path-remaining"
                            d="
                                M 50, 50
                                m -45, 0
                                a 45,45 0 1,0 90,0
                                a 45,45 0 1,0 -90,0
                            "
                        ></path>
                    </g>
                </svg>
                <span id="base-timer-label" class="base-timer__label">
                ${baseTimerInitial}
                </span>
            `;
    document.body.appendChild(timer);

    document.getElementById('base-timer').addEventListener("touchdown", onCancelMouseDown);
    document.getElementById('base-timer').addEventListener("pointerdown", onCancelMouseDown);
    document.getElementById('base-timer').addEventListener("click", onCancelMouseDown);
    document.getElementById('base-timer').addEventListener("mousedown", onBaseTimerClick);
    document.getElementById('base-timer').addEventListener("touchstart", onBaseTimerClick);
}

function onCTAClicked(event) {
    event.preventDefault();
    event.stopPropagation();
}

function initCTAButton() {
    const styleCTAButton = `
            /* Sets the containers height and width */
            .cta-button {
                position: fixed;
                right: 0;
                left: 0;
                bottom: 0;
                margin-right: auto;
                margin-left: auto;
                height: 30px;
                width: 150px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 14px;
                color: #000;
                padding: 10px;
                background-color: rgb(147, 216, 137);
                z-index: 99999;
            }
            `;

    const styleSheetCTAButton = document.createElement('style');
    styleSheetCTAButton.type = 'text/css';
    styleSheetCTAButton.innerHTML = styleCTAButton;
    document.head.appendChild(styleSheetCTAButton);

    const ctaButton = document.createElement('div');
    ctaButton.id = 'cta-button';
    ctaButton.classList.add('cta-button');
    ctaButton.innerText = 'Play Now';
    document.body.appendChild(ctaButton);
    document.getElementById('cta-button').addEventListener("mousedown", onCancelMouseDown);
    document.getElementById('cta-button').addEventListener("pointerdown", onCancelMouseDown);
    document.getElementById('cta-button').addEventListener("click", onCTAClicked);
}

let skipTimerInitial = 10;
let skipTimerRemaining = 10;
let skipTimerInterval = null;

function setSkipTimeInitial(initial) {
    skipTimerInitial = initial;
}

function setSkipTimeRemaining(remaining) {
    skipTimerRemaining = remaining;
}

// Update the dasharray value as time passes, starting with 283
function setSkipCircleDashArray() {
    const circleDasharray = `${(calculateTimePercentile(skipTimerRemaining, skipTimerInitial) * 283).toFixed(0)} 283`;
    document.getElementById("skip-timer-path-remaining").setAttribute("stroke-dasharray", circleDasharray);
}

// Fully update the countdown
function updateSkipCountdown() {

    if (skipTimerRemaining > 0) {
        document.getElementById('skip-timer-label').innerText = skipTimerRemaining;
    } else {
        document.getElementById('skip-timer-label').innerHTML = `<img src="https://upload.wikimedia.org/wikipedia/commons/5/55/Ic_skip_next_48px.svg" alt="Skip Ad" style="width: 100%; filter: invert(1);"/>
                `;
    }

    setSkipCircleDashArray();
}

function startSkipTimer() {
    if (skipTimerInterval !== null) {
        return;
    }
    skipTimerInterval = setInterval(() => {
        // The amount of time remaining decrements by one
        skipTimerRemaining -= 1;

        // Update visually
        updateSkipCountdown();

        if (skipTimerRemaining <= 0) {
            skipTimerRemaining = 0;
            stopSkipTimer();
        }
    }, 1000);
}

function stopSkipTimer() {
    if (!skipTimerInterval) {
        return;
    }
    clearInterval(skipTimerInterval);
    skipTimerInterval = null;
}

function onSkipButtonClicked(event) {
    onCancelMouseDown(event);
    if (skipTimerRemaining > 0) {
        return;
    }
   skip();
}

function initSkipTimer() {
    const styleSkip = `
            /* Sets the containers height and width */
                .skip-timer {
                    position: fixed;
                    top: 15px;
                    left: 15px;
                    height: 30px;
                    width: 30px;
                    z-index: 99999;
                }

                .skip-timer__svg {
                    /* Flips the svg and makes the animation to move left-to-right */
                    transform: scaleX(-1);
                }

                /* Removes SVG styling that would hide the time label */
                .skip-timer__circle {
                    fill: #000000aa;
                    stroke: none;
                }

                /* The SVG path that displays the timer's progress */
                .skip-timer__path-elapsed {
                    stroke-width: 10px;
                    stroke: grey;
                }

                .skip-timer__path-remaining {
                    /* Just as thick as the original ring */
                    stroke-width: 10px;

                    /* Rounds the line endings to create a seamless circle */
                    stroke-linecap: round;

                    /* Makes sure the animation starts at the top of the circle */
                    transform: rotate(90deg);
                    transform-origin: center;

                    /* One second aligns with the speed of the countdown timer */
                    transition: 1s linear all;

                    stroke: #fff;
                }

                .skip-timer__label {
                    position: absolute;

                    /* Size should match the parent container */
                    width: 30px;
                    height: 30px;

                    /* Keep the label aligned to the top */
                    top: 0;

                    /* Create a flexible box that centers content vertically and horizontally */
                    display: flex;
                    align-items: center;
                    justify-content: center;

                    /* Time remaining font size */
                    font-size: 14px;

                    /* Text color */
                    color: #fff;
                }
            `;

    const styleSheetSkip = document.createElement('style');
    styleSheetSkip.type = 'text/css';
    styleSheetSkip.innerHTML = styleSkip;
    document.head.appendChild(styleSheetSkip);

    const skiptimer = document.createElement('div');
    skiptimer.id = 'skip-timer';
    skiptimer.classList.add('skip-timer');

    skiptimer.innerHTML = `
                <svg class="skip-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                    <g class="skip-timer__circle">
                        <circle class="skip-timer__path-elapsed" cx="50" cy="50" r="45" />
                        <path
                            id="skip-timer-path-remaining"
                            stroke-dasharray="283"
                            class="skip-timer__path-remaining"
                            d="
                                M 50, 50
                                m -45, 0
                                a 45,45 0 1,0 90,0
                                a 45,45 0 1,0 -90,0
                            "
                        ></path>
                    </g>
                </svg>
                <span id="skip-timer-label" class="skip-timer__label">
                ${skipTimerInitial}
                </span>
            `;


    document.body.appendChild(skiptimer);

    document.getElementById('skip-timer').addEventListener("touchdown", onCancelMouseDown);
    document.getElementById('skip-timer').addEventListener("pointerdown", onCancelMouseDown);
    document.getElementById('skip-timer').addEventListener("click", onCancelMouseDown);
    document.getElementById('skip-timer').addEventListener("mousedown", onSkipButtonClicked);
    document.getElementById('skip-timer').addEventListener("touchstart", onSkipButtonClicked);
}

function initHeatMap() {
    document.body.addEventListener('mousedown', OnMouseDown, true);
}

function OnMouseDown(event) {
    mouseDown(event.offsetX, event.offsetY);
}

function onInfoButtonClicked(event) {
    onCancelMouseDown(event);
    info();
    console.log("onInfoButtonClicked()");
}

function initInfoButton() {
    const styleInfoButton = `
    /* Sets the containers height and width */
    .info-button {
        height: 20px;
        width: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        color: #FFFFFF;
        padding: 3px;
        background-color: rgb(0, 0, 0);
        z-index: 99999;
        border-radius: 50%;
    }
    .info-button-container {
        cursor: pointer;
        position: fixed;
        bottom: 15px;
        left: 15px;
        padding: 1em;
        z-index: 99999;
    }
    `;
    const styleSheetInfoButton = document.createElement('style');
    styleSheetInfoButton.type = 'text/css';
    styleSheetInfoButton.innerHTML = styleInfoButton;
    document.head.appendChild(styleSheetInfoButton);
    const infoButton = document.createElement('div');
    infoButton.id = 'info-button';
    infoButton.classList.add('info-button');
    infoButton.innerText = 'i';

    const infoButtonContainer = document.createElement('div');
    infoButtonContainer.id = 'info-button-container';
    infoButtonContainer.classList.add('info-button-container');
    infoButtonContainer.appendChild(infoButton);
    document.body.appendChild(infoButtonContainer);

    document.getElementById('info-button-container').addEventListener("touchdown", onCancelMouseDown);
    document.getElementById('info-button-container').addEventListener("pointerdown", onCancelMouseDown);
    document.getElementById('info-button-container').addEventListener("click", onCancelMouseDown);
    document.getElementById('info-button-container').addEventListener("mousedown", onInfoButtonClicked);
    document.getElementById('info-button-container').addEventListener("touchstart", onInfoButtonClicked);
}

function lunaStartDispatch() {
    window.dispatchEvent(new Event(EVENTS.LUNA_RESUME));
}

function lunaPauseDispatch() {
    window.dispatchEvent(new Event(EVENTS.LUNA_PAUSE));
}

function lunaStartedCallback() {
    window.location.href = 'uniwebview://luna_started'
}

function lunaStartEventListener() {
    window.addEventListener(EVENTS.LUNA_STARTED, lunaStartedCallback);
}

function skip() {
    console.log("uniwebview://skip");
    window.location.href = 'uniwebview://kwResumeUnity'
    window.location.href = 'uniwebview://skip_ad'
}

function info() {
    console.log("uniwebview://info");
    window.location.href = 'uniwebview://kwResumeUnity'
    window.location.href = 'uniwebview://open_info'
}

function mouseDown(coordX, coordY) {
    console.log("uniwebview://mouseDown");
    window.location.href = 'uniwebview://mouse_down?key=' + coordX + '&anotherKey=' + coordY
}

let creativeID = "creativeID";
function setCreativeID(unityID) {
    creativeID = unityID;
}

let campaignID = "campaignID";
function setCampaignID(unityID) {
    campaignID = unityID;
}

function initDebugIDs()
{
        const styleDebugID = `
            /* Sets the containers height and width */
            .creative-ID {
                position: fixed;
                right: 0;
                left: 0;
                top: 5;
                margin-right: auto;
                margin-left: auto;
                height: 10%;
                width: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 20px;
                color: #39FF14;
                 text-shadow: 
        -1px -1px 0px #000,
         0px -1px 0px #000,
         1px -1px 0px #000,
        -1px  0px 0px #000,
         1px  0px 0px #000,
        -1px  1px 0px #000,
         0px  1px 0px #000,
         1px  1px 0px #000;
                z-index: 99998;
            }
            `;

    const styleSheetDebugID = document.createElement('style');
    styleSheetDebugID.type = 'text/css';
    styleSheetDebugID.innerHTML = styleDebugID;
    document.head.appendChild(styleSheetDebugID);

    const creativeIDs = document.createElement('div');
    creativeIDs.id = 'creative-ID';
    creativeIDs.classList.add('creative-ID');
    creativeIDs.innerHTML = `
                 <div id="creative-ID" class="creative-ID">
                ${creativeID}
                <br />
                ${campaignID}
                </div>
            `;

    document.body.appendChild(creativeIDs);
}

function showRes() {
    let elem = document.getElementById('res');
    if (!elem) {
        elem = document.createElement('div');
        elem.id = 'res';
        elem.style.position = 'fixed';
        elem.style.left = 50;
        elem.style.top = 50;
        elem.style.background = '#fff';
        elem.style.padding = '5px';
        document.body.appendChild(elem);

        window.addEventListener('resize', showRes);
    }

    elem.innerText = `${window.innerWidth}x${window.innerHeight} (${window.devicePixelRatio})`;
}

function setSize(width, height) {
    var ratio = window.devicePixelRatio || 1;
    
    if (ratio == 0)
    {
        ratio = 1;
    }
    
    width /= ratio;
    height /= ratio;
    
    window.mraidbridge.setMaxSize(width, height);
    window.mraidbridge.setScreenSize(width, height);
}


