//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Universal Render Pipeline/Particles/Simple Lit" {
Properties {
_BaseMap ("Base Map", 2D) = "white" { }
_BaseColor ("Base Color", Color) = (1,1,1,1)
_Cutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
_SpecGlossMap ("Specular", 2D) = "white" { }
_SpecColor ("Specular", Color) = (1,1,1,1)
_Smoothness ("Smoothness", Range(0, 1)) = 0.5
_BumpScale ("Scale", Float) = 1
_BumpMap ("Normal Map", 2D) = "bump" { }
_EmissionColor ("Color", Color) = (0,0,0,1)
_EmissionMap ("Emission", 2D) = "white" { }
_SmoothnessSource ("Smoothness Source", Float) = 0
[ToggleOff] _SpecularHighlights ("Specular Highlights", Float) = 1
_ReceiveShadows ("Receive Shadows", Float) = 1
_SoftParticlesNearFadeDistance ("Soft Particles Near Fade", Float) = 0
_SoftParticlesFarFadeDistance ("Soft Particles Far Fade", Float) = 1
_CameraNearFadeDistance ("Camera Near Fade", Float) = 1
_CameraFarFadeDistance ("Camera Far Fade", Float) = 2
_DistortionBlend ("Distortion Blend", Float) = 0.5
_DistortionStrength ("Distortion Strength", Float) = 1
_Surface ("__surface", Float) = 0
_Blend ("__mode", Float) = 0
_AlphaClip ("__clip", Float) = 0
_BlendOp ("__blendop", Float) = 0
_SrcBlend ("__src", Float) = 1
_DstBlend ("__dst", Float) = 0
_ZWrite ("__zw", Float) = 1
_Cull ("__cull", Float) = 2
_ColorMode ("_ColorMode", Float) = 0
_BaseColorAddSubDiff ("_ColorMode", Vector) = (0,0,0,0)
[ToggleOff] _FlipbookBlending ("__flipbookblending", Float) = 0
_SoftParticlesEnabled ("__softparticlesenabled", Float) = 0
_CameraFadingEnabled ("__camerafadingenabled", Float) = 0
_SoftParticleFadeParams ("__softparticlefadeparams", Vector) = (0,0,0,0)
_CameraFadeParams ("__camerafadeparams", Vector) = (0,0,0,0)
_DistortionEnabled ("__distortionenabled", Float) = 0
_DistortionStrengthScaled ("Distortion Strength Scaled", Float) = 0.1
_QueueOffset ("Queue offset", Float) = 0
_FlipbookMode ("flipbook", Float) = 0
_Glossiness ("gloss", Float) = 0
_Mode ("mode", Float) = 0
_Color ("color", Color) = (1,1,1,1)
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "PerformanceChecks" = "False" "PreviewType" = "Plane" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" "UniversalMaterialType" = "SimpleLit" }
 Pass {
  Name "ForwardLit"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "UniversalForward" "PerformanceChecks" = "False" "PreviewType" = "Plane" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" "UniversalMaterialType" = "SimpleLit" }
  Blend Zero Zero, Zero Zero
  ZWrite Off
  Cull Off
  GpuProgramID 5478
Program "vp" {
SubProgram "gles " {
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb15 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb2;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_TEXCOORD8.xyz;
    u_xlat10_1 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _BaseColor;
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlatb2 = _Surface==1.0;
    SV_Target0.w = (u_xlatb2) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat10;
uint u_xlatu10;
bool u_xlatb10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_15;
int u_xlati19;
bool u_xlatb19;
mediump float u_xlat16_24;
float u_xlat28;
uint u_xlatu28;
float u_xlat31;
mediump float u_xlat16_33;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat10.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10.x;
        u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10.x;
        u_xlat10.x = u_xlat10.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat10.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat10.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-_CameraFadeParams.x);
    u_xlat10.x = u_xlat10.x * _CameraFadeParams.y;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat10.x * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_11.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_6.x);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;
    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_6.x;
    u_xlatb1.x = 0.0>=u_xlat1.z;
    u_xlatb10 = u_xlat1.z>=1.0;
    u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_15 = u_xlat1.x * u_xlat1.x;
    u_xlat16_24 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_15 * u_xlat16_24 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_33 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33) + vs_TEXCOORD8.xyz;
    u_xlat16_33 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_33));
    u_xlat16_7.xyz = u_xlat16_6.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati19 = int(u_xlatu_loop_1 & 3u);
        u_xlatu28 = u_xlatu_loop_1 >> 2u;
        u_xlat16_33 = dot(unity_LightIndices[int(u_xlatu28)], ImmCB_0[u_xlati19]);
        u_xlati19 = int(u_xlat16_33);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati19].www + _AdditionalLightsPosition[u_xlati19].xyz;
        u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = max(u_xlat28, 6.10351562e-05);
        u_xlat31 = inversesqrt(u_xlat28);
        u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
        u_xlat31 = float(1.0) / float(u_xlat28);
        u_xlat28 = u_xlat28 * _AdditionalLightsAttenuation[u_xlati19].x + _AdditionalLightsAttenuation[u_xlati19].y;
        u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
        u_xlat28 = u_xlat28 * u_xlat31;
        u_xlat16_33 = dot(_AdditionalLightsSpotDir[u_xlati19].xyz, u_xlat4.xyz);
        u_xlat16_33 = u_xlat16_33 * _AdditionalLightsAttenuation[u_xlati19].z + _AdditionalLightsAttenuation[u_xlati19].w;
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat28 = u_xlat28 * u_xlat16_33;
        u_xlat16_8.xyz = vec3(u_xlat28) * _AdditionalLightsColor[u_xlati19].xyz;
        u_xlat16_33 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
        u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat0.xyz + u_xlat16_11.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
float u_xlat5;
mediump vec3 u_xlat16_6;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_6.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_3 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 5) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat10;
uint u_xlatu10;
bool u_xlatb10;
mediump float u_xlat16_15;
int u_xlati19;
bool u_xlatb19;
float u_xlat28;
uint u_xlatu28;
mediump float u_xlat16_29;
float u_xlat31;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_29 = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_29 = (-u_xlat16_29) + 4.0;
    u_xlatu1 = uint(u_xlat16_29);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;
    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_29 = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_29;
    u_xlatb1.x = 0.0>=u_xlat1.z;
    u_xlatb10 = u_xlat1.z>=1.0;
    u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
    u_xlat16_29 = (u_xlatb1.x) ? 1.0 : u_xlat16_29;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_6.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_15 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_6.x * u_xlat16_15 + u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_29) + vs_TEXCOORD8.xyz;
    u_xlat16_29 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_29));
    u_xlat16_7.xyz = u_xlat16_6.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati19 = int(u_xlatu_loop_1 & 3u);
        u_xlatu28 = u_xlatu_loop_1 >> 2u;
        u_xlat16_29 = dot(unity_LightIndices[int(u_xlatu28)], ImmCB_0[u_xlati19]);
        u_xlati19 = int(u_xlat16_29);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati19].www + _AdditionalLightsPosition[u_xlati19].xyz;
        u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = max(u_xlat28, 6.10351562e-05);
        u_xlat31 = inversesqrt(u_xlat28);
        u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
        u_xlat31 = float(1.0) / float(u_xlat28);
        u_xlat28 = u_xlat28 * _AdditionalLightsAttenuation[u_xlati19].x + _AdditionalLightsAttenuation[u_xlati19].y;
        u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
        u_xlat28 = u_xlat28 * u_xlat31;
        u_xlat16_29 = dot(_AdditionalLightsSpotDir[u_xlati19].xyz, u_xlat4.xyz);
        u_xlat16_29 = u_xlat16_29 * _AdditionalLightsAttenuation[u_xlati19].z + _AdditionalLightsAttenuation[u_xlati19].w;
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
        u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
        u_xlat28 = u_xlat28 * u_xlat16_29;
        u_xlat16_8.xyz = vec3(u_xlat28) * _AdditionalLightsColor[u_xlati19].xyz;
        u_xlat16_29 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
        u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_29) + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb15 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp sampler2D _EmissionMap;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump float u_xlat16_12;
void main()
{
    u_xlat16_0.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_12 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_12) + vs_TEXCOORD8.xyz;
    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat10_1 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _BaseColor;
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlatb3 = _Surface==1.0;
    SV_Target0.w = (u_xlatb3) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat9;
uint u_xlatu9;
bool u_xlatb9;
mediump vec3 u_xlat16_10;
int u_xlati17;
bool u_xlatb17;
mediump float u_xlat16_18;
float u_xlat25;
uint u_xlatu25;
mediump float u_xlat16_26;
float u_xlat28;
mediump float u_xlat16_30;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat9.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat9.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat9.x;
        u_xlat9.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat9.x;
        u_xlat9.x = u_xlat9.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat9.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat9.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
    u_xlat9.x = float(1.0) / u_xlat9.x;
    u_xlat9.x = u_xlat9.x + (-_CameraFadeParams.x);
    u_xlat9.x = u_xlat9.x * _CameraFadeParams.y;
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat9.x * u_xlat1.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_10.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_10.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_10.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.yzw;
    u_xlat16_3.yzw = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_10.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_10.x = (-u_xlat16_10.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_10.x);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat9.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat9.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_10.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_10.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_10.x;
    u_xlatb1.x = 0.0>=u_xlat1.z;
    u_xlatb9 = u_xlat1.z>=1.0;
    u_xlatb1.x = u_xlatb9 || u_xlatb1.x;
    u_xlat16_10.x = (u_xlatb1.x) ? 1.0 : u_xlat16_10.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_18 = u_xlat1.x * u_xlat1.x;
    u_xlat16_26 = (-u_xlat16_10.x) + 1.0;
    u_xlat16_10.x = u_xlat16_18 * u_xlat16_26 + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat16_10.x * unity_LightData.z;
    u_xlat16_10.xyz = u_xlat16_10.xxx * _MainLightColor.xyz;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_6.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_6.x));
    u_xlat16_6.xyz = u_xlat16_10.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati17 = int(u_xlatu_loop_1 & 3u);
        u_xlatu25 = u_xlatu_loop_1 >> 2u;
        u_xlat16_30 = dot(unity_LightIndices[int(u_xlatu25)], ImmCB_0[u_xlati17]);
        u_xlati17 = int(u_xlat16_30);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati17].www + _AdditionalLightsPosition[u_xlati17].xyz;
        u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat25 = max(u_xlat25, 6.10351562e-05);
        u_xlat28 = inversesqrt(u_xlat25);
        u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
        u_xlat28 = float(1.0) / float(u_xlat25);
        u_xlat25 = u_xlat25 * _AdditionalLightsAttenuation[u_xlati17].x + _AdditionalLightsAttenuation[u_xlati17].y;
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
        u_xlat25 = u_xlat25 * u_xlat28;
        u_xlat16_30 = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat4.xyz);
        u_xlat16_30 = u_xlat16_30 * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
        u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
        u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
        u_xlat25 = u_xlat25 * u_xlat16_30;
        u_xlat16_7.xyz = vec3(u_xlat25) * _AdditionalLightsColor[u_xlati17].xyz;
        u_xlat16_30 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
        u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
        u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _EmissionMap;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_15;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_15) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat0.xyz + u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 5) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat9;
uint u_xlatu9;
bool u_xlatb9;
mediump float u_xlat16_13;
int u_xlati17;
bool u_xlatb17;
mediump float u_xlat16_21;
float u_xlat25;
uint u_xlatu25;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_2.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_5.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_5.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_5.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.xyz = u_xlat16_2.yzw + u_xlat16_5.xyz;
    u_xlat16_2.yzw = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.x = dot(u_xlat16_2, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_5.x = (-u_xlat16_5.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_5.x);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat9.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat9.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_5.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_5.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_5.x;
    u_xlatb1.x = 0.0>=u_xlat1.z;
    u_xlatb9 = u_xlat1.z>=1.0;
    u_xlatb1.x = u_xlatb9 || u_xlatb1.x;
    u_xlat16_5.x = (u_xlatb1.x) ? 1.0 : u_xlat16_5.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_13 = u_xlat1.x * u_xlat1.x;
    u_xlat16_21 = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_21 + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * unity_LightData.z;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _MainLightColor.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_29) + vs_TEXCOORD8.xyz;
    u_xlat16_29 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_29));
    u_xlat16_6.xyz = u_xlat16_5.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati17 = int(u_xlatu_loop_1 & 3u);
        u_xlatu25 = u_xlatu_loop_1 >> 2u;
        u_xlat16_29 = dot(unity_LightIndices[int(u_xlatu25)], ImmCB_0[u_xlati17]);
        u_xlati17 = int(u_xlat16_29);
        u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati17].www + _AdditionalLightsPosition[u_xlati17].xyz;
        u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat25 = max(u_xlat25, 6.10351562e-05);
        u_xlat27 = inversesqrt(u_xlat25);
        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
        u_xlat27 = float(1.0) / float(u_xlat25);
        u_xlat25 = u_xlat25 * _AdditionalLightsAttenuation[u_xlati17].x + _AdditionalLightsAttenuation[u_xlati17].y;
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
        u_xlat25 = u_xlat25 * u_xlat27;
        u_xlat16_29 = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
        u_xlat16_29 = u_xlat16_29 * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
        u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
        u_xlat25 = u_xlat25 * u_xlat16_29;
        u_xlat16_7.xyz = vec3(u_xlat25) * _AdditionalLightsColor[u_xlati17].xyz;
        u_xlat16_29 = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
        u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat10;
uint u_xlatu10;
bool u_xlatb10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_15;
int u_xlati19;
bool u_xlatb19;
mediump float u_xlat16_24;
float u_xlat28;
uint u_xlatu28;
float u_xlat31;
mediump float u_xlat16_33;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat10.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10.x;
        u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10.x;
        u_xlat10.x = u_xlat10.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat10.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat10.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-_CameraFadeParams.x);
    u_xlat10.x = u_xlat10.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat10.x * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_11.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_6.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;
    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb10 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat1.x * u_xlat1.x;
    u_xlat16_24 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_15 * u_xlat16_24 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_33 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33) + vs_TEXCOORD8.xyz;
    u_xlat16_33 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_33));
    u_xlat16_7.xyz = u_xlat16_6.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati19 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu28 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_33 = dot(unity_LightIndices[int(u_xlatu28)], ImmCB_0[u_xlati19]);
        u_xlati19 = int(u_xlat16_33);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati19].www + _AdditionalLightsPosition[u_xlati19].xyz;
        u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = max(u_xlat28, 6.10351562e-05);
        u_xlat31 = inversesqrt(u_xlat28);
        u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
        u_xlat31 = float(1.0) / float(u_xlat28);
        u_xlat28 = u_xlat28 * _AdditionalLightsAttenuation[u_xlati19].x + _AdditionalLightsAttenuation[u_xlati19].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
        u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
        u_xlat28 = u_xlat28 * u_xlat31;
        u_xlat16_33 = dot(_AdditionalLightsSpotDir[u_xlati19].xyz, u_xlat4.xyz);
        u_xlat16_33 = u_xlat16_33 * _AdditionalLightsAttenuation[u_xlati19].z + _AdditionalLightsAttenuation[u_xlati19].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat28 = u_xlat28 * u_xlat16_33;
        u_xlat16_8.xyz = vec3(u_xlat28) * _AdditionalLightsColor[u_xlati19].xyz;
        u_xlat16_33 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat0.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb15 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
int u_xlati2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
int u_xlati8;
float u_xlat14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
float u_xlat23;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + vs_TEXCOORD8.xyz;
    u_xlat16_19 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati2 = int(u_xlat16_19);
    u_xlat16_3.xyz = u_xlat16_1.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati2 ; u_xlati_loop_1++)
    {
        u_xlat14 = float(u_xlati_loop_1);
        u_xlatb20 = u_xlat14<2.0;
        u_xlat16_4.xy = (bool(u_xlatb20)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat5.x = u_xlat14 + -2.0;
        u_xlat14 = (u_xlatb20) ? u_xlat14 : u_xlat5.x;
        u_xlatb14 = u_xlat14<1.0;
        u_xlat16_19 = (u_xlatb14) ? u_xlat16_4.x : u_xlat16_4.y;
        u_xlati14 = int(u_xlat16_19);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati14).www + _AdditionalLightsPositionDynamicIndex(u_xlati14).xyz;
        u_xlat20 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat20 = max(u_xlat20, 6.10351562e-05);
        u_xlat23 = inversesqrt(u_xlat20);
        u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
        u_xlat23 = float(1.0) / u_xlat20;
        u_xlat20 = u_xlat20 * _AdditionalLightsAttenuationDynamicIndex(u_xlati14).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati14).y;
        u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
        u_xlat20 = u_xlat20 * u_xlat23;
        u_xlat16_19 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati14).xyz, u_xlat5.xyz);
        u_xlat16_19 = u_xlat16_19 * _AdditionalLightsAttenuationDynamicIndex(u_xlati14).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati14).w;
        u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
        u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
        u_xlat20 = u_xlat16_19 * u_xlat20;
        u_xlat16_4.xyz = vec3(u_xlat20) * _AdditionalLightsColorDynamicIndex(u_xlati14).xyz;
        u_xlat16_19 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
        u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
        u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
    u_xlatb2 = _Surface==1.0;
    SV_Target0.w = (u_xlatb2) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat10;
uint u_xlatu10;
bool u_xlatb10;
mediump float u_xlat16_15;
int u_xlati19;
bool u_xlatb19;
float u_xlat28;
uint u_xlatu28;
mediump float u_xlat16_29;
float u_xlat31;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_29 = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_29 = (-u_xlat16_29) + 4.0;
    u_xlatu1 = uint(u_xlat16_29);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;
    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_29 = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb10 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
    u_xlat16_29 = (u_xlatb1.x) ? 1.0 : u_xlat16_29;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_15 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_6.x * u_xlat16_15 + u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_29) + vs_TEXCOORD8.xyz;
    u_xlat16_29 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_29));
    u_xlat16_7.xyz = u_xlat16_6.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati19 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu28 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_29 = dot(unity_LightIndices[int(u_xlatu28)], ImmCB_0[u_xlati19]);
        u_xlati19 = int(u_xlat16_29);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati19].www + _AdditionalLightsPosition[u_xlati19].xyz;
        u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = max(u_xlat28, 6.10351562e-05);
        u_xlat31 = inversesqrt(u_xlat28);
        u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
        u_xlat31 = float(1.0) / float(u_xlat28);
        u_xlat28 = u_xlat28 * _AdditionalLightsAttenuation[u_xlati19].x + _AdditionalLightsAttenuation[u_xlati19].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
        u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
        u_xlat28 = u_xlat28 * u_xlat31;
        u_xlat16_29 = dot(_AdditionalLightsSpotDir[u_xlati19].xyz, u_xlat4.xyz);
        u_xlat16_29 = u_xlat16_29 * _AdditionalLightsAttenuation[u_xlati19].z + _AdditionalLightsAttenuation[u_xlati19].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
        u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
        u_xlat28 = u_xlat28 * u_xlat16_29;
        u_xlat16_8.xyz = vec3(u_xlat28) * _AdditionalLightsColor[u_xlati19].xyz;
        u_xlat16_29 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_29) + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat7;
int u_xlati7;
mediump vec3 u_xlat16_8;
float u_xlat13;
int u_xlati13;
bool u_xlatb13;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_21;
float u_xlat23;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat7 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat7;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat7;
        u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat7) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat7 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat7 = _ZBufferParams.z * u_xlat7 + _ZBufferParams.w;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat7 = u_xlat7 + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat16_2 = u_xlat7 * u_xlat1.x;
    u_xlat16_8.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_3.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati1 = int(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_8.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati1 ; u_xlati_loop_1++)
    {
        u_xlat13 = float(u_xlati_loop_1);
        u_xlatb19 = u_xlat13<2.0;
        u_xlat16_4.xy = (bool(u_xlatb19)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat5.x = u_xlat13 + -2.0;
        u_xlat13 = (u_xlatb19) ? u_xlat13 : u_xlat5.x;
        u_xlatb13 = u_xlat13<1.0;
        u_xlat16_21 = (u_xlatb13) ? u_xlat16_4.x : u_xlat16_4.y;
        u_xlati13 = int(u_xlat16_21);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati13).www + _AdditionalLightsPositionDynamicIndex(u_xlati13).xyz;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat23 = inversesqrt(u_xlat19);
        u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
        u_xlat23 = float(1.0) / u_xlat19;
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati13).y;
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat19 = u_xlat19 * u_xlat23;
        u_xlat16_21 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati13).xyz, u_xlat5.xyz);
        u_xlat16_21 = u_xlat16_21 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati13).w;
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
        u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
        u_xlat19 = u_xlat19 * u_xlat16_21;
        u_xlat16_4.xyz = vec3(u_xlat19) * _AdditionalLightsColorDynamicIndex(u_xlati13).xyz;
        u_xlat16_21 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
        u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat9;
uint u_xlatu9;
bool u_xlatb9;
mediump vec3 u_xlat16_10;
int u_xlati17;
bool u_xlatb17;
mediump float u_xlat16_18;
float u_xlat25;
uint u_xlatu25;
mediump float u_xlat16_26;
float u_xlat28;
mediump float u_xlat16_30;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat9.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat9.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat9.x;
        u_xlat9.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat9.x;
        u_xlat9.x = u_xlat9.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat9.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat9.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
    u_xlat9.x = float(1.0) / u_xlat9.x;
    u_xlat9.x = u_xlat9.x + (-_CameraFadeParams.x);
    u_xlat9.x = u_xlat9.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat9.x * u_xlat1.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_10.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_10.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_10.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.yzw;
    u_xlat16_3.yzw = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_10.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_10.x = (-u_xlat16_10.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_10.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat9.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat9.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_10.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_10.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb9 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb9 || u_xlatb1.x;
    u_xlat16_10.x = (u_xlatb1.x) ? 1.0 : u_xlat16_10.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat1.x * u_xlat1.x;
    u_xlat16_26 = (-u_xlat16_10.x) + 1.0;
    u_xlat16_10.x = u_xlat16_18 * u_xlat16_26 + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat16_10.x * unity_LightData.z;
    u_xlat16_10.xyz = u_xlat16_10.xxx * _MainLightColor.xyz;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_6.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_6.x));
    u_xlat16_6.xyz = u_xlat16_10.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati17 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu25 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_30 = dot(unity_LightIndices[int(u_xlatu25)], ImmCB_0[u_xlati17]);
        u_xlati17 = int(u_xlat16_30);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati17].www + _AdditionalLightsPosition[u_xlati17].xyz;
        u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat25 = max(u_xlat25, 6.10351562e-05);
        u_xlat28 = inversesqrt(u_xlat25);
        u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
        u_xlat28 = float(1.0) / float(u_xlat25);
        u_xlat25 = u_xlat25 * _AdditionalLightsAttenuation[u_xlati17].x + _AdditionalLightsAttenuation[u_xlati17].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
        u_xlat25 = u_xlat25 * u_xlat28;
        u_xlat16_30 = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat4.xyz);
        u_xlat16_30 = u_xlat16_30 * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
        u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
        u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
        u_xlat25 = u_xlat25 * u_xlat16_30;
        u_xlat16_7.xyz = vec3(u_xlat25) * _AdditionalLightsColor[u_xlati17].xyz;
        u_xlat16_30 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
        u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb15 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp sampler2D _EmissionMap;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
lowp vec3 u_xlat10_1;
int u_xlati1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati8;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
float u_xlat27;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_23 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_23) + vs_TEXCOORD8.xyz;
    u_xlat16_23 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati1 = int(u_xlat16_23);
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati1 ; u_xlati_loop_1++)
    {
        u_xlat15 = float(u_xlati_loop_1);
        u_xlatb22 = u_xlat15<2.0;
        u_xlat16_5.xy = (bool(u_xlatb22)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat6.x = u_xlat15 + -2.0;
        u_xlat15 = (u_xlatb22) ? u_xlat15 : u_xlat6.x;
        u_xlatb15 = u_xlat15<1.0;
        u_xlat16_23 = (u_xlatb15) ? u_xlat16_5.x : u_xlat16_5.y;
        u_xlati15 = int(u_xlat16_23);
        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati15).www + _AdditionalLightsPositionDynamicIndex(u_xlati15).xyz;
        u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat27 = inversesqrt(u_xlat22);
        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
        u_xlat27 = float(1.0) / u_xlat22;
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat27;
        u_xlat16_23 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati15).xyz, u_xlat6.xyz);
        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).w;
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
        u_xlat22 = u_xlat22 * u_xlat16_23;
        u_xlat16_5.xyz = vec3(u_xlat22) * _AdditionalLightsColorDynamicIndex(u_xlati15).xyz;
        u_xlat16_23 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
        u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat9;
uint u_xlatu9;
bool u_xlatb9;
mediump float u_xlat16_13;
int u_xlati17;
bool u_xlatb17;
mediump float u_xlat16_21;
float u_xlat25;
uint u_xlatu25;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_2.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_5.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_5.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_5.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.xyz = u_xlat16_2.yzw + u_xlat16_5.xyz;
    u_xlat16_2.yzw = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.x = dot(u_xlat16_2, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_5.x = (-u_xlat16_5.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_5.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat9.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat9.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_5.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_5.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb9 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb9 || u_xlatb1.x;
    u_xlat16_5.x = (u_xlatb1.x) ? 1.0 : u_xlat16_5.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat1.x * u_xlat1.x;
    u_xlat16_21 = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_21 + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * unity_LightData.z;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _MainLightColor.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_29) + vs_TEXCOORD8.xyz;
    u_xlat16_29 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_29));
    u_xlat16_6.xyz = u_xlat16_5.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati17 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu25 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_29 = dot(unity_LightIndices[int(u_xlatu25)], ImmCB_0[u_xlati17]);
        u_xlati17 = int(u_xlat16_29);
        u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati17].www + _AdditionalLightsPosition[u_xlati17].xyz;
        u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat25 = max(u_xlat25, 6.10351562e-05);
        u_xlat27 = inversesqrt(u_xlat25);
        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
        u_xlat27 = float(1.0) / float(u_xlat25);
        u_xlat25 = u_xlat25 * _AdditionalLightsAttenuation[u_xlati17].x + _AdditionalLightsAttenuation[u_xlati17].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
        u_xlat25 = u_xlat25 * u_xlat27;
        u_xlat16_29 = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
        u_xlat16_29 = u_xlat16_29 * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
        u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
        u_xlat25 = u_xlat25 * u_xlat16_29;
        u_xlat16_7.xyz = vec3(u_xlat25) * _AdditionalLightsColor[u_xlati17].xyz;
        u_xlat16_29 = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _EmissionMap;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat8;
int u_xlati8;
mediump vec3 u_xlat16_9;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
float u_xlat27;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8;
        u_xlat8 = u_xlat8 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8 = _ZBufferParams.z * u_xlat8 + _ZBufferParams.w;
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat8 = u_xlat8 + (-_CameraFadeParams.x);
    u_xlat8 = u_xlat8 * _CameraFadeParams.y;
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat16_2 = u_xlat8 * u_xlat1.x;
    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_24 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_24) + vs_TEXCOORD8.xyz;
    u_xlat16_24 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati1 = int(u_xlat16_24);
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati1 ; u_xlati_loop_1++)
    {
        u_xlat15 = float(u_xlati_loop_1);
        u_xlatb22 = u_xlat15<2.0;
        u_xlat16_5.xy = (bool(u_xlatb22)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat6.x = u_xlat15 + -2.0;
        u_xlat15 = (u_xlatb22) ? u_xlat15 : u_xlat6.x;
        u_xlatb15 = u_xlat15<1.0;
        u_xlat16_24 = (u_xlatb15) ? u_xlat16_5.x : u_xlat16_5.y;
        u_xlati15 = int(u_xlat16_24);
        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati15).www + _AdditionalLightsPositionDynamicIndex(u_xlati15).xyz;
        u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat27 = inversesqrt(u_xlat22);
        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
        u_xlat27 = float(1.0) / u_xlat22;
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat27;
        u_xlat16_24 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati15).xyz, u_xlat6.xyz);
        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).w;
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
        u_xlat22 = u_xlat22 * u_xlat16_24;
        u_xlat16_5.xyz = vec3(u_xlat22) * _AdditionalLightsColorDynamicIndex(u_xlati15).xyz;
        u_xlat16_24 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
        u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat10;
uint u_xlatu10;
bool u_xlatb10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_15;
int u_xlati19;
bool u_xlatb19;
mediump float u_xlat16_24;
float u_xlat28;
uint u_xlatu28;
float u_xlat31;
mediump float u_xlat16_33;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat10.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10.x;
        u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10.x;
        u_xlat10.x = u_xlat10.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat10.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat10.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-_CameraFadeParams.x);
    u_xlat10.x = u_xlat10.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat10.x * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_11.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_6.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;
    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb10 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat1.x * u_xlat1.x;
    u_xlat16_24 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_15 * u_xlat16_24 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_33 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33) + vs_TEXCOORD8.xyz;
    u_xlat16_33 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_33));
    u_xlat16_7.xyz = u_xlat16_6.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati19 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu28 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_33 = dot(unity_LightIndices[int(u_xlatu28)], ImmCB_0[u_xlati19]);
        u_xlati19 = int(u_xlat16_33);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati19].www + _AdditionalLightsPosition[u_xlati19].xyz;
        u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = max(u_xlat28, 6.10351562e-05);
        u_xlat31 = inversesqrt(u_xlat28);
        u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
        u_xlat31 = float(1.0) / float(u_xlat28);
        u_xlat28 = u_xlat28 * _AdditionalLightsAttenuation[u_xlati19].x + _AdditionalLightsAttenuation[u_xlati19].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
        u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
        u_xlat28 = u_xlat28 * u_xlat31;
        u_xlat16_33 = dot(_AdditionalLightsSpotDir[u_xlati19].xyz, u_xlat4.xyz);
        u_xlat16_33 = u_xlat16_33 * _AdditionalLightsAttenuation[u_xlati19].z + _AdditionalLightsAttenuation[u_xlati19].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat28 = u_xlat28 * u_xlat16_33;
        u_xlat16_8.xyz = vec3(u_xlat28) * _AdditionalLightsColor[u_xlati19].xyz;
        u_xlat16_33 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat0.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb21 = unity_OrthoParams.w==0.0;
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _EmissionMap;
uniform highp sampler2D _MainLightShadowmapTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
mediump float u_xlat16_17;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
float u_xlat27;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8;
        u_xlat8 = u_xlat8 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8 = _ZBufferParams.z * u_xlat8 + _ZBufferParams.w;
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat8 = u_xlat8 + (-_CameraFadeParams.x);
    u_xlat8 = u_xlat8 * _CameraFadeParams.y;
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat16_2 = u_xlat8 * u_xlat1.x;
    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat1.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb1.x = u_xlat1.x<vs_TEXCOORD7.z;
    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_10 = (u_xlatb1.x) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_3.x = u_xlat16_10 + u_xlat16_3.x;
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
    u_xlatb8 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_3.x = (u_xlatb1.x) ? 1.0 : u_xlat16_3.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_17 = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = u_xlat16_10 * u_xlat16_17 + u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;
    u_xlat16_24 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_24) + vs_TEXCOORD8.xyz;
    u_xlat16_24 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati1 = int(u_xlat16_24);
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati1 ; u_xlati_loop_1++)
    {
        u_xlat15 = float(u_xlati_loop_1);
        u_xlatb22 = u_xlat15<2.0;
        u_xlat16_5.xy = (bool(u_xlatb22)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat6.x = u_xlat15 + -2.0;
        u_xlat15 = (u_xlatb22) ? u_xlat15 : u_xlat6.x;
        u_xlatb15 = u_xlat15<1.0;
        u_xlat16_24 = (u_xlatb15) ? u_xlat16_5.x : u_xlat16_5.y;
        u_xlati15 = int(u_xlat16_24);
        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati15).www + _AdditionalLightsPositionDynamicIndex(u_xlati15).xyz;
        u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat27 = inversesqrt(u_xlat22);
        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
        u_xlat27 = float(1.0) / u_xlat22;
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat27;
        u_xlat16_24 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati15).xyz, u_xlat6.xyz);
        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).w;
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
        u_xlat22 = u_xlat22 * u_xlat16_24;
        u_xlat16_5.xyz = vec3(u_xlat22) * _AdditionalLightsColorDynamicIndex(u_xlati15).xyz;
        u_xlat16_24 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
        u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat10;
uint u_xlatu10;
bool u_xlatb10;
mediump float u_xlat16_15;
int u_xlati19;
bool u_xlatb19;
float u_xlat28;
uint u_xlatu28;
mediump float u_xlat16_29;
float u_xlat31;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_29 = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_29 = (-u_xlat16_29) + 4.0;
    u_xlatu1 = uint(u_xlat16_29);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;
    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_29 = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb10 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
    u_xlat16_29 = (u_xlatb1.x) ? 1.0 : u_xlat16_29;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_15 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_6.x * u_xlat16_15 + u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_29) + vs_TEXCOORD8.xyz;
    u_xlat16_29 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_29));
    u_xlat16_7.xyz = u_xlat16_6.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati19 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu28 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_29 = dot(unity_LightIndices[int(u_xlatu28)], ImmCB_0[u_xlati19]);
        u_xlati19 = int(u_xlat16_29);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati19].www + _AdditionalLightsPosition[u_xlati19].xyz;
        u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = max(u_xlat28, 6.10351562e-05);
        u_xlat31 = inversesqrt(u_xlat28);
        u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
        u_xlat31 = float(1.0) / float(u_xlat28);
        u_xlat28 = u_xlat28 * _AdditionalLightsAttenuation[u_xlati19].x + _AdditionalLightsAttenuation[u_xlati19].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
        u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
        u_xlat28 = u_xlat28 * u_xlat31;
        u_xlat16_29 = dot(_AdditionalLightsSpotDir[u_xlati19].xyz, u_xlat4.xyz);
        u_xlat16_29 = u_xlat16_29 * _AdditionalLightsAttenuation[u_xlati19].z + _AdditionalLightsAttenuation[u_xlati19].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
        u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
        u_xlat28 = u_xlat28 * u_xlat16_29;
        u_xlat16_8.xyz = vec3(u_xlat28) * _AdditionalLightsColor[u_xlati19].xyz;
        u_xlat16_29 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_29) + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp sampler2D _EmissionMap;
uniform highp sampler2D _MainLightShadowmapTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati8;
bool u_xlatb8;
mediump float u_xlat16_10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
float u_xlat27;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat1.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb1 = u_xlat1.x<vs_TEXCOORD7.z;
    u_xlat16_23 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_3.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_3.x;
    u_xlatb1 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb8 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1 = u_xlatb8 || u_xlatb1;
    u_xlat16_23 = (u_xlatb1) ? 1.0 : u_xlat16_23;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_10 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = u_xlat16_3.x * u_xlat16_10 + u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 * unity_LightData.z;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * _MainLightColor.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_23) + vs_TEXCOORD8.xyz;
    u_xlat16_23 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati1 = int(u_xlat16_23);
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati1 ; u_xlati_loop_1++)
    {
        u_xlat15 = float(u_xlati_loop_1);
        u_xlatb22 = u_xlat15<2.0;
        u_xlat16_5.xy = (bool(u_xlatb22)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat6.x = u_xlat15 + -2.0;
        u_xlat15 = (u_xlatb22) ? u_xlat15 : u_xlat6.x;
        u_xlatb15 = u_xlat15<1.0;
        u_xlat16_23 = (u_xlatb15) ? u_xlat16_5.x : u_xlat16_5.y;
        u_xlati15 = int(u_xlat16_23);
        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati15).www + _AdditionalLightsPositionDynamicIndex(u_xlati15).xyz;
        u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat27 = inversesqrt(u_xlat22);
        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
        u_xlat27 = float(1.0) / u_xlat22;
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat27;
        u_xlat16_23 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati15).xyz, u_xlat6.xyz);
        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuationDynamicIndex(u_xlati15).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati15).w;
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
        u_xlat22 = u_xlat22 * u_xlat16_23;
        u_xlat16_5.xyz = vec3(u_xlat22) * _AdditionalLightsColorDynamicIndex(u_xlati15).xyz;
        u_xlat16_23 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
        u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat9;
uint u_xlatu9;
bool u_xlatb9;
mediump vec3 u_xlat16_10;
int u_xlati17;
bool u_xlatb17;
mediump float u_xlat16_18;
float u_xlat25;
uint u_xlatu25;
mediump float u_xlat16_26;
float u_xlat28;
mediump float u_xlat16_30;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat9.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat9.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat9.x;
        u_xlat9.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat9.x;
        u_xlat9.x = u_xlat9.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat9.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat9.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
    u_xlat9.x = float(1.0) / u_xlat9.x;
    u_xlat9.x = u_xlat9.x + (-_CameraFadeParams.x);
    u_xlat9.x = u_xlat9.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat9.x * u_xlat1.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_10.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_10.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_10.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.yzw;
    u_xlat16_3.yzw = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_10.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_10.x = (-u_xlat16_10.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_10.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat9.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat9.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_10.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_10.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb9 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb9 || u_xlatb1.x;
    u_xlat16_10.x = (u_xlatb1.x) ? 1.0 : u_xlat16_10.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat1.x * u_xlat1.x;
    u_xlat16_26 = (-u_xlat16_10.x) + 1.0;
    u_xlat16_10.x = u_xlat16_18 * u_xlat16_26 + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat16_10.x * unity_LightData.z;
    u_xlat16_10.xyz = u_xlat16_10.xxx * _MainLightColor.xyz;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_6.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_6.x));
    u_xlat16_6.xyz = u_xlat16_10.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati17 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu25 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_30 = dot(unity_LightIndices[int(u_xlatu25)], ImmCB_0[u_xlati17]);
        u_xlati17 = int(u_xlat16_30);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati17].www + _AdditionalLightsPosition[u_xlati17].xyz;
        u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat25 = max(u_xlat25, 6.10351562e-05);
        u_xlat28 = inversesqrt(u_xlat25);
        u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
        u_xlat28 = float(1.0) / float(u_xlat25);
        u_xlat25 = u_xlat25 * _AdditionalLightsAttenuation[u_xlati17].x + _AdditionalLightsAttenuation[u_xlati17].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
        u_xlat25 = u_xlat25 * u_xlat28;
        u_xlat16_30 = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat4.xyz);
        u_xlat16_30 = u_xlat16_30 * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
        u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
        u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
        u_xlat25 = u_xlat25 * u_xlat16_30;
        u_xlat16_7.xyz = vec3(u_xlat25) * _AdditionalLightsColor[u_xlati17].xyz;
        u_xlat16_30 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
        u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb21 = unity_OrthoParams.w==0.0;
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _MainLightShadowmapTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
mediump vec3 u_xlat16_8;
float u_xlat13;
int u_xlati13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat23;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat7 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat7;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat7;
        u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat7) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat7 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat7 = _ZBufferParams.z * u_xlat7 + _ZBufferParams.w;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat7 = u_xlat7 + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat16_2 = u_xlat7 * u_xlat1.x;
    u_xlat1.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb1.x = u_xlat1.x<vs_TEXCOORD7.z;
    u_xlat16_8.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_14 = (u_xlatb1.x) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_8.x = u_xlat16_14 + u_xlat16_8.x;
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
    u_xlatb7 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1.x = u_xlatb7 || u_xlatb1.x;
    u_xlat16_8.x = (u_xlatb1.x) ? 1.0 : u_xlat16_8.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_14 = u_xlat1.x * u_xlat1.x;
    u_xlat16_20 = (-u_xlat16_8.x) + 1.0;
    u_xlat16_8.x = u_xlat16_14 * u_xlat16_20 + u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * unity_LightData.z;
    u_xlat16_8.xyz = u_xlat16_8.xxx * _MainLightColor.xyz;
    u_xlat16_3.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati1 = int(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_8.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati1 ; u_xlati_loop_1++)
    {
        u_xlat13 = float(u_xlati_loop_1);
        u_xlatb19 = u_xlat13<2.0;
        u_xlat16_4.xy = (bool(u_xlatb19)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat5.x = u_xlat13 + -2.0;
        u_xlat13 = (u_xlatb19) ? u_xlat13 : u_xlat5.x;
        u_xlatb13 = u_xlat13<1.0;
        u_xlat16_21 = (u_xlatb13) ? u_xlat16_4.x : u_xlat16_4.y;
        u_xlati13 = int(u_xlat16_21);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati13).www + _AdditionalLightsPositionDynamicIndex(u_xlati13).xyz;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat23 = inversesqrt(u_xlat19);
        u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
        u_xlat23 = float(1.0) / u_xlat19;
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati13).y;
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat19 = u_xlat19 * u_xlat23;
        u_xlat16_21 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati13).xyz, u_xlat5.xyz);
        u_xlat16_21 = u_xlat16_21 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati13).w;
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
        u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
        u_xlat19 = u_xlat19 * u_xlat16_21;
        u_xlat16_4.xyz = vec3(u_xlat19) * _AdditionalLightsColorDynamicIndex(u_xlati13).xyz;
        u_xlat16_21 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
        u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat9;
uint u_xlatu9;
bool u_xlatb9;
mediump float u_xlat16_13;
int u_xlati17;
bool u_xlatb17;
mediump float u_xlat16_21;
float u_xlat25;
uint u_xlatu25;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_2.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_5.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_5.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_5.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.xyz = u_xlat16_2.yzw + u_xlat16_5.xyz;
    u_xlat16_2.yzw = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.x = dot(u_xlat16_2, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_5.x = (-u_xlat16_5.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_5.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat9.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat9.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_5.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_5.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb9 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb9 || u_xlatb1.x;
    u_xlat16_5.x = (u_xlatb1.x) ? 1.0 : u_xlat16_5.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat1.x * u_xlat1.x;
    u_xlat16_21 = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_21 + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * unity_LightData.z;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _MainLightColor.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_29) + vs_TEXCOORD8.xyz;
    u_xlat16_29 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_29));
    u_xlat16_6.xyz = u_xlat16_5.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati17 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu25 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_29 = dot(unity_LightIndices[int(u_xlatu25)], ImmCB_0[u_xlati17]);
        u_xlati17 = int(u_xlat16_29);
        u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati17].www + _AdditionalLightsPosition[u_xlati17].xyz;
        u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat25 = max(u_xlat25, 6.10351562e-05);
        u_xlat27 = inversesqrt(u_xlat25);
        u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
        u_xlat27 = float(1.0) / float(u_xlat25);
        u_xlat25 = u_xlat25 * _AdditionalLightsAttenuation[u_xlati17].x + _AdditionalLightsAttenuation[u_xlati17].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
        u_xlat25 = u_xlat25 * u_xlat27;
        u_xlat16_29 = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
        u_xlat16_29 = u_xlat16_29 * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
        u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
        u_xlat25 = u_xlat25 * u_xlat16_29;
        u_xlat16_7.xyz = vec3(u_xlat25) * _AdditionalLightsColor[u_xlati17].xyz;
        u_xlat16_29 = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
        u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _MainLightShadowmapTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
int u_xlati1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
int u_xlati7;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat13;
int u_xlati13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
float u_xlat23;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat1.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb1 = u_xlat1.x<vs_TEXCOORD7.z;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_8 = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_2.x = u_xlat16_8 + u_xlat16_2.x;
    u_xlatb1 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb7 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1 = u_xlatb7 || u_xlatb1;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_8 = u_xlat1.x * u_xlat1.x;
    u_xlat16_14 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_8 * u_xlat16_14 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_20) + vs_TEXCOORD8.xyz;
    u_xlat16_20 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati1 = int(u_xlat16_20);
    u_xlat16_3.xyz = u_xlat16_2.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati1 ; u_xlati_loop_1++)
    {
        u_xlat13 = float(u_xlati_loop_1);
        u_xlatb19 = u_xlat13<2.0;
        u_xlat16_4.xy = (bool(u_xlatb19)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat5.x = u_xlat13 + -2.0;
        u_xlat13 = (u_xlatb19) ? u_xlat13 : u_xlat5.x;
        u_xlatb13 = u_xlat13<1.0;
        u_xlat16_20 = (u_xlatb13) ? u_xlat16_4.x : u_xlat16_4.y;
        u_xlati13 = int(u_xlat16_20);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati13).www + _AdditionalLightsPositionDynamicIndex(u_xlati13).xyz;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat23 = inversesqrt(u_xlat19);
        u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
        u_xlat23 = float(1.0) / u_xlat19;
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati13).y;
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat19 = u_xlat19 * u_xlat23;
        u_xlat16_20 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati13).xyz, u_xlat5.xyz);
        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuationDynamicIndex(u_xlati13).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati13).w;
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
        u_xlat19 = u_xlat19 * u_xlat16_20;
        u_xlat16_4.xyz = vec3(u_xlat19) * _AdditionalLightsColorDynamicIndex(u_xlati13).xyz;
        u_xlat16_20 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
        u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_13;
mediump float u_xlat16_20;
mediump float u_xlat16_27;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8.x;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8.x;
        u_xlat8.x = u_xlat8.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-_CameraFadeParams.x);
    u_xlat8.x = u_xlat8.x * _CameraFadeParams.y;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat8.x * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_6.x);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_6.x;
    u_xlatb1.x = 0.0>=u_xlat1.z;
    u_xlatb8 = u_xlat1.z>=1.0;
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_13 = u_xlat1.x * u_xlat1.x;
    u_xlat16_20 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_20 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_27 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_27) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb21 = unity_OrthoParams.w==0.0;
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _EmissionMap;
uniform highp sampler2D _MainLightShadowmapTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat1.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb1.x = u_xlat1.x<vs_TEXCOORD7.z;
    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_7 = (u_xlatb1.x) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_3.x = u_xlat16_7 + u_xlat16_3.x;
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1.x = u_xlatb5 || u_xlatb1.x;
    u_xlat16_3.x = (u_xlatb1.x) ? 1.0 : u_xlat16_3.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_7 = u_xlat1.x * u_xlat1.x;
    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = u_xlat16_7 * u_xlat16_11 + u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_15) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat0.xyz + u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 5) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump float u_xlat16_12;
bool u_xlatb16;
mediump float u_xlat16_17;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat6.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    u_xlatb16 = 0.0>=u_xlat1.z;
    u_xlatb3 = u_xlat1.z>=1.0;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb6 = u_xlatb16 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb6) ? 1.0 : u_xlat16_2.x;
    u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_12 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_12 * u_xlat16_7 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_17 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + vs_TEXCOORD8.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp sampler2D _EmissionMap;
uniform highp sampler2D _MainLightShadowmapTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_9;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb0 = u_xlat0.x<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_5 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_5;
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb4 = vs_TEXCOORD7.z>=1.0;
    u_xlatb0 = u_xlatb4 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat16_5 = (-u_xlat16_1.x) + 1.0;
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat16_9 = u_xlat0.x * u_xlat0.x;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_5 + u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_13 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + vs_TEXCOORD8.xyz;
    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _EmissionColor.xyz;
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    u_xlatb3 = _Surface==1.0;
    SV_Target0.w = (u_xlatb3) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_16;
mediump float u_xlat16_23;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8.x;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8.x;
        u_xlat8.x = u_xlat8.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-_CameraFadeParams.x);
    u_xlat8.x = u_xlat8.x * _CameraFadeParams.y;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat8.x * u_xlat1.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_3.yzw;
    u_xlat16_3.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_9.x = (-u_xlat16_9.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_9.x);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_9.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_9.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_9.x;
    u_xlatb1.x = 0.0>=u_xlat1.z;
    u_xlatb8 = u_xlat1.z>=1.0;
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_9.x = (u_xlatb1.x) ? 1.0 : u_xlat16_9.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_16 = u_xlat1.x * u_xlat1.x;
    u_xlat16_23 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_9.x = u_xlat16_16 * u_xlat16_23 + u_xlat16_9.x;
    u_xlat16_9.x = u_xlat16_9.x * unity_LightData.z;
    u_xlat16_9.xyz = u_xlat16_9.xxx * _MainLightColor.xyz;
    u_xlat16_6 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_6) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb21 = unity_OrthoParams.w==0.0;
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _MainLightShadowmapTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_10;
mediump float u_xlat16_14;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat1.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb1.x = u_xlat1.x<vs_TEXCOORD7.z;
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_10 = (u_xlatb1.x) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_6.x = u_xlat16_10 + u_xlat16_6.x;
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1.x = u_xlatb5 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_14 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_10 * u_xlat16_14 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_3 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 5) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
vec3 u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
mediump float u_xlat16_10;
bool u_xlatb13;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat5.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat5.xyz;
    u_xlat1.xyz = u_xlat5.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    u_xlatb13 = 0.0>=u_xlat1.z;
    u_xlatb3 = u_xlat1.z>=1.0;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb5 = u_xlatb13 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb5) ? 1.0 : u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_6 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_14 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + vs_TEXCOORD8.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _MainLightShadowmapTexture;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
bool u_xlatb2;
bool u_xlatb3;
mediump float u_xlat16_4;
mediump float u_xlat16_7;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb0 = u_xlat0.x<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_4 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_4;
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb3 = vs_TEXCOORD7.z>=1.0;
    u_xlatb0 = u_xlatb3 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat16_4 = (-u_xlat16_1.x) + 1.0;
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat16_7 = u_xlat0.x * u_xlat0.x;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_4 + u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_10 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_10) + vs_TEXCOORD8.xyz;
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlatb2 = _Surface==1.0;
    SV_Target0.w = (u_xlatb2) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_13;
mediump float u_xlat16_20;
mediump float u_xlat16_27;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8.x;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8.x;
        u_xlat8.x = u_xlat8.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-_CameraFadeParams.x);
    u_xlat8.x = u_xlat8.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat8.x * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_6.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb8 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat1.x * u_xlat1.x;
    u_xlat16_20 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_20 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_27 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_27) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump float u_xlat16_12;
bool u_xlatb16;
mediump float u_xlat16_17;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat6.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb16 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb6 = u_xlatb16 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb6) ? 1.0 : u_xlat16_2.x;
    u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_12 * u_xlat16_7 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_17 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + vs_TEXCOORD8.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_16;
mediump float u_xlat16_23;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8.x;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8.x;
        u_xlat8.x = u_xlat8.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-_CameraFadeParams.x);
    u_xlat8.x = u_xlat8.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat8.x * u_xlat1.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_3.yzw;
    u_xlat16_3.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_9.x = (-u_xlat16_9.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_9.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_9.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_9.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb8 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_9.x = (u_xlatb1.x) ? 1.0 : u_xlat16_9.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat1.x * u_xlat1.x;
    u_xlat16_23 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_9.x = u_xlat16_16 * u_xlat16_23 + u_xlat16_9.x;
    u_xlat16_9.x = u_xlat16_9.x * unity_LightData.z;
    u_xlat16_9.xyz = u_xlat16_9.xxx * _MainLightColor.xyz;
    u_xlat16_6 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_6) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
vec3 u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
mediump float u_xlat16_10;
bool u_xlatb13;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat5.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat5.xyz;
    u_xlat1.xyz = u_xlat5.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb13 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb5 = u_xlatb13 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb5) ? 1.0 : u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_6 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_14 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + vs_TEXCOORD8.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_13;
mediump float u_xlat16_20;
mediump float u_xlat16_27;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8.x;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8.x;
        u_xlat8.x = u_xlat8.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-_CameraFadeParams.x);
    u_xlat8.x = u_xlat8.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat8.x * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_6.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb8 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat1.x * u_xlat1.x;
    u_xlat16_20 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_20 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_27 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_27) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump float u_xlat16_12;
bool u_xlatb16;
mediump float u_xlat16_17;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat6.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb16 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb6 = u_xlatb16 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb6) ? 1.0 : u_xlat16_2.x;
    u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_12 * u_xlat16_7 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_17 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + vs_TEXCOORD8.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_16;
mediump float u_xlat16_23;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8.x;
        u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8.x;
        u_xlat8.x = u_xlat8.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8.x) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-_CameraFadeParams.x);
    u_xlat8.x = u_xlat8.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat8.x * u_xlat1.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_3.yzw;
    u_xlat16_3.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_9.x = (-u_xlat16_9.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_9.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_9.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_9.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1.x = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb8 = u_xlat1.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_9.x = (u_xlatb1.x) ? 1.0 : u_xlat16_9.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat1.x * u_xlat1.x;
    u_xlat16_23 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_9.x = u_xlat16_16 * u_xlat16_23 + u_xlat16_9.x;
    u_xlat16_9.x = u_xlat16_9.x * unity_LightData.z;
    u_xlat16_9.xyz = u_xlat16_9.xxx * _MainLightColor.xyz;
    u_xlat16_6 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_6) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
vec3 u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
mediump float u_xlat16_10;
bool u_xlatb13;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat5.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat5.xyz;
    u_xlat1.xyz = u_xlat5.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb13 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb5 = u_xlatb13 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb5) ? 1.0 : u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_6 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_14 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + vs_TEXCOORD8.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 7) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec4 vs_TEXCOORD7;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 8) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb32;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
    vs_TEXCOORD7.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb32 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb32) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb32) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb32) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat2.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec4 vs_TEXCOORD7;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat8;
uint u_xlatu8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
int u_xlati15;
bool u_xlatb15;
mediump float u_xlat16_17;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_24;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8;
        u_xlat8 = u_xlat8 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8 = _ZBufferParams.z * u_xlat8 + _ZBufferParams.w;
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat8 = u_xlat8 + (-_CameraFadeParams.x);
    u_xlat8 = u_xlat8 * _CameraFadeParams.y;
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat16_2 = u_xlat8 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_3.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_3.x;
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
    u_xlatb8 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_3.x = (u_xlatb1.x) ? 1.0 : u_xlat16_3.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_17 = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = u_xlat16_10 * u_xlat16_17 + u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;
    u_xlat16_24 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_24) + vs_TEXCOORD8.xyz;
    u_xlat16_24 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_24));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(u_xlatu_loop_1 & 3u);
        u_xlatu22 = u_xlatu_loop_1 >> 2u;
        u_xlat16_24 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_24);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
        u_xlat22 = u_xlat22 * u_xlat16_24;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_24 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD7;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat1.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat1.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat2.xyz;
    vs_TEXCOORD7.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_8.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_8.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD7;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
uint u_xlatu8;
bool u_xlatb8;
mediump float u_xlat16_10;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_23;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_23 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_23 = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_23;
    u_xlatb1 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb8 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1 = u_xlatb8 || u_xlatb1;
    u_xlat16_23 = (u_xlatb1) ? 1.0 : u_xlat16_23;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_10 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = u_xlat16_3.x * u_xlat16_10 + u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 * unity_LightData.z;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * _MainLightColor.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_23) + vs_TEXCOORD8.xyz;
    u_xlat16_23 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_23));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(u_xlatu_loop_1 & 3u);
        u_xlatu22 = u_xlatu_loop_1 >> 2u;
        u_xlat16_23 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_23);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
        u_xlat22 = u_xlat22 * u_xlat16_23;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 7) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec4 vs_TEXCOORD7;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 8) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb32;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
    vs_TEXCOORD7.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb32 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb32) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb32) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb32) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat2.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec4 vs_TEXCOORD7;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat7;
uint u_xlatu7;
bool u_xlatb7;
mediump vec3 u_xlat16_8;
int u_xlati13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat19;
uint u_xlatu19;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat7 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat7;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat7;
        u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat7) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat7 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat7 = _ZBufferParams.z * u_xlat7 + _ZBufferParams.w;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat7 = u_xlat7 + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat16_2 = u_xlat7 * u_xlat1.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_8.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_8.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_8.x;
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
    u_xlatb7 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1.x = u_xlatb7 || u_xlatb1.x;
    u_xlat16_8.x = (u_xlatb1.x) ? 1.0 : u_xlat16_8.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_14 = u_xlat1.x * u_xlat1.x;
    u_xlat16_20 = (-u_xlat16_8.x) + 1.0;
    u_xlat16_8.x = u_xlat16_14 * u_xlat16_20 + u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * unity_LightData.z;
    u_xlat16_8.xyz = u_xlat16_8.xxx * _MainLightColor.xyz;
    u_xlat16_3.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_3.x));
    u_xlat16_3.xyz = u_xlat16_8.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati13 = int(u_xlatu_loop_1 & 3u);
        u_xlatu19 = u_xlatu_loop_1 >> 2u;
        u_xlat16_21 = dot(unity_LightIndices[int(u_xlatu19)], ImmCB_0[u_xlati13]);
        u_xlati13 = int(u_xlat16_21);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati13].www + _AdditionalLightsPosition[u_xlati13].xyz;
        u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat19);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat19);
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuation[u_xlati13].x + _AdditionalLightsAttenuation[u_xlati13].y;
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat19 = u_xlat19 * u_xlat22;
        u_xlat16_21 = dot(_AdditionalLightsSpotDir[u_xlati13].xyz, u_xlat4.xyz);
        u_xlat16_21 = u_xlat16_21 * _AdditionalLightsAttenuation[u_xlati13].z + _AdditionalLightsAttenuation[u_xlati13].w;
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
        u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
        u_xlat19 = u_xlat19 * u_xlat16_21;
        u_xlat16_5.xyz = vec3(u_xlat19) * _AdditionalLightsColor[u_xlati13].xyz;
        u_xlat16_21 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD7;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat1.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat1.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat2.xyz;
    vs_TEXCOORD7.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_8.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_8.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD7;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
uint u_xlatu7;
bool u_xlatb7;
mediump float u_xlat16_8;
int u_xlati13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat19;
uint u_xlatu19;
mediump float u_xlat16_20;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlatb1 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb7 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1 = u_xlatb7 || u_xlatb1;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_8 = u_xlat1.x * u_xlat1.x;
    u_xlat16_14 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_8 * u_xlat16_14 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_20) + vs_TEXCOORD8.xyz;
    u_xlat16_20 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_20));
    u_xlat16_3.xyz = u_xlat16_2.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati13 = int(u_xlatu_loop_1 & 3u);
        u_xlatu19 = u_xlatu_loop_1 >> 2u;
        u_xlat16_20 = dot(unity_LightIndices[int(u_xlatu19)], ImmCB_0[u_xlati13]);
        u_xlati13 = int(u_xlat16_20);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati13].www + _AdditionalLightsPosition[u_xlati13].xyz;
        u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat19);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat19);
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuation[u_xlati13].x + _AdditionalLightsAttenuation[u_xlati13].y;
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat19 = u_xlat19 * u_xlat22;
        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati13].xyz, u_xlat4.xyz);
        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati13].z + _AdditionalLightsAttenuation[u_xlati13].w;
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
        u_xlat19 = u_xlat19 * u_xlat16_20;
        u_xlat16_5.xyz = vec3(u_xlat19) * _AdditionalLightsColor[u_xlati13].xyz;
        u_xlat16_20 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb22 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb22) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb22) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb22) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat5.w = u_xlat7.x * 0.5;
    u_xlat5.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat5.zz + u_xlat5.xw;
    u_xlat7.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat7.xyz;
    vs_TEXCOORD7.xyz = u_xlat7.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat8;
uint u_xlatu8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
int u_xlati15;
bool u_xlatb15;
mediump float u_xlat16_17;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_24;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8;
        u_xlat8 = u_xlat8 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8 = _ZBufferParams.z * u_xlat8 + _ZBufferParams.w;
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat8 = u_xlat8 + (-_CameraFadeParams.x);
    u_xlat8 = u_xlat8 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat8 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_3.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb8 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_3.x = (u_xlatb1.x) ? 1.0 : u_xlat16_3.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_17 = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = u_xlat16_10 * u_xlat16_17 + u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;
    u_xlat16_24 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_24) + vs_TEXCOORD8.xyz;
    u_xlat16_24 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_24));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu22 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_24 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_24);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
        u_xlat22 = u_xlat22 * u_xlat16_24;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_24 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb19 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb19) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb19) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb19) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat6.xyz;
    vs_TEXCOORD7.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
uint u_xlatu8;
bool u_xlatb8;
mediump float u_xlat16_10;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_23;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_23 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_23 = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_23;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb8 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1 = u_xlatb8 || u_xlatb1;
    u_xlat16_23 = (u_xlatb1) ? 1.0 : u_xlat16_23;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_10 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = u_xlat16_3.x * u_xlat16_10 + u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 * unity_LightData.z;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * _MainLightColor.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_23) + vs_TEXCOORD8.xyz;
    u_xlat16_23 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_23));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu22 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_23 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_23);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
        u_xlat22 = u_xlat22 * u_xlat16_23;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb22 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb22) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb22) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb22) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat5.w = u_xlat7.x * 0.5;
    u_xlat5.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat5.zz + u_xlat5.xw;
    u_xlat7.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat7.xyz;
    vs_TEXCOORD7.xyz = u_xlat7.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat7;
uint u_xlatu7;
bool u_xlatb7;
mediump vec3 u_xlat16_8;
int u_xlati13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat19;
uint u_xlatu19;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat7 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat7;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat7;
        u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat7) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat7 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat7 = _ZBufferParams.z * u_xlat7 + _ZBufferParams.w;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat7 = u_xlat7 + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat7 * u_xlat1.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_8.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_8.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb7 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb7 || u_xlatb1.x;
    u_xlat16_8.x = (u_xlatb1.x) ? 1.0 : u_xlat16_8.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat1.x * u_xlat1.x;
    u_xlat16_20 = (-u_xlat16_8.x) + 1.0;
    u_xlat16_8.x = u_xlat16_14 * u_xlat16_20 + u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * unity_LightData.z;
    u_xlat16_8.xyz = u_xlat16_8.xxx * _MainLightColor.xyz;
    u_xlat16_3.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_3.x));
    u_xlat16_3.xyz = u_xlat16_8.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati13 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu19 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_21 = dot(unity_LightIndices[int(u_xlatu19)], ImmCB_0[u_xlati13]);
        u_xlati13 = int(u_xlat16_21);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati13].www + _AdditionalLightsPosition[u_xlati13].xyz;
        u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat19);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat19);
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuation[u_xlati13].x + _AdditionalLightsAttenuation[u_xlati13].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
        u_xlat19 = u_xlat19 * u_xlat22;
        u_xlat16_21 = dot(_AdditionalLightsSpotDir[u_xlati13].xyz, u_xlat4.xyz);
        u_xlat16_21 = u_xlat16_21 * _AdditionalLightsAttenuation[u_xlati13].z + _AdditionalLightsAttenuation[u_xlati13].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
        u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
        u_xlat19 = u_xlat19 * u_xlat16_21;
        u_xlat16_5.xyz = vec3(u_xlat19) * _AdditionalLightsColor[u_xlati13].xyz;
        u_xlat16_21 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb19 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb19) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb19) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb19) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat6.xyz;
    vs_TEXCOORD7.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
uint u_xlatu7;
bool u_xlatb7;
mediump float u_xlat16_8;
int u_xlati13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat19;
uint u_xlatu19;
mediump float u_xlat16_20;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb7 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1 = u_xlatb7 || u_xlatb1;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat1.x * u_xlat1.x;
    u_xlat16_14 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_8 * u_xlat16_14 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_20) + vs_TEXCOORD8.xyz;
    u_xlat16_20 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_20));
    u_xlat16_3.xyz = u_xlat16_2.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati13 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu19 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_20 = dot(unity_LightIndices[int(u_xlatu19)], ImmCB_0[u_xlati13]);
        u_xlati13 = int(u_xlat16_20);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati13].www + _AdditionalLightsPosition[u_xlati13].xyz;
        u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat19);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat19);
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuation[u_xlati13].x + _AdditionalLightsAttenuation[u_xlati13].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
        u_xlat19 = u_xlat19 * u_xlat22;
        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati13].xyz, u_xlat4.xyz);
        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati13].z + _AdditionalLightsAttenuation[u_xlati13].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
        u_xlat19 = u_xlat19 * u_xlat16_20;
        u_xlat16_5.xyz = vec3(u_xlat19) * _AdditionalLightsColor[u_xlati13].xyz;
        u_xlat16_20 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb21 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat8;
uint u_xlatu8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
int u_xlati15;
bool u_xlatb15;
mediump float u_xlat16_17;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_24;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8;
        u_xlat8 = u_xlat8 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8 = _ZBufferParams.z * u_xlat8 + _ZBufferParams.w;
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat8 = u_xlat8 + (-_CameraFadeParams.x);
    u_xlat8 = u_xlat8 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat8 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_3.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb8 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb8 || u_xlatb1.x;
    u_xlat16_3.x = (u_xlatb1.x) ? 1.0 : u_xlat16_3.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_17 = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = u_xlat16_10 * u_xlat16_17 + u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;
    u_xlat16_24 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_24) + vs_TEXCOORD8.xyz;
    u_xlat16_24 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_24));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu22 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_24 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_24);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
        u_xlat22 = u_xlat22 * u_xlat16_24;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_24 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
uint u_xlatu8;
bool u_xlatb8;
mediump float u_xlat16_10;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_23;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_23 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_23 = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_23;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb8 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1 = u_xlatb8 || u_xlatb1;
    u_xlat16_23 = (u_xlatb1) ? 1.0 : u_xlat16_23;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_10 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = u_xlat16_3.x * u_xlat16_10 + u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 * unity_LightData.z;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * _MainLightColor.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_23) + vs_TEXCOORD8.xyz;
    u_xlat16_23 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_23));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu22 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_23 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_23);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
        u_xlat22 = u_xlat22 * u_xlat16_23;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb21 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat7;
uint u_xlatu7;
bool u_xlatb7;
mediump vec3 u_xlat16_8;
int u_xlati13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat19;
uint u_xlatu19;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat7 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat7;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat7;
        u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat7) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat7 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat7 = _ZBufferParams.z * u_xlat7 + _ZBufferParams.w;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat7 = u_xlat7 + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat7 * u_xlat1.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_8.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_8.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb7 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb7 || u_xlatb1.x;
    u_xlat16_8.x = (u_xlatb1.x) ? 1.0 : u_xlat16_8.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat1.x * u_xlat1.x;
    u_xlat16_20 = (-u_xlat16_8.x) + 1.0;
    u_xlat16_8.x = u_xlat16_14 * u_xlat16_20 + u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * unity_LightData.z;
    u_xlat16_8.xyz = u_xlat16_8.xxx * _MainLightColor.xyz;
    u_xlat16_3.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_3.x));
    u_xlat16_3.xyz = u_xlat16_8.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati13 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu19 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_21 = dot(unity_LightIndices[int(u_xlatu19)], ImmCB_0[u_xlati13]);
        u_xlati13 = int(u_xlat16_21);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati13].www + _AdditionalLightsPosition[u_xlati13].xyz;
        u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat19);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat19);
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuation[u_xlati13].x + _AdditionalLightsAttenuation[u_xlati13].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
        u_xlat19 = u_xlat19 * u_xlat22;
        u_xlat16_21 = dot(_AdditionalLightsSpotDir[u_xlati13].xyz, u_xlat4.xyz);
        u_xlat16_21 = u_xlat16_21 * _AdditionalLightsAttenuation[u_xlati13].z + _AdditionalLightsAttenuation[u_xlati13].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
        u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
        u_xlat19 = u_xlat19 * u_xlat16_21;
        u_xlat16_5.xyz = vec3(u_xlat19) * _AdditionalLightsColor[u_xlati13].xyz;
        u_xlat16_21 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
uint u_xlatu7;
bool u_xlatb7;
mediump float u_xlat16_8;
int u_xlati13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat19;
uint u_xlatu19;
mediump float u_xlat16_20;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb7 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1 = u_xlatb7 || u_xlatb1;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat1.x * u_xlat1.x;
    u_xlat16_14 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_8 * u_xlat16_14 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_20) + vs_TEXCOORD8.xyz;
    u_xlat16_20 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_20));
    u_xlat16_3.xyz = u_xlat16_2.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati13 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu19 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_20 = dot(unity_LightIndices[int(u_xlatu19)], ImmCB_0[u_xlati13]);
        u_xlati13 = int(u_xlat16_20);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati13].www + _AdditionalLightsPosition[u_xlati13].xyz;
        u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat19);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat19);
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuation[u_xlati13].x + _AdditionalLightsAttenuation[u_xlati13].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
        u_xlat19 = u_xlat19 * u_xlat22;
        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati13].xyz, u_xlat4.xyz);
        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati13].z + _AdditionalLightsAttenuation[u_xlati13].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
        u_xlat19 = u_xlat19 * u_xlat16_20;
        u_xlat16_5.xyz = vec3(u_xlat19) * _AdditionalLightsColor[u_xlati13].xyz;
        u_xlat16_20 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 7) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec4 vs_TEXCOORD7;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 8) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb32;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
    vs_TEXCOORD7.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb32 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb32) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb32) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb32) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat2.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec4 vs_TEXCOORD7;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_3.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_3.x;
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1.x = u_xlatb5 || u_xlatb1.x;
    u_xlat16_3.x = (u_xlatb1.x) ? 1.0 : u_xlat16_3.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_7 = u_xlat1.x * u_xlat1.x;
    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = u_xlat16_7 * u_xlat16_11 + u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_15) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat0.xyz + u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD7;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat1.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat1.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat2.xyz;
    vs_TEXCOORD7.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_8.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_8.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD7;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_9;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_5 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_5 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_5;
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb4 = vs_TEXCOORD7.z>=1.0;
    u_xlatb0 = u_xlatb4 || u_xlatb0;
    u_xlat16_5 = (u_xlatb0) ? 1.0 : u_xlat16_5;
    u_xlat16_9 = (-u_xlat16_5) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9 + u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_13 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    u_xlatb3 = _Surface==1.0;
    SV_Target0.w = (u_xlatb3) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 7) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec4 vs_TEXCOORD7;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 8) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb32;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
    vs_TEXCOORD7.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb32 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb32) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb32) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb32) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat2.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec4 vs_TEXCOORD7;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_10;
mediump float u_xlat16_14;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_6.x;
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
    u_xlatb1.x = u_xlatb5 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_14 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_10 * u_xlat16_14 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_3 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD7;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat1.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat1.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat2.xyz;
    vs_TEXCOORD7.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_8.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_8.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD7;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
bool u_xlatb2;
bool u_xlatb3;
mediump float u_xlat16_4;
mediump float u_xlat16_7;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_4 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_4 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_4;
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb3 = vs_TEXCOORD7.z>=1.0;
    u_xlatb0 = u_xlatb3 || u_xlatb0;
    u_xlat16_4 = (u_xlatb0) ? 1.0 : u_xlat16_4;
    u_xlat16_7 = (-u_xlat16_4) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + u_xlat16_4;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_10 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_10) + vs_TEXCOORD8.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlatb2 = _Surface==1.0;
    SV_Target0.w = (u_xlatb2) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb22 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb22) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb22) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb22) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat5.w = u_xlat7.x * 0.5;
    u_xlat5.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat5.zz + u_xlat5.xw;
    u_xlat7.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat7.xyz;
    vs_TEXCOORD7.xyz = u_xlat7.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_3.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb5 || u_xlatb1.x;
    u_xlat16_3.x = (u_xlatb1.x) ? 1.0 : u_xlat16_3.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_7 = u_xlat1.x * u_xlat1.x;
    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = u_xlat16_7 * u_xlat16_11 + u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_15) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat0.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb19 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb19) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb19) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb19) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat6.xyz;
    vs_TEXCOORD7.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_9;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_5 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_5 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb4 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb4 || u_xlatb0;
    u_xlat16_5 = (u_xlatb0) ? 1.0 : u_xlat16_5;
    u_xlat16_9 = (-u_xlat16_5) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9 + u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_13 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_Surface==1.0);
#else
    u_xlatb3 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb3) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb22 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb22) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb22) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb22) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat5.w = u_xlat7.x * 0.5;
    u_xlat5.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat5.zz + u_xlat5.xw;
    u_xlat7.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat7.xyz;
    vs_TEXCOORD7.xyz = u_xlat7.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_10;
mediump float u_xlat16_14;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb5 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_14 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_10 * u_xlat16_14 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_3 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb19 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb19) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb19) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb19) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat6.xyz;
    vs_TEXCOORD7.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
bool u_xlatb2;
bool u_xlatb3;
mediump float u_xlat16_4;
mediump float u_xlat16_7;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_4 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_4 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb3 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb3 || u_xlatb0;
    u_xlat16_4 = (u_xlatb0) ? 1.0 : u_xlat16_4;
    u_xlat16_7 = (-u_xlat16_4) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + u_xlat16_4;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_10 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_10) + vs_TEXCOORD8.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_Surface==1.0);
#else
    u_xlatb2 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb2) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb21 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_3.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb5 || u_xlatb1.x;
    u_xlat16_3.x = (u_xlatb1.x) ? 1.0 : u_xlat16_3.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_7 = u_xlat1.x * u_xlat1.x;
    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = u_xlat16_7 * u_xlat16_11 + u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_15) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat0.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_9;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_5 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_5 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb4 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb4 || u_xlatb0;
    u_xlat16_5 = (u_xlatb0) ? 1.0 : u_xlat16_5;
    u_xlat16_9 = (-u_xlat16_5) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9 + u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_13 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_Surface==1.0);
#else
    u_xlatb3 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb3) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb21 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_10;
mediump float u_xlat16_14;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb1.x = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb1.x = u_xlatb5 || u_xlatb1.x;
    u_xlat16_6.x = (u_xlatb1.x) ? 1.0 : u_xlat16_6.x;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat1.x * u_xlat1.x;
    u_xlat16_14 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_6.x = u_xlat16_10 * u_xlat16_14 + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _MainLightColor.xyz;
    u_xlat16_3 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
bool u_xlatb2;
bool u_xlatb3;
mediump float u_xlat16_4;
mediump float u_xlat16_7;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_4 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_4 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb3 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb3 || u_xlatb0;
    u_xlat16_4 = (u_xlatb0) ? 1.0 : u_xlat16_4;
    u_xlat16_7 = (-u_xlat16_4) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + u_xlat16_4;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_10 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_10) + vs_TEXCOORD8.xyz;
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_Surface==1.0);
#else
    u_xlatb2 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb2) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat8;
uint u_xlatu8;
mediump vec3 u_xlat16_9;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_24;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8;
        u_xlat8 = u_xlat8 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8 = _ZBufferParams.z * u_xlat8 + _ZBufferParams.w;
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat8 = u_xlat8 + (-_CameraFadeParams.x);
    u_xlat8 = u_xlat8 * _CameraFadeParams.y;
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat16_2 = u_xlat8 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_24 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_24) + vs_TEXCOORD8.xyz;
    u_xlat16_24 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_24));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(u_xlatu_loop_1 & 3u);
        u_xlatu22 = u_xlatu_loop_1 >> 2u;
        u_xlat16_24 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_24);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
        u_xlat22 = u_xlat22 * u_xlat16_24;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_24 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 5) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
uint u_xlatu8;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_23;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_23 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_23) + vs_TEXCOORD8.xyz;
    u_xlat16_23 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_23));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(u_xlatu_loop_1 & 3u);
        u_xlatu22 = u_xlatu_loop_1 >> 2u;
        u_xlat16_23 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_23);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
        u_xlat22 = u_xlat22 * u_xlat16_23;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat7;
uint u_xlatu7;
mediump vec3 u_xlat16_8;
int u_xlati13;
bool u_xlatb13;
float u_xlat19;
uint u_xlatu19;
mediump float u_xlat16_21;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat7 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat7;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat7;
        u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat7) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat7 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat7 = _ZBufferParams.z * u_xlat7 + _ZBufferParams.w;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat7 = u_xlat7 + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat16_2 = u_xlat7 * u_xlat1.x;
    u_xlat16_8.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_3.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_3.x));
    u_xlat16_3.xyz = u_xlat16_8.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati13 = int(u_xlatu_loop_1 & 3u);
        u_xlatu19 = u_xlatu_loop_1 >> 2u;
        u_xlat16_21 = dot(unity_LightIndices[int(u_xlatu19)], ImmCB_0[u_xlati13]);
        u_xlati13 = int(u_xlat16_21);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati13].www + _AdditionalLightsPosition[u_xlati13].xyz;
        u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat19);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat19);
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuation[u_xlati13].x + _AdditionalLightsAttenuation[u_xlati13].y;
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat19 = u_xlat19 * u_xlat22;
        u_xlat16_21 = dot(_AdditionalLightsSpotDir[u_xlati13].xyz, u_xlat4.xyz);
        u_xlat16_21 = u_xlat16_21 * _AdditionalLightsAttenuation[u_xlati13].z + _AdditionalLightsAttenuation[u_xlati13].w;
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
        u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
        u_xlat19 = u_xlat19 * u_xlat16_21;
        u_xlat16_5.xyz = vec3(u_xlat19) * _AdditionalLightsColor[u_xlati13].xyz;
        u_xlat16_21 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 5) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec3 u_xlat16_1;
uint u_xlatu2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
uint u_xlatu8;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_19;
float u_xlat20;
uint u_xlatu20;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + vs_TEXCOORD8.xyz;
    u_xlat16_19 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu2 =  uint(int(u_xlat16_19));
    u_xlat16_3.xyz = u_xlat16_1.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu2 ; u_xlatu_loop_1++)
    {
        u_xlati14 = int(u_xlatu_loop_1 & 3u);
        u_xlatu20 = u_xlatu_loop_1 >> 2u;
        u_xlat16_19 = dot(unity_LightIndices[int(u_xlatu20)], ImmCB_0[u_xlati14]);
        u_xlati14 = int(u_xlat16_19);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati14].www + _AdditionalLightsPosition[u_xlati14].xyz;
        u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat20 = max(u_xlat20, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat20);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat20);
        u_xlat20 = u_xlat20 * _AdditionalLightsAttenuation[u_xlati14].x + _AdditionalLightsAttenuation[u_xlati14].y;
        u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
        u_xlat20 = u_xlat20 * u_xlat22;
        u_xlat16_19 = dot(_AdditionalLightsSpotDir[u_xlati14].xyz, u_xlat4.xyz);
        u_xlat16_19 = u_xlat16_19 * _AdditionalLightsAttenuation[u_xlati14].z + _AdditionalLightsAttenuation[u_xlati14].w;
        u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
        u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
        u_xlat20 = u_xlat16_19 * u_xlat20;
        u_xlat16_5.xyz = vec3(u_xlat20) * _AdditionalLightsColor[u_xlati14].xyz;
        u_xlat16_19 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
        u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
    u_xlatb2 = _Surface==1.0;
    SV_Target0.w = (u_xlatb2) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat8;
uint u_xlatu8;
mediump vec3 u_xlat16_9;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_24;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8;
        u_xlat8 = u_xlat8 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8 = _ZBufferParams.z * u_xlat8 + _ZBufferParams.w;
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat8 = u_xlat8 + (-_CameraFadeParams.x);
    u_xlat8 = u_xlat8 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat8 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_24 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_24) + vs_TEXCOORD8.xyz;
    u_xlat16_24 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_24));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu22 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_24 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_24);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
        u_xlat22 = u_xlat22 * u_xlat16_24;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_24 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
uint u_xlatu8;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_23;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_23 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_23) + vs_TEXCOORD8.xyz;
    u_xlat16_23 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_23));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu22 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_23 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_23);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
        u_xlat22 = u_xlat22 * u_xlat16_23;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat7;
uint u_xlatu7;
mediump vec3 u_xlat16_8;
int u_xlati13;
bool u_xlatb13;
float u_xlat19;
uint u_xlatu19;
mediump float u_xlat16_21;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat7 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat7;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat7;
        u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat7) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat7 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat7 = _ZBufferParams.z * u_xlat7 + _ZBufferParams.w;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat7 = u_xlat7 + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat7 * u_xlat1.x;
    u_xlat16_8.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_3.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_3.x));
    u_xlat16_3.xyz = u_xlat16_8.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati13 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu19 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_21 = dot(unity_LightIndices[int(u_xlatu19)], ImmCB_0[u_xlati13]);
        u_xlati13 = int(u_xlat16_21);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati13].www + _AdditionalLightsPosition[u_xlati13].xyz;
        u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat19);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat19);
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuation[u_xlati13].x + _AdditionalLightsAttenuation[u_xlati13].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
        u_xlat19 = u_xlat19 * u_xlat22;
        u_xlat16_21 = dot(_AdditionalLightsSpotDir[u_xlati13].xyz, u_xlat4.xyz);
        u_xlat16_21 = u_xlat16_21 * _AdditionalLightsAttenuation[u_xlati13].z + _AdditionalLightsAttenuation[u_xlati13].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
        u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
        u_xlat19 = u_xlat19 * u_xlat16_21;
        u_xlat16_5.xyz = vec3(u_xlat19) * _AdditionalLightsColor[u_xlati13].xyz;
        u_xlat16_21 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec3 u_xlat16_1;
uint u_xlatu2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
uint u_xlatu8;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_19;
float u_xlat20;
uint u_xlatu20;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + vs_TEXCOORD8.xyz;
    u_xlat16_19 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu2 =  uint(int(u_xlat16_19));
    u_xlat16_3.xyz = u_xlat16_1.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu2 ; u_xlatu_loop_1++)
    {
        u_xlati14 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu20 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_19 = dot(unity_LightIndices[int(u_xlatu20)], ImmCB_0[u_xlati14]);
        u_xlati14 = int(u_xlat16_19);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati14].www + _AdditionalLightsPosition[u_xlati14].xyz;
        u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat20 = max(u_xlat20, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat20);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat20);
        u_xlat20 = u_xlat20 * _AdditionalLightsAttenuation[u_xlati14].x + _AdditionalLightsAttenuation[u_xlati14].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
        u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat20 * u_xlat22;
        u_xlat16_19 = dot(_AdditionalLightsSpotDir[u_xlati14].xyz, u_xlat4.xyz);
        u_xlat16_19 = u_xlat16_19 * _AdditionalLightsAttenuation[u_xlati14].z + _AdditionalLightsAttenuation[u_xlati14].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
        u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
        u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
        u_xlat20 = u_xlat16_19 * u_xlat20;
        u_xlat16_5.xyz = vec3(u_xlat20) * _AdditionalLightsColor[u_xlati14].xyz;
        u_xlat16_19 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
        u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_Surface==1.0);
#else
    u_xlatb2 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb2) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat8;
uint u_xlatu8;
mediump vec3 u_xlat16_9;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_24;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat8 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat8;
        u_xlat8 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat8;
        u_xlat8 = u_xlat8 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat8) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat8 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat8 = _ZBufferParams.z * u_xlat8 + _ZBufferParams.w;
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat8 = u_xlat8 + (-_CameraFadeParams.x);
    u_xlat8 = u_xlat8 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat8 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_24 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_24) + vs_TEXCOORD8.xyz;
    u_xlat16_24 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_24));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu22 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_24 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_24);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
        u_xlat22 = u_xlat22 * u_xlat16_24;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_24 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec3 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
uint u_xlatu8;
int u_xlati15;
bool u_xlatb15;
float u_xlat22;
uint u_xlatu22;
mediump float u_xlat16_23;
float u_xlat26;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_23 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_23) + vs_TEXCOORD8.xyz;
    u_xlat16_23 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_23));
    u_xlat16_4.xyz = u_xlat16_3.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati15 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu22 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_23 = dot(unity_LightIndices[int(u_xlatu22)], ImmCB_0[u_xlati15]);
        u_xlati15 = int(u_xlat16_23);
        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati15].www + _AdditionalLightsPosition[u_xlati15].xyz;
        u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat22 = max(u_xlat22, 6.10351562e-05);
        u_xlat26 = inversesqrt(u_xlat22);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
        u_xlat26 = float(1.0) / float(u_xlat22);
        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati15].x + _AdditionalLightsAttenuation[u_xlati15].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
        u_xlat22 = u_xlat22 * u_xlat26;
        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati15].xyz, u_xlat5.xyz);
        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati15].z + _AdditionalLightsAttenuation[u_xlati15].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
        u_xlat22 = u_xlat22 * u_xlat16_23;
        u_xlat16_6.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati15].xyz;
        u_xlat16_23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
#else
        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
#endif
        u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;
    }
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat0.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
uint u_xlatu1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat7;
uint u_xlatu7;
mediump vec3 u_xlat16_8;
int u_xlati13;
bool u_xlatb13;
float u_xlat19;
uint u_xlatu19;
mediump float u_xlat16_21;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat7 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat7;
        u_xlat7 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat7;
        u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat7) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat7 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat7 = _ZBufferParams.z * u_xlat7 + _ZBufferParams.w;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat7 = u_xlat7 + (-_CameraFadeParams.x);
    u_xlat7 = u_xlat7 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat7 * u_xlat1.x;
    u_xlat16_8.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_3.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + vs_TEXCOORD8.xyz;
    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat16_3.x));
    u_xlat16_3.xyz = u_xlat16_8.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu1 ; u_xlatu_loop_1++)
    {
        u_xlati13 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu19 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_21 = dot(unity_LightIndices[int(u_xlatu19)], ImmCB_0[u_xlati13]);
        u_xlati13 = int(u_xlat16_21);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati13].www + _AdditionalLightsPosition[u_xlati13].xyz;
        u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat19 = max(u_xlat19, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat19);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat19);
        u_xlat19 = u_xlat19 * _AdditionalLightsAttenuation[u_xlati13].x + _AdditionalLightsAttenuation[u_xlati13].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
        u_xlat19 = u_xlat19 * u_xlat22;
        u_xlat16_21 = dot(_AdditionalLightsSpotDir[u_xlati13].xyz, u_xlat4.xyz);
        u_xlat16_21 = u_xlat16_21 * _AdditionalLightsAttenuation[u_xlati13].z + _AdditionalLightsAttenuation[u_xlati13].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
        u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
        u_xlat19 = u_xlat19 * u_xlat16_21;
        u_xlat16_5.xyz = vec3(u_xlat19) * _AdditionalLightsColor[u_xlati13].xyz;
        u_xlat16_21 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
        u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec3 u_xlat16_1;
uint u_xlatu2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
uint u_xlatu8;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_19;
float u_xlat20;
uint u_xlatu20;
float u_xlat22;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_1.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + vs_TEXCOORD8.xyz;
    u_xlat16_19 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu2 =  uint(int(u_xlat16_19));
    u_xlat16_3.xyz = u_xlat16_1.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu2 ; u_xlatu_loop_1++)
    {
        u_xlati14 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu20 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_19 = dot(unity_LightIndices[int(u_xlatu20)], ImmCB_0[u_xlati14]);
        u_xlati14 = int(u_xlat16_19);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati14].www + _AdditionalLightsPosition[u_xlati14].xyz;
        u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat20 = max(u_xlat20, 6.10351562e-05);
        u_xlat22 = inversesqrt(u_xlat20);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = float(1.0) / float(u_xlat20);
        u_xlat20 = u_xlat20 * _AdditionalLightsAttenuation[u_xlati14].x + _AdditionalLightsAttenuation[u_xlati14].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
        u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat20 * u_xlat22;
        u_xlat16_19 = dot(_AdditionalLightsSpotDir[u_xlati14].xyz, u_xlat4.xyz);
        u_xlat16_19 = u_xlat16_19 * _AdditionalLightsAttenuation[u_xlati14].z + _AdditionalLightsAttenuation[u_xlati14].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
        u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
        u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
        u_xlat20 = u_xlat16_19 * u_xlat20;
        u_xlat16_5.xyz = vec3(u_xlat20) * _AdditionalLightsColor[u_xlati14].xyz;
        u_xlat16_19 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
        u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
        u_xlat16_3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    }
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_Surface==1.0);
#else
    u_xlatb2 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb2) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_15) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat0.xyz + u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 4) out highp vec4 vs_TEXCOORD1;
layout(location = 2) out highp vec3 vs_TEXCOORD2;
layout(location = 5) out highp vec3 vs_TEXCOORD3;
layout(location = 3) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec3 vs_TEXCOORD2;
layout(location = 3) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump float u_xlat16_12;
void main()
{
    u_xlat16_0.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_12 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_12) + vs_TEXCOORD8.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlatb3 = _Surface==1.0;
    SV_Target0.w = (u_xlatb3) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 6) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec4 vs_TEXCOORD6;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec4 vs_TEXCOORD6;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
float u_xlat5;
mediump vec3 u_xlat16_6;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_6.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_3 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
    u_xlatb1.x = _Surface==1.0;
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 4) out highp vec4 vs_TEXCOORD1;
layout(location = 2) out highp vec3 vs_TEXCOORD2;
layout(location = 5) out highp vec3 vs_TEXCOORD3;
layout(location = 3) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump vec4 _SpecColor;
	mediump float _Cutoff;
	mediump float _Smoothness;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec3 vs_TEXCOORD2;
layout(location = 3) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb2;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_TEXCOORD8.xyz;
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlatb2 = _Surface==1.0;
    SV_Target0.w = (u_xlatb2) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_15) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat0.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump float u_xlat16_12;
void main()
{
    u_xlat16_0.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_12 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_12) + vs_TEXCOORD8.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_Surface==1.0);
#else
    u_xlatb3 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb3) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
float u_xlat5;
mediump vec3 u_xlat16_6;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_6.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_3 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb2;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_TEXCOORD8.xyz;
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_Surface==1.0);
#else
    u_xlatb2 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb2) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_3.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_15) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat0.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump float u_xlat16_12;
void main()
{
    u_xlat16_0.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_12 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_12) + vs_TEXCOORD8.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _EmissionColor.xyz;
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(_Surface==1.0);
#else
    u_xlatb3 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb3) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(1) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
bvec2 u_xlatb1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
float u_xlat5;
mediump vec3 u_xlat16_6;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb1.x){
        u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
        u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat5 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat5;
        u_xlat5 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat5;
        u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat1.x = u_xlat1.x + (-_SoftParticleFadeParams.x);
        u_xlat1.x = -abs(u_xlat5) + u_xlat1.x;
        u_xlat1.x = u_xlat1.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    } else {
        u_xlat1.x = 1.0;
    }
    u_xlat1.x = u_xlat0.w * u_xlat1.x;
    u_xlat5 = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat5 = _ZBufferParams.z * u_xlat5 + _ZBufferParams.w;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat5 = u_xlat5 + (-_CameraFadeParams.x);
    u_xlat5 = u_xlat5 * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat5 * u_xlat1.x;
    u_xlat16_6.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_3 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3) + vs_TEXCOORD8.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_Surface==1.0);
#else
    u_xlatb1.x = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_2 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump vec4 _SpecColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb2;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.xyz = _MainLightColor.xyz * unity_LightData.zzz;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_TEXCOORD8.xyz;
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_Surface==1.0);
#else
    u_xlatb2 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb2) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
}
}
 Pass {
  Name "Universal2D"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "Universal2D" "PerformanceChecks" = "False" "PreviewType" = "Plane" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" "UniversalMaterialType" = "SimpleLit" }
  Blend Zero Zero, Zero Zero
  ZWrite Off
  Cull Off
  GpuProgramID 319291
Program "vp" {
SubProgram "gles " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BaseMap_ST;
attribute highp vec4 in_POSITION0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _BaseColor;
uniform lowp sampler2D _BaseMap;
varying highp vec2 vs_TEXCOORD0;
#define SV_Target0 gl_FragData[0]
lowp vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat10_0 * _BaseColor;
    return;
}

#endif
"
}
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat16_0 * _BaseColor;
    return;
}

#endif
"
}
}
}
}
Fallback "Universal Render Pipeline/Particles/Unlit"
CustomEditor "UnityEditor.Rendering.Universal.ShaderGUI.ParticlesSimpleLitShader"
}