//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Universal Render Pipeline/Particles/Lit" {
Properties {
_BaseMap ("Base Map", 2D) = "white" { }
_BaseColor ("Base Color", Color) = (1,1,1,1)
_Cutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
_MetallicGlossMap ("Metallic Map", 2D) = "white" { }
_Metallic ("Metallic", Range(0, 1)) = 0
_Smoothness ("Smoothness", Range(0, 1)) = 0.5
_BumpScale ("Scale", Float) = 1
_BumpMap ("Normal Map", 2D) = "bump" { }
_EmissionColor ("Color", Color) = (0,0,0,1)
_EmissionMap ("Emission", 2D) = "white" { }
_ReceiveShadows ("Receive Shadows", Float) = 1
_SoftParticlesNearFadeDistance ("Soft Particles Near Fade", Float) = 0
_SoftParticlesFarFadeDistance ("Soft Particles Far Fade", Float) = 1
_CameraNearFadeDistance ("Camera Near Fade", Float) = 1
_CameraFarFadeDistance ("Camera Far Fade", Float) = 2
_DistortionBlend ("Distortion Blend", Float) = 0.5
_DistortionStrength ("Distortion Strength", Float) = 1
_Surface ("__surface", Float) = 0
_Blend ("__mode", Float) = 0
_AlphaClip ("__clip", Float) = 0
_BlendOp ("__blendop", Float) = 0
_SrcBlend ("__src", Float) = 1
_DstBlend ("__dst", Float) = 0
_ZWrite ("__zw", Float) = 1
_Cull ("__cull", Float) = 2
_ColorMode ("_ColorMode", Float) = 0
_BaseColorAddSubDiff ("_ColorMode", Vector) = (0,0,0,0)
[ToggleOff] _FlipbookBlending ("__flipbookblending", Float) = 0
_SoftParticlesEnabled ("__softparticlesenabled", Float) = 0
_CameraFadingEnabled ("__camerafadingenabled", Float) = 0
_SoftParticleFadeParams ("__softparticlefadeparams", Vector) = (0,0,0,0)
_CameraFadeParams ("__camerafadeparams", Vector) = (0,0,0,0)
_DistortionEnabled ("__distortionenabled", Float) = 0
_DistortionStrengthScaled ("Distortion Strength Scaled", Float) = 0.1
_QueueOffset ("Queue offset", Float) = 0
_FlipbookMode ("flipbook", Float) = 0
_Glossiness ("gloss", Float) = 0
_Mode ("mode", Float) = 0
_Color ("color", Color) = (1,1,1,1)
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "PerformanceChecks" = "False" "PreviewType" = "Plane" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" "UniversalMaterialType" = "Lit" }
 Pass {
  Name "ForwardLit"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "UniversalForward" "PerformanceChecks" = "False" "PreviewType" = "Plane" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" "UniversalMaterialType" = "Lit" }
  Blend Zero Zero, Zero Zero
  ZWrite Off
  Cull Off
  GpuProgramID 18087
Program "vp" {
SubProgram "gles " {
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb15 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat23;
void main()
{
    u_xlat16_0.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_0.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_18 = (-_Smoothness) + 1.0;
    u_xlat16_1.x = (-u_xlat16_18) * 0.699999988 + 1.70000005;
    u_xlat16_1.x = u_xlat16_18 * u_xlat16_1.x;
    u_xlat16_0.w = u_xlat16_18 * u_xlat16_18;
    u_xlat16_1.x = u_xlat16_1.x * 6.0;
    u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_0.xyz, u_xlat16_1.x);
    u_xlat16_0.x = u_xlat10_1.w + -1.0;
    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
    u_xlat16_0.xw = max(u_xlat16_0.xw, vec2(0.0, 0.0078125));
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.y;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_8 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_14 = (-u_xlat16_8) + _Smoothness;
    u_xlat16_14 = u_xlat16_14 + 1.0;
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
    u_xlat10_1 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _BaseColor;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = vec3(u_xlat16_14) + (-u_xlat16_3.xyz);
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_21 = u_xlat16_0.w * u_xlat16_0.w + 1.0;
    u_xlat16_21 = float(1.0) / u_xlat16_21;
    u_xlat5.xyz = u_xlat16_2.xzw * vec3(u_xlat16_21);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat5.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_20 = u_xlat16_20 * unity_LightData.z;
    u_xlat16_4.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_0.w * u_xlat16_0.w + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_0.w * 4.0 + 2.0;
    u_xlat16_18 = u_xlat16_0.w * u_xlat16_0.w;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_18 / u_xlat5.x;
    u_xlat16_18 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_18) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlatb5 = _Surface==1.0;
    SV_Target0.w = (u_xlatb5) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
vec4 u_xlat4;
uint u_xlatu4;
bvec4 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat19;
mediump float u_xlat16_23;
float u_xlat27;
mediump float u_xlat16_27;
uint u_xlatu27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat40;
int u_xlati40;
uint u_xlatu40;
bool u_xlatb40;
float u_xlat41;
int u_xlati41;
bool u_xlatb41;
mediump float u_xlat16_42;
float u_xlat43;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat15 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat15 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat15;
        u_xlat15 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat15;
        u_xlat15 = u_xlat15 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat15) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat40 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat40 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);
    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);
    u_xlat16_16.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_16.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_16.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_16.xyz = u_xlat16_16.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_16.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_16.x = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_16.x = (-u_xlat16_16.x) + 4.0;
    u_xlatu40 = uint(u_xlat16_16.x);
    u_xlati40 = int(u_xlatu40) << 2;
    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati40 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati40].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati40 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati40 + 3)].xyz;
    u_xlat16_16.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_29 = (-u_xlat16_16.x) + _Smoothness;
    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_16.xxx;
    u_xlat16_9.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_16.x = (-_Smoothness) + 1.0;
    u_xlat16_42 = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_42 = max(u_xlat16_42, 0.0078125);
    u_xlat16_47 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_29 = u_xlat16_29 + 1.0;
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
    u_xlat1.x = u_xlat16_42 * 4.0 + 2.0;
    u_xlat14 = u_xlat16_42 * u_xlat16_42 + -1.0;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_48 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_48 = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_48;
    u_xlatb27 = 0.0>=u_xlat4.z;
    u_xlatb40 = u_xlat4.z>=1.0;
    u_xlatb27 = u_xlatb40 || u_xlatb27;
    u_xlat16_48 = (u_xlatb27) ? 1.0 : u_xlat16_48;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_23 = (-u_xlat16_48) + 1.0;
    u_xlat16_48 = u_xlat16_10.x * u_xlat16_23 + u_xlat16_48;
    u_xlat16_10.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_10.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_49 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
    u_xlat16_49 = (-u_xlat16_49) + 1.0;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_11.x = (-u_xlat16_16.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_11.x;
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_16.x);
    u_xlat16_16.x = u_xlat16_0.w + -1.0;
    u_xlat16_16.x = unity_SpecCube0_HDR.w * u_xlat16_16.x + 1.0;
    u_xlat16_16.x = max(u_xlat16_16.x, 0.0);
    u_xlat16_16.x = log2(u_xlat16_16.x);
    u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube0_HDR.y;
    u_xlat16_16.x = exp2(u_xlat16_16.x);
    u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube0_HDR.x;
    u_xlat16_10.xyz = u_xlat16_0.xyz * u_xlat16_16.xxx;
    u_xlat16_16.x = u_xlat16_42 * u_xlat16_42 + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_11.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_29);
    u_xlat16_11.xyz = vec3(u_xlat16_49) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_16.xxx * u_xlat16_11.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz * u_xlat16_10.xyz;
    u_xlat16_16.xyz = vs_TEXCOORD8.xyz * u_xlat16_8.xyz + u_xlat16_16.xyz;
    u_xlat16_48 = u_xlat16_48 * unity_LightData.z;
    u_xlat16_10.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
    u_xlat16_48 = u_xlat16_48 * u_xlat16_10.x;
    u_xlat16_10.xyz = vec3(u_xlat16_48) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat16_48 = inversesqrt(u_xlat27);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat16_48);
    u_xlat27 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat40 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat27 * u_xlat14 + 1.00001001;
    u_xlat16_48 = u_xlat40 * u_xlat40;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat40 = max(u_xlat16_48, 0.100000001);
    u_xlat27 = u_xlat40 * u_xlat27;
    u_xlat27 = u_xlat1.x * u_xlat27;
    u_xlat27 = u_xlat16_47 / u_xlat27;
    u_xlat16_48 = u_xlat27 + -6.10351562e-05;
    u_xlat16_48 = max(u_xlat16_48, 0.0);
    u_xlat16_48 = min(u_xlat16_48, 100.0);
    u_xlat16_11.xyz = u_xlat16_9.xyz * vec3(u_xlat16_48) + u_xlat16_8.xyz;
    u_xlat16_16.xyz = u_xlat16_11.xyz * u_xlat16_10.xyz + u_xlat16_16.xyz;
    u_xlat16_48 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu27 =  uint(int(u_xlat16_48));
    u_xlat16_10.xyz = u_xlat16_16.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu27 ; u_xlatu_loop_1++)
    {
        u_xlati41 = int(u_xlatu_loop_1 & 3u);
        u_xlatu4 = u_xlatu_loop_1 >> 2u;
        u_xlat16_48 = dot(unity_LightIndices[int(u_xlatu4)], ImmCB_0[u_xlati41]);
        u_xlati41 = int(u_xlat16_48);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati41].www + _AdditionalLightsPosition[u_xlati41].xyz;
        u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat43 = max(u_xlat43, 6.10351562e-05);
        u_xlat6.x = inversesqrt(u_xlat43);
        u_xlat19.xyz = u_xlat4.xyz * u_xlat6.xxx;
        u_xlat7.x = float(1.0) / float(u_xlat43);
        u_xlat43 = u_xlat43 * _AdditionalLightsAttenuation[u_xlati41].x + _AdditionalLightsAttenuation[u_xlati41].y;
        u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
        u_xlat43 = u_xlat43 * u_xlat7.x;
        u_xlat16_48 = dot(_AdditionalLightsSpotDir[u_xlati41].xyz, u_xlat19.xyz);
        u_xlat16_48 = u_xlat16_48 * _AdditionalLightsAttenuation[u_xlati41].z + _AdditionalLightsAttenuation[u_xlati41].w;
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
        u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
        u_xlat43 = u_xlat43 * u_xlat16_48;
        u_xlat16_48 = dot(vs_TEXCOORD2.xyz, u_xlat19.xyz);
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
        u_xlat16_48 = u_xlat43 * u_xlat16_48;
        u_xlat16_11.xyz = vec3(u_xlat16_48) * _AdditionalLightsColor[u_xlati41].xyz;
        u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xxx + vs_TEXCOORD3.xyz;
        u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat41 = max(u_xlat41, 1.17549435e-38);
        u_xlat16_48 = inversesqrt(u_xlat41);
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat16_48);
        u_xlat41 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
        u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
        u_xlat4.x = dot(u_xlat19.xyz, u_xlat4.xyz);
        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
        u_xlat41 = u_xlat41 * u_xlat41;
        u_xlat41 = u_xlat41 * u_xlat14 + 1.00001001;
        u_xlat16_48 = u_xlat4.x * u_xlat4.x;
        u_xlat41 = u_xlat41 * u_xlat41;
        u_xlat4.x = max(u_xlat16_48, 0.100000001);
        u_xlat41 = u_xlat41 * u_xlat4.x;
        u_xlat41 = u_xlat1.x * u_xlat41;
        u_xlat41 = u_xlat16_47 / u_xlat41;
        u_xlat16_48 = u_xlat41 + -6.10351562e-05;
        u_xlat16_48 = max(u_xlat16_48, 0.0);
        u_xlat16_48 = min(u_xlat16_48, 100.0);
        u_xlat16_12.xyz = u_xlat16_9.xyz * vec3(u_xlat16_48) + u_xlat16_8.xyz;
        u_xlat16_10.xyz = u_xlat16_12.xyz * u_xlat16_11.xyz + u_xlat16_10.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_10.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat17;
mediump float u_xlat16_19;
float u_xlat25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture2D(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat10 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10;
        u_xlat10 = u_xlat10 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat10) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat25 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat25 * u_xlat2.x;
    u_xlat16_11.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_19 = (-u_xlat16_11.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_11.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.x = (-_Smoothness) + 1.0;
    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_27 = max(u_xlat16_27, 0.0078125);
    u_xlat16_28 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_19 = u_xlat16_19 + 1.0;
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat1.x = u_xlat16_27 * 4.0 + 2.0;
    u_xlat9 = u_xlat16_27 * u_xlat16_27 + -1.0;
    u_xlat16_29 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_29)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
    u_xlat16_29 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_30 = (-u_xlat16_11.x) * 0.699999988 + 1.70000005;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_30;
    u_xlat16_11.x = u_xlat16_11.x * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_11.x);
    u_xlat16_11.x = u_xlat10_0.w + -1.0;
    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = log2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.y;
    u_xlat16_11.x = exp2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_11.xxx;
    u_xlat16_11.x = u_xlat16_27 * u_xlat16_27 + 1.0;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_19);
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_11.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_11.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = max(u_xlat17, 1.17549435e-38);
    u_xlat16_29 = inversesqrt(u_xlat17);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_29);
    u_xlat17 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat17 * u_xlat9 + 1.00001001;
    u_xlat16_29 = u_xlat25 * u_xlat25;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat17 = max(u_xlat16_29, 0.100000001);
    u_xlat9 = u_xlat17 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat1.x = u_xlat16_28 / u_xlat1.x;
    u_xlat16_28 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
int u_xlati3;
bvec4 u_xlatb3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec4 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat16;
uint u_xlatu16;
float u_xlat18;
mediump float u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat27;
mediump float u_xlat16_27;
uint u_xlatu27;
bool u_xlatb27;
float u_xlat31;
mediump float u_xlat16_35;
float u_xlat41;
int u_xlati41;
uint u_xlatu41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlat16_4.w = (u_xlatb3.w) ? float(1.0) : float(0.0);
    u_xlat16_7.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_7.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_7.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_7.xyz = u_xlat16_4.yzw + u_xlat16_7.xyz;
    u_xlat16_4.yzw = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.x = dot(u_xlat16_4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_7.x = (-u_xlat16_7.x) + 4.0;
    u_xlatu41 = uint(u_xlat16_7.x);
    u_xlati41 = int(u_xlatu41) << 2;
    u_xlat3.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati41 + 1)].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati41].xyz * vs_TEXCOORD1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati41 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati41 + 3)].xyz;
    u_xlat16_7.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_20 = (-u_xlat16_7.x) + _Smoothness;
    u_xlat16_7.xzw = u_xlat1.xyz * u_xlat16_7.xxx;
    u_xlat16_8.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_47 = (-_Smoothness) + 1.0;
    u_xlat16_9.x = u_xlat16_47 * u_xlat16_47;
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0078125);
    u_xlat16_20 = u_xlat16_20 + 1.0;
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat1.x = u_xlat16_9.x * 4.0 + 2.0;
    u_xlat14 = u_xlat16_9.x * u_xlat16_9.x + -1.0;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_35 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_35 = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_35;
    u_xlatb27 = 0.0>=u_xlat3.z;
    u_xlatb41 = u_xlat3.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb41;
    u_xlat16_35 = (u_xlatb27) ? 1.0 : u_xlat16_35;
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat16_48 = u_xlat27 * u_xlat27;
    u_xlat16_10.x = (-u_xlat16_35) + 1.0;
    u_xlat16_35 = u_xlat16_48 * u_xlat16_10.x + u_xlat16_35;
    u_xlat16_48 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_48 = u_xlat16_48 + u_xlat16_48;
    u_xlat16_10.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_48)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_48 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
    u_xlat16_9.w = (-u_xlat16_48) + 1.0;
    u_xlat16_22.xz = u_xlat16_9.xw * u_xlat16_9.xw;
    u_xlat16_48 = u_xlat16_22.z * u_xlat16_22.z;
    u_xlat16_49 = (-u_xlat16_47) * 0.699999988 + 1.70000005;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_49;
    u_xlat16_47 = u_xlat16_47 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_47);
    u_xlat16_47 = u_xlat16_0.w + -1.0;
    u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
    u_xlat16_47 = max(u_xlat16_47, 0.0);
    u_xlat16_47 = log2(u_xlat16_47);
    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.y;
    u_xlat16_47 = exp2(u_xlat16_47);
    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.x;
    u_xlat16_10.xyz = u_xlat16_0.xyz * vec3(u_xlat16_47);
    u_xlat16_47 = u_xlat16_9.x * u_xlat16_9.x + 1.0;
    u_xlat16_47 = float(1.0) / u_xlat16_47;
    u_xlat16_11.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_20);
    u_xlat16_11.xyz = vec3(u_xlat16_48) * u_xlat16_11.xyz + u_xlat16_8.xyz;
    u_xlat3.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;
    u_xlat16_10.xyz = u_xlat3.xyz * u_xlat16_10.xyz;
    u_xlat16_10.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xzw + u_xlat16_10.xyz;
    u_xlat16_20 = u_xlat16_35 * unity_LightData.z;
    u_xlat16_47 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_47;
    u_xlat16_9.xzw = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat3.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat27);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_20);
    u_xlat27 = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat41 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat27 * u_xlat14 + 1.00001001;
    u_xlat16_20 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat41 = max(u_xlat16_20, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat27 = u_xlat1.x * u_xlat27;
    u_xlat27 = u_xlat16_22.x / u_xlat27;
    u_xlat16_20 = u_xlat27 + -6.10351562e-05;
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = min(u_xlat16_20, 100.0);
    u_xlat16_11.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_7.xzw;
    u_xlat16_9.xzw = u_xlat16_11.xyz * u_xlat16_9.xzw + u_xlat16_10.xyz;
    u_xlat16_20 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu27 =  uint(int(u_xlat16_20));
    u_xlat16_10.xyz = u_xlat16_9.xzw;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu27 ; u_xlatu_loop_1++)
    {
        u_xlati3 = int(u_xlatu_loop_1 & 3u);
        u_xlatu16 = u_xlatu_loop_1 >> 2u;
        u_xlat16_20 = dot(unity_LightIndices[int(u_xlatu16)], ImmCB_0[u_xlati3]);
        u_xlati3 = int(u_xlat16_20);
        u_xlat16.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;
        u_xlat5.x = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat5.x = max(u_xlat5.x, 6.10351562e-05);
        u_xlat18 = inversesqrt(u_xlat5.x);
        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat18);
        u_xlat31 = float(1.0) / float(u_xlat5.x);
        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;
        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
        u_xlat5.x = u_xlat5.x * u_xlat31;
        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat6.xyz);
        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
        u_xlat5.x = u_xlat5.x * u_xlat16_20;
        u_xlat16_20 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
        u_xlat16_20 = u_xlat5.x * u_xlat16_20;
        u_xlat16_11.xyz = vec3(u_xlat16_20) * _AdditionalLightsColor[u_xlati3].xyz;
        u_xlat3.xyz = u_xlat16.xyz * vec3(u_xlat18) + vs_TEXCOORD3.xyz;
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = max(u_xlat42, 1.17549435e-38);
        u_xlat16_20 = inversesqrt(u_xlat42);
        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_20);
        u_xlat42 = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
        u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);
        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
        u_xlat16.x = u_xlat42 * u_xlat42;
        u_xlat16.x = u_xlat16.x * u_xlat14 + 1.00001001;
        u_xlat16_20 = u_xlat3.x * u_xlat3.x;
        u_xlat3.x = u_xlat16.x * u_xlat16.x;
        u_xlat16.x = max(u_xlat16_20, 0.100000001);
        u_xlat3.x = u_xlat16.x * u_xlat3.x;
        u_xlat3.x = u_xlat1.x * u_xlat3.x;
        u_xlat3.x = u_xlat16_22.x / u_xlat3.x;
        u_xlat16_20 = u_xlat3.x + -6.10351562e-05;
        u_xlat16_20 = max(u_xlat16_20, 0.0);
        u_xlat16_20 = min(u_xlat16_20, 100.0);
        u_xlat16_12.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_7.xzw;
        u_xlat16_10.xyz = u_xlat16_12.xyz * u_xlat16_11.xyz + u_xlat16_10.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_10.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb15 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
bool u_xlatb5;
mediump float u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat23;
void main()
{
    u_xlat16_0.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_0.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_18 = (-_Smoothness) + 1.0;
    u_xlat16_1.x = (-u_xlat16_18) * 0.699999988 + 1.70000005;
    u_xlat16_1.x = u_xlat16_18 * u_xlat16_1.x;
    u_xlat16_0.w = u_xlat16_18 * u_xlat16_18;
    u_xlat16_1.x = u_xlat16_1.x * 6.0;
    u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_0.xyz, u_xlat16_1.x);
    u_xlat16_0.x = u_xlat10_1.w + -1.0;
    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
    u_xlat16_0.xw = max(u_xlat16_0.xw, vec2(0.0, 0.0078125));
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.y;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
    u_xlat16_0.xyz = u_xlat10_1.xyz * u_xlat16_0.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_8 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_14 = (-u_xlat16_8) + _Smoothness;
    u_xlat16_14 = u_xlat16_14 + 1.0;
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
    u_xlat10_1 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _BaseColor;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = vec3(u_xlat16_14) + (-u_xlat16_3.xyz);
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_21 = u_xlat16_0.w * u_xlat16_0.w + 1.0;
    u_xlat16_21 = float(1.0) / u_xlat16_21;
    u_xlat5.xyz = u_xlat16_2.xzw * vec3(u_xlat16_21);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat5.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_20 = u_xlat16_20 * unity_LightData.z;
    u_xlat16_4.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_0.w * u_xlat16_0.w + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_0.w * 4.0 + 2.0;
    u_xlat16_18 = u_xlat16_0.w * u_xlat16_0.w;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_18 / u_xlat5.x;
    u_xlat16_18 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_18) + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat10_5.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;
    u_xlatb5 = _Surface==1.0;
    SV_Target0.w = (u_xlatb5) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
int u_xlati2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
uint u_xlatu14;
mediump vec3 u_xlat16_15;
float u_xlat17;
mediump float u_xlat16_21;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat29;
float u_xlat37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat38;
mediump float u_xlat16_39;
mediump float u_xlat16_43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14.x;
        u_xlat14.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14.x;
        u_xlat14.x = u_xlat14.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb2 = lessThan(u_xlat2, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_4.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_4.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.w = (u_xlatb2.w) ? float(1.0) : float(0.0);
    u_xlat16_15.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_15.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_15.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_15.xyz = u_xlat16_15.xyz + u_xlat16_4.yzw;
    u_xlat16_4.yzw = max(u_xlat16_15.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_15.x = dot(u_xlat16_4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_15.x = (-u_xlat16_15.x) + 4.0;
    u_xlatu37 = uint(u_xlat16_15.x);
    u_xlati37 = int(u_xlatu37) << 2;
    u_xlat2.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 1)].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati37].xyz * vs_TEXCOORD1.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 3)].xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_8.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_43 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_44 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_44 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_44;
    u_xlatb25 = 0.0>=u_xlat2.z;
    u_xlatb37 = u_xlat2.z>=1.0;
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_44 = (u_xlatb25) ? 1.0 : u_xlat16_44;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat16_9.x = u_xlat25 * u_xlat25;
    u_xlat16_21 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_9.x * u_xlat16_21 + u_xlat16_44;
    u_xlat16_9.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_9.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_45 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
    u_xlat16_45 = (-u_xlat16_45) + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_10.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_10.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_27);
    u_xlat16_10.xyz = vec3(u_xlat16_45) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = u_xlat16_15.xxx * u_xlat16_10.xyz;
    u_xlat16_15.xyz = u_xlat2.xyz * u_xlat16_9.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_15.xyz;
    u_xlat16_44 = u_xlat16_44 * unity_LightData.z;
    u_xlat16_9.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
    u_xlat16_44 = u_xlat16_44 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_44) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_44 = inversesqrt(u_xlat25);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_44);
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_44 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_44, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_43 / u_xlat25;
    u_xlat16_44 = u_xlat25 + -6.10351562e-05;
    u_xlat16_44 = max(u_xlat16_44, 0.0);
    u_xlat16_44 = min(u_xlat16_44, 100.0);
    u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_44) + u_xlat16_7.xyz;
    u_xlat16_15.xyz = u_xlat16_10.xyz * u_xlat16_9.xyz + u_xlat16_15.xyz;
    u_xlat16_44 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_44));
    u_xlat16_9.xyz = u_xlat16_15.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(u_xlatu_loop_1 & 3u);
        u_xlatu14 = u_xlatu_loop_1 >> 2u;
        u_xlat16_44 = dot(unity_LightIndices[int(u_xlatu14)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_44);
        u_xlat14.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat5.x = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat5.x = max(u_xlat5.x, 6.10351562e-05);
        u_xlat17 = inversesqrt(u_xlat5.x);
        u_xlat6.xyz = u_xlat14.xyz * vec3(u_xlat17);
        u_xlat29 = float(1.0) / float(u_xlat5.x);
        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
        u_xlat5.x = u_xlat5.x * u_xlat29;
        u_xlat16_44 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat6.xyz);
        u_xlat16_44 = u_xlat16_44 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
        u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
        u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
        u_xlat5.x = u_xlat5.x * u_xlat16_44;
        u_xlat16_44 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
        u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
        u_xlat16_44 = u_xlat5.x * u_xlat16_44;
        u_xlat16_10.xyz = vec3(u_xlat16_44) * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat2.xyz = u_xlat14.xyz * vec3(u_xlat17) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_44 = inversesqrt(u_xlat38);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_44);
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
        u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat14.x = u_xlat38 * u_xlat38;
        u_xlat14.x = u_xlat14.x * u_xlat13 + 1.00001001;
        u_xlat16_44 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat14.x * u_xlat14.x;
        u_xlat14.x = max(u_xlat16_44, 0.100000001);
        u_xlat2.x = u_xlat14.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_43 / u_xlat2.x;
        u_xlat16_44 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_44 = max(u_xlat16_44, 0.0);
        u_xlat16_44 = min(u_xlat16_44, 100.0);
        u_xlat16_11.xyz = u_xlat16_8.xyz * vec3(u_xlat16_44) + u_xlat16_7.xyz;
        u_xlat16_9.xyz = u_xlat16_11.xyz * u_xlat16_10.xyz + u_xlat16_9.xyz;
    }
    SV_Target0.xyz = u_xlat16_9.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat19;
mediump float u_xlat16_21;
float u_xlat28;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture2D(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat11 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat11;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat11;
        u_xlat11 = u_xlat11 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat11) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat28 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat28 * u_xlat2.x;
    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_12.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_21 = (-u_xlat16_12.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_12.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.x = (-_Smoothness) + 1.0;
    u_xlat16_30 = u_xlat16_12.x * u_xlat16_12.x;
    u_xlat16_30 = max(u_xlat16_30, 0.0078125);
    u_xlat16_31 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_21 = u_xlat16_21 + 1.0;
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
    u_xlat1.x = u_xlat16_30 * 4.0 + 2.0;
    u_xlat10 = u_xlat16_30 * u_xlat16_30 + -1.0;
    u_xlat16_32 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_32)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_32 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
    u_xlat16_32 = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_33 = (-u_xlat16_12.x) * 0.699999988 + 1.70000005;
    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_33;
    u_xlat16_12.x = u_xlat16_12.x * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_12.x);
    u_xlat16_12.x = u_xlat10_0.w + -1.0;
    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlat16_12.x = log2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.y;
    u_xlat16_12.x = exp2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_12.xxx;
    u_xlat16_12.x = u_xlat16_30 * u_xlat16_30 + 1.0;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_21);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_12.xxx * u_xlat16_7.xyz;
    u_xlat16_12.xyz = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_12.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
    u_xlat16_32 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat19 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat19 = max(u_xlat19, 1.17549435e-38);
    u_xlat16_32 = inversesqrt(u_xlat19);
    u_xlat8.xyz = vec3(u_xlat16_32) * u_xlat8.xyz;
    u_xlat19 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat19 * u_xlat10 + 1.00001001;
    u_xlat16_32 = u_xlat28 * u_xlat28;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat19 = max(u_xlat16_32, 0.100000001);
    u_xlat10 = u_xlat19 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat1.x = u_xlat16_31 / u_xlat1.x;
    u_xlat16_31 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_31 = max(u_xlat16_31, 0.0);
    u_xlat16_31 = min(u_xlat16_31, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;
    u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_12.xyz;
    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
int u_xlati2;
uint u_xlatu2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec4 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_18;
mediump vec3 u_xlat16_20;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
mediump float u_xlat16_32;
float u_xlat38;
float u_xlat40;
mediump float u_xlat16_43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat2.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb2 = lessThan(u_xlat2, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb2.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu2 = uint(u_xlat16_6.x);
    u_xlati2 = int(u_xlatu2) << 2;
    u_xlat14.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 1)].xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati2].xyz * vs_TEXCOORD1.xxx + u_xlat14.xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat14.xyz;
    u_xlat2.xyz = u_xlat14.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 3)].xyz;
    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_18 = (-u_xlat16_6.x) + _Smoothness;
    u_xlat16_6.xzw = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat16_7.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_43 = (-_Smoothness) + 1.0;
    u_xlat16_8.x = u_xlat16_43 * u_xlat16_43;
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0078125);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
    u_xlat1.x = u_xlat16_8.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_8.x * u_xlat16_8.x + -1.0;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_32 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_32;
    u_xlatb25 = 0.0>=u_xlat2.z;
    u_xlatb2.x = u_xlat2.z>=1.0;
    u_xlatb25 = u_xlatb25 || u_xlatb2.x;
    u_xlat16_32 = (u_xlatb25) ? 1.0 : u_xlat16_32;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat16_44 = u_xlat25 * u_xlat25;
    u_xlat16_9.x = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_44 * u_xlat16_9.x + u_xlat16_32;
    u_xlat16_44 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_44 = u_xlat16_44 + u_xlat16_44;
    u_xlat16_9.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_44)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_44 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
    u_xlat16_8.w = (-u_xlat16_44) + 1.0;
    u_xlat16_20.xz = u_xlat16_8.xw * u_xlat16_8.xw;
    u_xlat16_44 = u_xlat16_20.z * u_xlat16_20.z;
    u_xlat16_45 = (-u_xlat16_43) * 0.699999988 + 1.70000005;
    u_xlat16_43 = u_xlat16_43 * u_xlat16_45;
    u_xlat16_43 = u_xlat16_43 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_43);
    u_xlat16_43 = u_xlat16_0.w + -1.0;
    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
    u_xlat16_43 = max(u_xlat16_43, 0.0);
    u_xlat16_43 = log2(u_xlat16_43);
    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.y;
    u_xlat16_43 = exp2(u_xlat16_43);
    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_43);
    u_xlat16_43 = u_xlat16_8.x * u_xlat16_8.x + 1.0;
    u_xlat16_43 = float(1.0) / u_xlat16_43;
    u_xlat16_10.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_18);
    u_xlat16_10.xyz = vec3(u_xlat16_44) * u_xlat16_10.xyz + u_xlat16_7.xyz;
    u_xlat2.xyz = vec3(u_xlat16_43) * u_xlat16_10.xyz;
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xzw + u_xlat16_9.xyz;
    u_xlat16_18 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_43 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_43 = clamp(u_xlat16_43, 0.0, 1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_43;
    u_xlat16_8.xzw = vec3(u_xlat16_18) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_18 = inversesqrt(u_xlat25);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_18);
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_18 = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat2.x = max(u_xlat16_18, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_20.x / u_xlat25;
    u_xlat16_18 = u_xlat25 + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_6.xzw;
    u_xlat16_8.xzw = u_xlat16_10.xyz * u_xlat16_8.xzw + u_xlat16_9.xyz;
    u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_18));
    u_xlat16_9.xyz = u_xlat16_8.xzw;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati14 = int(u_xlatu_loop_1 & 3u);
        u_xlatu26 = u_xlatu_loop_1 >> 2u;
        u_xlat16_18 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0[u_xlati14]);
        u_xlati14 = int(u_xlat16_18);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati14].www + _AdditionalLightsPosition[u_xlati14].xyz;
        u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat26 = max(u_xlat26, 6.10351562e-05);
        u_xlat38 = inversesqrt(u_xlat26);
        u_xlat5.xyz = vec3(u_xlat38) * u_xlat4.xyz;
        u_xlat40 = float(1.0) / float(u_xlat26);
        u_xlat26 = u_xlat26 * _AdditionalLightsAttenuation[u_xlati14].x + _AdditionalLightsAttenuation[u_xlati14].y;
        u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
        u_xlat26 = u_xlat26 * u_xlat40;
        u_xlat16_18 = dot(_AdditionalLightsSpotDir[u_xlati14].xyz, u_xlat5.xyz);
        u_xlat16_18 = u_xlat16_18 * _AdditionalLightsAttenuation[u_xlati14].z + _AdditionalLightsAttenuation[u_xlati14].w;
        u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
        u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
        u_xlat26 = u_xlat26 * u_xlat16_18;
        u_xlat16_18 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
        u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
        u_xlat16_18 = u_xlat26 * u_xlat16_18;
        u_xlat16_10.xyz = vec3(u_xlat16_18) * _AdditionalLightsColor[u_xlati14].xyz;
        u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat38) + vs_TEXCOORD3.xyz;
        u_xlat4.x = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat4.x = max(u_xlat4.x, 1.17549435e-38);
        u_xlat16_18 = inversesqrt(u_xlat4.x);
        u_xlat14.xyz = u_xlat14.xyz * vec3(u_xlat16_18);
        u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat14.xyz);
        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
        u_xlat14.x = dot(u_xlat5.xyz, u_xlat14.xyz);
        u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
        u_xlat26 = u_xlat4.x * u_xlat4.x;
        u_xlat26 = u_xlat26 * u_xlat13 + 1.00001001;
        u_xlat16_18 = u_xlat14.x * u_xlat14.x;
        u_xlat14.x = u_xlat26 * u_xlat26;
        u_xlat26 = max(u_xlat16_18, 0.100000001);
        u_xlat14.x = u_xlat26 * u_xlat14.x;
        u_xlat14.x = u_xlat1.x * u_xlat14.x;
        u_xlat14.x = u_xlat16_20.x / u_xlat14.x;
        u_xlat16_18 = u_xlat14.x + -6.10351562e-05;
        u_xlat16_18 = max(u_xlat16_18, 0.0);
        u_xlat16_18 = min(u_xlat16_18, 100.0);
        u_xlat16_11.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_6.xzw;
        u_xlat16_9.xyz = u_xlat16_11.xyz * u_xlat16_10.xyz + u_xlat16_9.xyz;
    }
    SV_Target0.xyz = u_xlat16_9.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
vec4 u_xlat4;
uint u_xlatu4;
bvec4 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat19;
mediump float u_xlat16_23;
float u_xlat27;
mediump float u_xlat16_27;
uint u_xlatu27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat40;
int u_xlati40;
uint u_xlatu40;
bool u_xlatb40;
float u_xlat41;
int u_xlati41;
bool u_xlatb41;
mediump float u_xlat16_42;
float u_xlat43;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat15 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat15 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat15;
        u_xlat15 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat15;
        u_xlat15 = u_xlat15 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat15) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat40 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat40 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);
    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);
    u_xlat16_16.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_16.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_16.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_16.xyz = u_xlat16_16.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_16.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_16.x = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_16.x = (-u_xlat16_16.x) + 4.0;
    u_xlatu40 = uint(u_xlat16_16.x);
    u_xlati40 = int(int(u_xlatu40) << 2);
    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati40 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati40].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati40 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati40 + 3)].xyz;
    u_xlat16_16.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_29 = (-u_xlat16_16.x) + _Smoothness;
    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_16.xxx;
    u_xlat16_9.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_16.x = (-_Smoothness) + 1.0;
    u_xlat16_42 = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_42 = max(u_xlat16_42, 0.0078125);
    u_xlat16_47 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_29 = u_xlat16_29 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_42 * 4.0 + 2.0;
    u_xlat14 = u_xlat16_42 * u_xlat16_42 + -1.0;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_48 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_48 = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_48;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb27 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb40 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb40 = u_xlat4.z>=1.0;
#endif
    u_xlatb27 = u_xlatb40 || u_xlatb27;
    u_xlat16_48 = (u_xlatb27) ? 1.0 : u_xlat16_48;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_23 = (-u_xlat16_48) + 1.0;
    u_xlat16_48 = u_xlat16_10.x * u_xlat16_23 + u_xlat16_48;
    u_xlat16_10.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_10.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_49 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_49 = (-u_xlat16_49) + 1.0;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_11.x = (-u_xlat16_16.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_11.x;
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_16.x);
    u_xlat16_16.x = u_xlat16_0.w + -1.0;
    u_xlat16_16.x = unity_SpecCube0_HDR.w * u_xlat16_16.x + 1.0;
    u_xlat16_16.x = max(u_xlat16_16.x, 0.0);
    u_xlat16_16.x = log2(u_xlat16_16.x);
    u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube0_HDR.y;
    u_xlat16_16.x = exp2(u_xlat16_16.x);
    u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube0_HDR.x;
    u_xlat16_10.xyz = u_xlat16_0.xyz * u_xlat16_16.xxx;
    u_xlat16_16.x = u_xlat16_42 * u_xlat16_42 + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_11.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_29);
    u_xlat16_11.xyz = vec3(u_xlat16_49) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_16.xxx * u_xlat16_11.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz * u_xlat16_10.xyz;
    u_xlat16_16.xyz = vs_TEXCOORD8.xyz * u_xlat16_8.xyz + u_xlat16_16.xyz;
    u_xlat16_48 = u_xlat16_48 * unity_LightData.z;
    u_xlat16_10.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_48 = u_xlat16_48 * u_xlat16_10.x;
    u_xlat16_10.xyz = vec3(u_xlat16_48) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat16_48 = inversesqrt(u_xlat27);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat16_48);
    u_xlat27 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat40 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat27 * u_xlat14 + 1.00001001;
    u_xlat16_48 = u_xlat40 * u_xlat40;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat40 = max(u_xlat16_48, 0.100000001);
    u_xlat27 = u_xlat40 * u_xlat27;
    u_xlat27 = u_xlat1.x * u_xlat27;
    u_xlat27 = u_xlat16_47 / u_xlat27;
    u_xlat16_48 = u_xlat27 + -6.10351562e-05;
    u_xlat16_48 = max(u_xlat16_48, 0.0);
    u_xlat16_48 = min(u_xlat16_48, 100.0);
    u_xlat16_11.xyz = u_xlat16_9.xyz * vec3(u_xlat16_48) + u_xlat16_8.xyz;
    u_xlat16_16.xyz = u_xlat16_11.xyz * u_xlat16_10.xyz + u_xlat16_16.xyz;
    u_xlat16_48 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu27 =  uint(int(u_xlat16_48));
    u_xlat16_10.xyz = u_xlat16_16.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu27 ; u_xlatu_loop_1++)
    {
        u_xlati41 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu4 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_48 = dot(unity_LightIndices[int(u_xlatu4)], ImmCB_0[u_xlati41]);
        u_xlati41 = int(u_xlat16_48);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati41].www + _AdditionalLightsPosition[u_xlati41].xyz;
        u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat43 = max(u_xlat43, 6.10351562e-05);
        u_xlat6.x = inversesqrt(u_xlat43);
        u_xlat19.xyz = u_xlat4.xyz * u_xlat6.xxx;
        u_xlat7.x = float(1.0) / float(u_xlat43);
        u_xlat43 = u_xlat43 * _AdditionalLightsAttenuation[u_xlati41].x + _AdditionalLightsAttenuation[u_xlati41].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
        u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
        u_xlat43 = u_xlat43 * u_xlat7.x;
        u_xlat16_48 = dot(_AdditionalLightsSpotDir[u_xlati41].xyz, u_xlat19.xyz);
        u_xlat16_48 = u_xlat16_48 * _AdditionalLightsAttenuation[u_xlati41].z + _AdditionalLightsAttenuation[u_xlati41].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
        u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
        u_xlat43 = u_xlat43 * u_xlat16_48;
        u_xlat16_48 = dot(vs_TEXCOORD2.xyz, u_xlat19.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
        u_xlat16_48 = u_xlat43 * u_xlat16_48;
        u_xlat16_11.xyz = vec3(u_xlat16_48) * _AdditionalLightsColor[u_xlati41].xyz;
        u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xxx + vs_TEXCOORD3.xyz;
        u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat41 = max(u_xlat41, 1.17549435e-38);
        u_xlat16_48 = inversesqrt(u_xlat41);
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat16_48);
        u_xlat41 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat41 = min(max(u_xlat41, 0.0), 1.0);
#else
        u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
#endif
        u_xlat4.x = dot(u_xlat19.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
        u_xlat41 = u_xlat41 * u_xlat41;
        u_xlat41 = u_xlat41 * u_xlat14 + 1.00001001;
        u_xlat16_48 = u_xlat4.x * u_xlat4.x;
        u_xlat41 = u_xlat41 * u_xlat41;
        u_xlat4.x = max(u_xlat16_48, 0.100000001);
        u_xlat41 = u_xlat41 * u_xlat4.x;
        u_xlat41 = u_xlat1.x * u_xlat41;
        u_xlat41 = u_xlat16_47 / u_xlat41;
        u_xlat16_48 = u_xlat41 + -6.10351562e-05;
        u_xlat16_48 = max(u_xlat16_48, 0.0);
        u_xlat16_48 = min(u_xlat16_48, 100.0);
        u_xlat16_12.xyz = u_xlat16_9.xyz * vec3(u_xlat16_48) + u_xlat16_8.xyz;
        u_xlat16_10.xyz = u_xlat16_12.xyz * u_xlat16_11.xyz + u_xlat16_10.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb15 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
int u_xlati7;
vec3 u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_15;
vec3 u_xlat18;
int u_xlati18;
bool u_xlatb18;
float u_xlat23;
int u_xlati23;
mediump float u_xlat16_26;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
float u_xlat40;
float u_xlat41;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_13 = (-u_xlat16_2.x) + _Smoothness;
    u_xlat16_2.xzw = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_36 = (-_Smoothness) + 1.0;
    u_xlat16_4.x = u_xlat16_36 * u_xlat16_36;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0078125);
    u_xlat16_13 = u_xlat16_13 + 1.0;
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
    u_xlat1.x = u_xlat16_4.x * 4.0 + 2.0;
    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x + -1.0;
    u_xlat16_26 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_26 = u_xlat16_26 + u_xlat16_26;
    u_xlat16_5.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_26)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
    u_xlat16_4.z = (-u_xlat16_26) + 1.0;
    u_xlat16_15.xy = u_xlat16_4.xz * u_xlat16_4.xz;
    u_xlat16_26 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
    u_xlat16_36 = u_xlat16_36 * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_36);
    u_xlat16_36 = u_xlat10_0.w + -1.0;
    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_36);
    u_xlat16_36 = u_xlat16_4.x * u_xlat16_4.x + 1.0;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_13);
    u_xlat16_4.xzw = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat7.xyz = vec3(u_xlat16_36) * u_xlat16_4.xzw;
    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat7.xyz;
    u_xlat16_4.xzw = vs_TEXCOORD8.xyz * u_xlat16_2.xzw + u_xlat16_4.xzw;
    u_xlat16_13 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
    u_xlat16_13 = u_xlat16_13 * unity_LightData.z;
    u_xlat16_5.xyz = vec3(u_xlat16_13) * _MainLightColor.xyz;
    u_xlat7.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_13 = inversesqrt(u_xlat23);
    u_xlat7.xyz = vec3(u_xlat16_13) * u_xlat7.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat7.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat7.x = dot(_MainLightPosition.xyz, u_xlat7.xyz);
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_13 = u_xlat7.x * u_xlat7.x;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat7.x = max(u_xlat16_13, 0.100000001);
    u_xlat23 = u_xlat23 * u_xlat7.x;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_15.x / u_xlat23;
    u_xlat16_13 = u_xlat23 + -6.10351562e-05;
    u_xlat16_13 = max(u_xlat16_13, 0.0);
    u_xlat16_13 = min(u_xlat16_13, 100.0);
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
    u_xlat16_4.xzw = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;
    u_xlat16_13 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati23 = int(u_xlat16_13);
    u_xlat16_5.xyz = u_xlat16_4.xzw;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati23 ; u_xlati_loop_1++)
    {
        u_xlat18.x = float(u_xlati_loop_1);
        u_xlatb29 = u_xlat18.x<2.0;
        u_xlat16_6.xy = (bool(u_xlatb29)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat40 = u_xlat18.x + -2.0;
        u_xlat18.x = (u_xlatb29) ? u_xlat18.x : u_xlat40;
        u_xlatb18 = u_xlat18.x<1.0;
        u_xlat16_13 = (u_xlatb18) ? u_xlat16_6.x : u_xlat16_6.y;
        u_xlati18 = int(u_xlat16_13);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati18).www + _AdditionalLightsPositionDynamicIndex(u_xlati18).xyz;
        u_xlat29 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat29 = max(u_xlat29, 6.10351562e-05);
        u_xlat40 = inversesqrt(u_xlat29);
        u_xlat9.xyz = vec3(u_xlat40) * u_xlat8.xyz;
        u_xlat41 = float(1.0) / u_xlat29;
        u_xlat29 = u_xlat29 * _AdditionalLightsAttenuationDynamicIndex(u_xlati18).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati18).y;
        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
        u_xlat29 = u_xlat29 * u_xlat41;
        u_xlat16_13 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati18).xyz, u_xlat9.xyz);
        u_xlat16_13 = u_xlat16_13 * _AdditionalLightsAttenuationDynamicIndex(u_xlati18).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati18).w;
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
        u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
        u_xlat29 = u_xlat16_13 * u_xlat29;
        u_xlat16_13 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
        u_xlat16_13 = u_xlat16_13 * u_xlat29;
        u_xlat16_6.xyz = vec3(u_xlat16_13) * _AdditionalLightsColorDynamicIndex(u_xlati18).xyz;
        u_xlat18.xyz = u_xlat8.xyz * vec3(u_xlat40) + vs_TEXCOORD3.xyz;
        u_xlat8.x = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
        u_xlat16_13 = inversesqrt(u_xlat8.x);
        u_xlat18.xyz = vec3(u_xlat16_13) * u_xlat18.xyz;
        u_xlat8.x = dot(vs_TEXCOORD2.xyz, u_xlat18.xyz);
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
        u_xlat18.x = dot(u_xlat9.xyz, u_xlat18.xyz);
        u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
        u_xlat29 = u_xlat8.x * u_xlat8.x;
        u_xlat29 = u_xlat29 * u_xlat12 + 1.00001001;
        u_xlat16_13 = u_xlat18.x * u_xlat18.x;
        u_xlat18.x = u_xlat29 * u_xlat29;
        u_xlat29 = max(u_xlat16_13, 0.100000001);
        u_xlat18.x = u_xlat29 * u_xlat18.x;
        u_xlat18.x = u_xlat1.x * u_xlat18.x;
        u_xlat18.x = u_xlat16_15.x / u_xlat18.x;
        u_xlat16_13 = u_xlat18.x + -6.10351562e-05;
        u_xlat16_13 = max(u_xlat16_13, 0.0);
        u_xlat16_13 = min(u_xlat16_13, 100.0);
        u_xlat16_10.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
        u_xlat16_5.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    }
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
int u_xlati3;
bvec4 u_xlatb3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec4 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat16;
uint u_xlatu16;
float u_xlat18;
mediump float u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat27;
mediump float u_xlat16_27;
uint u_xlatu27;
bool u_xlatb27;
float u_xlat31;
mediump float u_xlat16_35;
float u_xlat41;
int u_xlati41;
uint u_xlatu41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlat16_4.w = (u_xlatb3.w) ? float(1.0) : float(0.0);
    u_xlat16_7.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_7.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_7.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_7.xyz = u_xlat16_4.yzw + u_xlat16_7.xyz;
    u_xlat16_4.yzw = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.x = dot(u_xlat16_4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_7.x = (-u_xlat16_7.x) + 4.0;
    u_xlatu41 = uint(u_xlat16_7.x);
    u_xlati41 = int(int(u_xlatu41) << 2);
    u_xlat3.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati41 + 1)].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati41].xyz * vs_TEXCOORD1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati41 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati41 + 3)].xyz;
    u_xlat16_7.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_20 = (-u_xlat16_7.x) + _Smoothness;
    u_xlat16_7.xzw = u_xlat1.xyz * u_xlat16_7.xxx;
    u_xlat16_8.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_47 = (-_Smoothness) + 1.0;
    u_xlat16_9.x = u_xlat16_47 * u_xlat16_47;
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0078125);
    u_xlat16_20 = u_xlat16_20 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_9.x * 4.0 + 2.0;
    u_xlat14 = u_xlat16_9.x * u_xlat16_9.x + -1.0;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_35 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_35 = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat3.z);
#else
    u_xlatb27 = 0.0>=u_xlat3.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb41 = !!(u_xlat3.z>=1.0);
#else
    u_xlatb41 = u_xlat3.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb41;
    u_xlat16_35 = (u_xlatb27) ? 1.0 : u_xlat16_35;
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_48 = u_xlat27 * u_xlat27;
    u_xlat16_10.x = (-u_xlat16_35) + 1.0;
    u_xlat16_35 = u_xlat16_48 * u_xlat16_10.x + u_xlat16_35;
    u_xlat16_48 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_48 = u_xlat16_48 + u_xlat16_48;
    u_xlat16_10.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_48)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_48 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
    u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
    u_xlat16_9.w = (-u_xlat16_48) + 1.0;
    u_xlat16_22.xz = u_xlat16_9.xw * u_xlat16_9.xw;
    u_xlat16_48 = u_xlat16_22.z * u_xlat16_22.z;
    u_xlat16_49 = (-u_xlat16_47) * 0.699999988 + 1.70000005;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_49;
    u_xlat16_47 = u_xlat16_47 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_47);
    u_xlat16_47 = u_xlat16_0.w + -1.0;
    u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
    u_xlat16_47 = max(u_xlat16_47, 0.0);
    u_xlat16_47 = log2(u_xlat16_47);
    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.y;
    u_xlat16_47 = exp2(u_xlat16_47);
    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.x;
    u_xlat16_10.xyz = u_xlat16_0.xyz * vec3(u_xlat16_47);
    u_xlat16_47 = u_xlat16_9.x * u_xlat16_9.x + 1.0;
    u_xlat16_47 = float(1.0) / u_xlat16_47;
    u_xlat16_11.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_20);
    u_xlat16_11.xyz = vec3(u_xlat16_48) * u_xlat16_11.xyz + u_xlat16_8.xyz;
    u_xlat3.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;
    u_xlat16_10.xyz = u_xlat3.xyz * u_xlat16_10.xyz;
    u_xlat16_10.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xzw + u_xlat16_10.xyz;
    u_xlat16_20 = u_xlat16_35 * unity_LightData.z;
    u_xlat16_47 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);
#else
    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * u_xlat16_47;
    u_xlat16_9.xzw = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat3.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat27);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_20);
    u_xlat27 = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat41 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat41 = min(max(u_xlat41, 0.0), 1.0);
#else
    u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat27 * u_xlat14 + 1.00001001;
    u_xlat16_20 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat41 = max(u_xlat16_20, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat27 = u_xlat1.x * u_xlat27;
    u_xlat27 = u_xlat16_22.x / u_xlat27;
    u_xlat16_20 = u_xlat27 + -6.10351562e-05;
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = min(u_xlat16_20, 100.0);
    u_xlat16_11.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_7.xzw;
    u_xlat16_9.xzw = u_xlat16_11.xyz * u_xlat16_9.xzw + u_xlat16_10.xyz;
    u_xlat16_20 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu27 =  uint(int(u_xlat16_20));
    u_xlat16_10.xyz = u_xlat16_9.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu27 ; u_xlatu_loop_1++)
    {
        u_xlati3 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu16 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_20 = dot(unity_LightIndices[int(u_xlatu16)], ImmCB_0[u_xlati3]);
        u_xlati3 = int(u_xlat16_20);
        u_xlat16.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;
        u_xlat5.x = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat5.x = max(u_xlat5.x, 6.10351562e-05);
        u_xlat18 = inversesqrt(u_xlat5.x);
        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat18);
        u_xlat31 = float(1.0) / float(u_xlat5.x);
        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
        u_xlat5.x = u_xlat5.x * u_xlat31;
        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat6.xyz);
        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
        u_xlat5.x = u_xlat5.x * u_xlat16_20;
        u_xlat16_20 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
        u_xlat16_20 = u_xlat5.x * u_xlat16_20;
        u_xlat16_11.xyz = vec3(u_xlat16_20) * _AdditionalLightsColor[u_xlati3].xyz;
        u_xlat3.xyz = u_xlat16.xyz * vec3(u_xlat18) + vs_TEXCOORD3.xyz;
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = max(u_xlat42, 1.17549435e-38);
        u_xlat16_20 = inversesqrt(u_xlat42);
        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_20);
        u_xlat42 = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
        u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
        u_xlat16.x = u_xlat42 * u_xlat42;
        u_xlat16.x = u_xlat16.x * u_xlat14 + 1.00001001;
        u_xlat16_20 = u_xlat3.x * u_xlat3.x;
        u_xlat3.x = u_xlat16.x * u_xlat16.x;
        u_xlat16.x = max(u_xlat16_20, 0.100000001);
        u_xlat3.x = u_xlat16.x * u_xlat3.x;
        u_xlat3.x = u_xlat1.x * u_xlat3.x;
        u_xlat3.x = u_xlat16_22.x / u_xlat3.x;
        u_xlat16_20 = u_xlat3.x + -6.10351562e-05;
        u_xlat16_20 = max(u_xlat16_20, 0.0);
        u_xlat16_20 = min(u_xlat16_20, 100.0);
        u_xlat16_12.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_7.xzw;
        u_xlat16_10.xyz = u_xlat16_12.xyz * u_xlat16_11.xyz + u_xlat16_10.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
vec3 u_xlat13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
float u_xlat19;
float u_xlat23;
int u_xlati23;
float u_xlat24;
mediump float u_xlat16_25;
float u_xlat30;
float u_xlat34;
int u_xlati34;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture2D(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13.x;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13.x;
        u_xlat13.x = u_xlat13.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_37 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    u_xlat16_38 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_38 = u_xlat16_38 + u_xlat16_38;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_38)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_38 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_39 = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_39;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat10_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_25);
    u_xlat16_7.xyz = vec3(u_xlat16_38) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_38 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_38 = u_xlat34 * u_xlat34;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat34 = max(u_xlat16_38, 0.100000001);
    u_xlat23 = u_xlat34 * u_xlat23;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_37 / u_xlat23;
    u_xlat16_38 = u_xlat23 + -6.10351562e-05;
    u_xlat16_38 = max(u_xlat16_38, 0.0);
    u_xlat16_38 = min(u_xlat16_38, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
    u_xlat16_14.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati23 = int(u_xlat16_38);
    u_xlat16_6.xyz = u_xlat16_14.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati23 ; u_xlati_loop_1++)
    {
        u_xlat2.x = float(u_xlati_loop_1);
        u_xlatb13 = u_xlat2.x<2.0;
        u_xlat16_7.xy = (bool(u_xlatb13)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat24 = u_xlat2.x + -2.0;
        u_xlat2.x = (u_xlatb13) ? u_xlat2.x : u_xlat24;
        u_xlatb2.x = u_xlat2.x<1.0;
        u_xlat16_38 = (u_xlatb2.x) ? u_xlat16_7.x : u_xlat16_7.y;
        u_xlati2 = int(u_xlat16_38);
        u_xlat13.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati2).www + _AdditionalLightsPositionDynamicIndex(u_xlati2).xyz;
        u_xlat8 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat8 = max(u_xlat8, 6.10351562e-05);
        u_xlat19 = inversesqrt(u_xlat8);
        u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat19);
        u_xlat30 = float(1.0) / u_xlat8;
        u_xlat8 = u_xlat8 * _AdditionalLightsAttenuationDynamicIndex(u_xlati2).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati2).y;
        u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
        u_xlat8 = u_xlat8 * u_xlat30;
        u_xlat16_38 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati2).xyz, u_xlat9.xyz);
        u_xlat16_38 = u_xlat16_38 * _AdditionalLightsAttenuationDynamicIndex(u_xlati2).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati2).w;
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
        u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
        u_xlat8 = u_xlat16_38 * u_xlat8;
        u_xlat16_38 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
        u_xlat16_38 = u_xlat16_38 * u_xlat8;
        u_xlat16_7.xyz = vec3(u_xlat16_38) * _AdditionalLightsColorDynamicIndex(u_xlati2).xyz;
        u_xlat2.xyz = u_xlat13.xyz * vec3(u_xlat19) + vs_TEXCOORD3.xyz;
        u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat35 = max(u_xlat35, 1.17549435e-38);
        u_xlat16_38 = inversesqrt(u_xlat35);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
        u_xlat35 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
        u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
        u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat13.x = u_xlat35 * u_xlat35;
        u_xlat13.x = u_xlat13.x * u_xlat12 + 1.00001001;
        u_xlat16_38 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat13.x * u_xlat13.x;
        u_xlat13.x = max(u_xlat16_38, 0.100000001);
        u_xlat2.x = u_xlat13.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_37 / u_xlat2.x;
        u_xlat16_38 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_38 = max(u_xlat16_38, 0.0);
        u_xlat16_38 = min(u_xlat16_38, 100.0);
        u_xlat16_10.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
int u_xlati2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
uint u_xlatu14;
mediump vec3 u_xlat16_15;
float u_xlat17;
mediump float u_xlat16_21;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat29;
float u_xlat37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat38;
mediump float u_xlat16_39;
mediump float u_xlat16_43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14.x;
        u_xlat14.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14.x;
        u_xlat14.x = u_xlat14.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb2 = lessThan(u_xlat2, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_4.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_4.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.w = (u_xlatb2.w) ? float(1.0) : float(0.0);
    u_xlat16_15.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_15.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_15.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_15.xyz = u_xlat16_15.xyz + u_xlat16_4.yzw;
    u_xlat16_4.yzw = max(u_xlat16_15.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_15.x = dot(u_xlat16_4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_15.x = (-u_xlat16_15.x) + 4.0;
    u_xlatu37 = uint(u_xlat16_15.x);
    u_xlati37 = int(int(u_xlatu37) << 2);
    u_xlat2.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 1)].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati37].xyz * vs_TEXCOORD1.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 3)].xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_8.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_43 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_44 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_44 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_44;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=u_xlat2.z);
#else
    u_xlatb25 = 0.0>=u_xlat2.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat2.z>=1.0);
#else
    u_xlatb37 = u_xlat2.z>=1.0;
#endif
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_44 = (u_xlatb25) ? 1.0 : u_xlat16_44;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat25 * u_xlat25;
    u_xlat16_21 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_9.x * u_xlat16_21 + u_xlat16_44;
    u_xlat16_9.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_9.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_45 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat16_45 = (-u_xlat16_45) + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_10.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_10.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_27);
    u_xlat16_10.xyz = vec3(u_xlat16_45) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = u_xlat16_15.xxx * u_xlat16_10.xyz;
    u_xlat16_15.xyz = u_xlat2.xyz * u_xlat16_9.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_15.xyz;
    u_xlat16_44 = u_xlat16_44 * unity_LightData.z;
    u_xlat16_9.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_44 = u_xlat16_44 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_44) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_44 = inversesqrt(u_xlat25);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_44);
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_44 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_44, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_43 / u_xlat25;
    u_xlat16_44 = u_xlat25 + -6.10351562e-05;
    u_xlat16_44 = max(u_xlat16_44, 0.0);
    u_xlat16_44 = min(u_xlat16_44, 100.0);
    u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_44) + u_xlat16_7.xyz;
    u_xlat16_15.xyz = u_xlat16_10.xyz * u_xlat16_9.xyz + u_xlat16_15.xyz;
    u_xlat16_44 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_44));
    u_xlat16_9.xyz = u_xlat16_15.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu14 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_44 = dot(unity_LightIndices[int(u_xlatu14)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_44);
        u_xlat14.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat5.x = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat5.x = max(u_xlat5.x, 6.10351562e-05);
        u_xlat17 = inversesqrt(u_xlat5.x);
        u_xlat6.xyz = u_xlat14.xyz * vec3(u_xlat17);
        u_xlat29 = float(1.0) / float(u_xlat5.x);
        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
        u_xlat5.x = u_xlat5.x * u_xlat29;
        u_xlat16_44 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat6.xyz);
        u_xlat16_44 = u_xlat16_44 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
        u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
        u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
        u_xlat5.x = u_xlat5.x * u_xlat16_44;
        u_xlat16_44 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
        u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
        u_xlat16_44 = u_xlat5.x * u_xlat16_44;
        u_xlat16_10.xyz = vec3(u_xlat16_44) * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat2.xyz = u_xlat14.xyz * vec3(u_xlat17) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_44 = inversesqrt(u_xlat38);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_44);
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
        u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
        u_xlat14.x = u_xlat38 * u_xlat38;
        u_xlat14.x = u_xlat14.x * u_xlat13 + 1.00001001;
        u_xlat16_44 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat14.x * u_xlat14.x;
        u_xlat14.x = max(u_xlat16_44, 0.100000001);
        u_xlat2.x = u_xlat14.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_43 / u_xlat2.x;
        u_xlat16_44 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_44 = max(u_xlat16_44, 0.0);
        u_xlat16_44 = min(u_xlat16_44, 100.0);
        u_xlat16_11.xyz = u_xlat16_8.xyz * vec3(u_xlat16_44) + u_xlat16_7.xyz;
        u_xlat16_9.xyz = u_xlat16_11.xyz * u_xlat16_10.xyz + u_xlat16_9.xyz;
    }
    SV_Target0.xyz = u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb15 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
lowp vec3 u_xlat10_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_17;
vec3 u_xlat20;
bool u_xlatb20;
float u_xlat21;
float u_xlat25;
int u_xlati25;
mediump float u_xlat16_29;
float u_xlat32;
float u_xlat33;
float u_xlat38;
int u_xlati38;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat44;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_3.xzw = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_40 = (-_Smoothness) + 1.0;
    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0078125);
    u_xlat16_15 = u_xlat16_15 + 1.0;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat1.x = u_xlat16_5.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_5.x * u_xlat16_5.x + -1.0;
    u_xlat16_29 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_29)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
    u_xlat16_5.z = (-u_xlat16_29) + 1.0;
    u_xlat16_17.xy = u_xlat16_5.xz * u_xlat16_5.xz;
    u_xlat16_29 = u_xlat16_17.y * u_xlat16_17.y;
    u_xlat16_41 = (-u_xlat16_40) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_40);
    u_xlat16_40 = u_xlat10_0.w + -1.0;
    u_xlat16_40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.y;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_40);
    u_xlat16_40 = u_xlat16_5.x * u_xlat16_5.x + 1.0;
    u_xlat16_40 = float(1.0) / u_xlat16_40;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_15);
    u_xlat16_5.xzw = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat8.xyz = vec3(u_xlat16_40) * u_xlat16_5.xzw;
    u_xlat16_5.xzw = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_5.xzw = vs_TEXCOORD8.xyz * u_xlat16_3.xzw + u_xlat16_5.xzw;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat16_15 = u_xlat16_15 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_15) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_15 = inversesqrt(u_xlat25);
    u_xlat8.xyz = vec3(u_xlat16_15) * u_xlat8.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat38 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_15 = u_xlat38 * u_xlat38;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat38 = max(u_xlat16_15, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat38;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_17.x / u_xlat25;
    u_xlat16_15 = u_xlat25 + -6.10351562e-05;
    u_xlat16_15 = max(u_xlat16_15, 0.0);
    u_xlat16_15 = min(u_xlat16_15, 100.0);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
    u_xlat16_5.xzw = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xzw;
    u_xlat16_15 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati25 = int(u_xlat16_15);
    u_xlat16_6.xyz = u_xlat16_5.xzw;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati25 ; u_xlati_loop_1++)
    {
        u_xlat8.x = float(u_xlati_loop_1);
        u_xlatb20 = u_xlat8.x<2.0;
        u_xlat16_7.xy = (bool(u_xlatb20)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat32 = u_xlat8.x + -2.0;
        u_xlat8.x = (u_xlatb20) ? u_xlat8.x : u_xlat32;
        u_xlatb8 = u_xlat8.x<1.0;
        u_xlat16_15 = (u_xlatb8) ? u_xlat16_7.x : u_xlat16_7.y;
        u_xlati8 = int(u_xlat16_15);
        u_xlat20.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati8).www + _AdditionalLightsPositionDynamicIndex(u_xlati8).xyz;
        u_xlat9 = dot(u_xlat20.xyz, u_xlat20.xyz);
        u_xlat9 = max(u_xlat9, 6.10351562e-05);
        u_xlat21 = inversesqrt(u_xlat9);
        u_xlat10.xyz = u_xlat20.xyz * vec3(u_xlat21);
        u_xlat33 = float(1.0) / u_xlat9;
        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuationDynamicIndex(u_xlati8).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati8).y;
        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
        u_xlat9 = u_xlat9 * u_xlat33;
        u_xlat16_15 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati8).xyz, u_xlat10.xyz);
        u_xlat16_15 = u_xlat16_15 * _AdditionalLightsAttenuationDynamicIndex(u_xlati8).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati8).w;
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
        u_xlat16_15 = u_xlat16_15 * u_xlat16_15;
        u_xlat9 = u_xlat16_15 * u_xlat9;
        u_xlat16_15 = dot(vs_TEXCOORD2.xyz, u_xlat10.xyz);
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
        u_xlat16_15 = u_xlat16_15 * u_xlat9;
        u_xlat16_7.xyz = vec3(u_xlat16_15) * _AdditionalLightsColorDynamicIndex(u_xlati8).xyz;
        u_xlat8.xyz = u_xlat20.xyz * vec3(u_xlat21) + vs_TEXCOORD3.xyz;
        u_xlat44 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat44 = max(u_xlat44, 1.17549435e-38);
        u_xlat16_15 = inversesqrt(u_xlat44);
        u_xlat8.xyz = vec3(u_xlat16_15) * u_xlat8.xyz;
        u_xlat44 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
        u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
        u_xlat20.x = u_xlat44 * u_xlat44;
        u_xlat20.x = u_xlat20.x * u_xlat13 + 1.00001001;
        u_xlat16_15 = u_xlat8.x * u_xlat8.x;
        u_xlat8.x = u_xlat20.x * u_xlat20.x;
        u_xlat20.x = max(u_xlat16_15, 0.100000001);
        u_xlat8.x = u_xlat20.x * u_xlat8.x;
        u_xlat8.x = u_xlat1.x * u_xlat8.x;
        u_xlat8.x = u_xlat16_17.x / u_xlat8.x;
        u_xlat16_15 = u_xlat8.x + -6.10351562e-05;
        u_xlat16_15 = max(u_xlat16_15, 0.0);
        u_xlat16_15 = min(u_xlat16_15, 100.0);
        u_xlat16_11.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
int u_xlati2;
uint u_xlatu2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec4 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_18;
mediump vec3 u_xlat16_20;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
mediump float u_xlat16_32;
float u_xlat38;
float u_xlat40;
mediump float u_xlat16_43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat2.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb2 = lessThan(u_xlat2, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb2.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu2 = uint(u_xlat16_6.x);
    u_xlati2 = int(int(u_xlatu2) << 2);
    u_xlat14.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 1)].xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati2].xyz * vs_TEXCOORD1.xxx + u_xlat14.xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat14.xyz;
    u_xlat2.xyz = u_xlat14.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 3)].xyz;
    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_18 = (-u_xlat16_6.x) + _Smoothness;
    u_xlat16_6.xzw = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat16_7.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_43 = (-_Smoothness) + 1.0;
    u_xlat16_8.x = u_xlat16_43 * u_xlat16_43;
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0078125);
    u_xlat16_18 = u_xlat16_18 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_8.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_8.x * u_xlat16_8.x + -1.0;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_32 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=u_xlat2.z);
#else
    u_xlatb25 = 0.0>=u_xlat2.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat2.z>=1.0);
#else
    u_xlatb2.x = u_xlat2.z>=1.0;
#endif
    u_xlatb25 = u_xlatb25 || u_xlatb2.x;
    u_xlat16_32 = (u_xlatb25) ? 1.0 : u_xlat16_32;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_44 = u_xlat25 * u_xlat25;
    u_xlat16_9.x = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_44 * u_xlat16_9.x + u_xlat16_32;
    u_xlat16_44 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_44 = u_xlat16_44 + u_xlat16_44;
    u_xlat16_9.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_44)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_44 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_8.w = (-u_xlat16_44) + 1.0;
    u_xlat16_20.xz = u_xlat16_8.xw * u_xlat16_8.xw;
    u_xlat16_44 = u_xlat16_20.z * u_xlat16_20.z;
    u_xlat16_45 = (-u_xlat16_43) * 0.699999988 + 1.70000005;
    u_xlat16_43 = u_xlat16_43 * u_xlat16_45;
    u_xlat16_43 = u_xlat16_43 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_43);
    u_xlat16_43 = u_xlat16_0.w + -1.0;
    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
    u_xlat16_43 = max(u_xlat16_43, 0.0);
    u_xlat16_43 = log2(u_xlat16_43);
    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.y;
    u_xlat16_43 = exp2(u_xlat16_43);
    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_43);
    u_xlat16_43 = u_xlat16_8.x * u_xlat16_8.x + 1.0;
    u_xlat16_43 = float(1.0) / u_xlat16_43;
    u_xlat16_10.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_18);
    u_xlat16_10.xyz = vec3(u_xlat16_44) * u_xlat16_10.xyz + u_xlat16_7.xyz;
    u_xlat2.xyz = vec3(u_xlat16_43) * u_xlat16_10.xyz;
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xzw + u_xlat16_9.xyz;
    u_xlat16_18 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_43 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_43 = min(max(u_xlat16_43, 0.0), 1.0);
#else
    u_xlat16_43 = clamp(u_xlat16_43, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_18 * u_xlat16_43;
    u_xlat16_8.xzw = vec3(u_xlat16_18) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_18 = inversesqrt(u_xlat25);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_18);
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_18 = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat2.x = max(u_xlat16_18, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_20.x / u_xlat25;
    u_xlat16_18 = u_xlat25 + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_6.xzw;
    u_xlat16_8.xzw = u_xlat16_10.xyz * u_xlat16_8.xzw + u_xlat16_9.xyz;
    u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_18));
    u_xlat16_9.xyz = u_xlat16_8.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati14 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu26 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_18 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0[u_xlati14]);
        u_xlati14 = int(u_xlat16_18);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati14].www + _AdditionalLightsPosition[u_xlati14].xyz;
        u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat26 = max(u_xlat26, 6.10351562e-05);
        u_xlat38 = inversesqrt(u_xlat26);
        u_xlat5.xyz = vec3(u_xlat38) * u_xlat4.xyz;
        u_xlat40 = float(1.0) / float(u_xlat26);
        u_xlat26 = u_xlat26 * _AdditionalLightsAttenuation[u_xlati14].x + _AdditionalLightsAttenuation[u_xlati14].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
        u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
        u_xlat26 = u_xlat26 * u_xlat40;
        u_xlat16_18 = dot(_AdditionalLightsSpotDir[u_xlati14].xyz, u_xlat5.xyz);
        u_xlat16_18 = u_xlat16_18 * _AdditionalLightsAttenuation[u_xlati14].z + _AdditionalLightsAttenuation[u_xlati14].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
        u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
        u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
        u_xlat26 = u_xlat26 * u_xlat16_18;
        u_xlat16_18 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
        u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
        u_xlat16_18 = u_xlat26 * u_xlat16_18;
        u_xlat16_10.xyz = vec3(u_xlat16_18) * _AdditionalLightsColor[u_xlati14].xyz;
        u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat38) + vs_TEXCOORD3.xyz;
        u_xlat4.x = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat4.x = max(u_xlat4.x, 1.17549435e-38);
        u_xlat16_18 = inversesqrt(u_xlat4.x);
        u_xlat14.xyz = u_xlat14.xyz * vec3(u_xlat16_18);
        u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
        u_xlat14.x = dot(u_xlat5.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
        u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
        u_xlat26 = u_xlat4.x * u_xlat4.x;
        u_xlat26 = u_xlat26 * u_xlat13 + 1.00001001;
        u_xlat16_18 = u_xlat14.x * u_xlat14.x;
        u_xlat14.x = u_xlat26 * u_xlat26;
        u_xlat26 = max(u_xlat16_18, 0.100000001);
        u_xlat14.x = u_xlat26 * u_xlat14.x;
        u_xlat14.x = u_xlat1.x * u_xlat14.x;
        u_xlat14.x = u_xlat16_20.x / u_xlat14.x;
        u_xlat16_18 = u_xlat14.x + -6.10351562e-05;
        u_xlat16_18 = max(u_xlat16_18, 0.0);
        u_xlat16_18 = min(u_xlat16_18, 100.0);
        u_xlat16_11.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_6.xzw;
        u_xlat16_9.xyz = u_xlat16_11.xyz * u_xlat16_10.xyz + u_xlat16_9.xyz;
    }
    SV_Target0.xyz = u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _EmissionMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
float u_xlat20;
vec3 u_xlat21;
float u_xlat25;
int u_xlati25;
mediump float u_xlat16_27;
float u_xlat37;
int u_xlati37;
float u_xlat38;
int u_xlati38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
float u_xlat44;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture2D(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    u_xlat16_41 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_41)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_42 = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_42;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat10_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);
    u_xlat16_7.xyz = vec3(u_xlat16_41) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_15.xxx * u_xlat16_7.xyz;
    u_xlat16_15.xyz = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat25);
    u_xlat8.xyz = vec3(u_xlat16_41) * u_xlat8.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_41 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_41, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_40 / u_xlat25;
    u_xlat16_41 = u_xlat25 + -6.10351562e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
    u_xlat16_15.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati25 = int(u_xlat16_41);
    u_xlat16_6.xyz = u_xlat16_15.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati25 ; u_xlati_loop_1++)
    {
        u_xlat38 = float(u_xlati_loop_1);
        u_xlatb8 = u_xlat38<2.0;
        u_xlat16_7.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat20 = u_xlat38 + -2.0;
        u_xlat38 = (u_xlatb8) ? u_xlat38 : u_xlat20;
        u_xlatb38 = u_xlat38<1.0;
        u_xlat16_41 = (u_xlatb38) ? u_xlat16_7.x : u_xlat16_7.y;
        u_xlati38 = int(u_xlat16_41);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati38).www + _AdditionalLightsPositionDynamicIndex(u_xlati38).xyz;
        u_xlat44 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat44 = max(u_xlat44, 6.10351562e-05);
        u_xlat9 = inversesqrt(u_xlat44);
        u_xlat21.xyz = u_xlat8.xyz * vec3(u_xlat9);
        u_xlat10 = float(1.0) / u_xlat44;
        u_xlat44 = u_xlat44 * _AdditionalLightsAttenuationDynamicIndex(u_xlati38).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati38).y;
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
        u_xlat44 = u_xlat44 * u_xlat10;
        u_xlat16_41 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati38).xyz, u_xlat21.xyz);
        u_xlat16_41 = u_xlat16_41 * _AdditionalLightsAttenuationDynamicIndex(u_xlati38).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati38).w;
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
        u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
        u_xlat44 = u_xlat16_41 * u_xlat44;
        u_xlat16_41 = dot(vs_TEXCOORD2.xyz, u_xlat21.xyz);
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
        u_xlat16_41 = u_xlat16_41 * u_xlat44;
        u_xlat16_7.xyz = vec3(u_xlat16_41) * _AdditionalLightsColorDynamicIndex(u_xlati38).xyz;
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_41 = inversesqrt(u_xlat38);
        u_xlat8.xyz = vec3(u_xlat16_41) * u_xlat8.xyz;
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
        u_xlat8.x = dot(u_xlat21.xyz, u_xlat8.xyz);
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat38 = u_xlat38 * u_xlat13 + 1.00001001;
        u_xlat16_41 = u_xlat8.x * u_xlat8.x;
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat8.x = max(u_xlat16_41, 0.100000001);
        u_xlat38 = u_xlat38 * u_xlat8.x;
        u_xlat38 = u_xlat1.x * u_xlat38;
        u_xlat38 = u_xlat16_40 / u_xlat38;
        u_xlat16_41 = u_xlat38 + -6.10351562e-05;
        u_xlat16_41 = max(u_xlat16_41, 0.0);
        u_xlat16_41 = min(u_xlat16_41, 100.0);
        u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
vec4 u_xlat4;
uint u_xlatu4;
bvec4 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat19;
mediump float u_xlat16_23;
float u_xlat27;
mediump float u_xlat16_27;
uint u_xlatu27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat40;
int u_xlati40;
uint u_xlatu40;
bool u_xlatb40;
float u_xlat41;
int u_xlati41;
bool u_xlatb41;
mediump float u_xlat16_42;
float u_xlat43;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat15 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat15 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat15;
        u_xlat15 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat15;
        u_xlat15 = u_xlat15 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat15) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat40 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat40 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);
    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);
    u_xlat16_16.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_16.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_16.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_16.xyz = u_xlat16_16.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_16.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_16.x = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_16.x = (-u_xlat16_16.x) + 4.0;
    u_xlatu40 = uint(u_xlat16_16.x);
    u_xlati40 = int(int(u_xlatu40) << 2);
    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati40 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati40].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati40 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati40 + 3)].xyz;
    u_xlat16_16.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_29 = (-u_xlat16_16.x) + _Smoothness;
    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_16.xxx;
    u_xlat16_9.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_16.x = (-_Smoothness) + 1.0;
    u_xlat16_42 = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_42 = max(u_xlat16_42, 0.0078125);
    u_xlat16_47 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_29 = u_xlat16_29 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_42 * 4.0 + 2.0;
    u_xlat14 = u_xlat16_42 * u_xlat16_42 + -1.0;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_48 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_48 = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_48;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb27 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb40 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb40 = u_xlat4.z>=1.0;
#endif
    u_xlatb27 = u_xlatb40 || u_xlatb27;
    u_xlat16_48 = (u_xlatb27) ? 1.0 : u_xlat16_48;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_23 = (-u_xlat16_48) + 1.0;
    u_xlat16_48 = u_xlat16_10.x * u_xlat16_23 + u_xlat16_48;
    u_xlat16_10.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_10.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_49 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_49 = (-u_xlat16_49) + 1.0;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_11.x = (-u_xlat16_16.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_11.x;
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_16.x);
    u_xlat16_16.x = u_xlat16_0.w + -1.0;
    u_xlat16_16.x = unity_SpecCube0_HDR.w * u_xlat16_16.x + 1.0;
    u_xlat16_16.x = max(u_xlat16_16.x, 0.0);
    u_xlat16_16.x = log2(u_xlat16_16.x);
    u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube0_HDR.y;
    u_xlat16_16.x = exp2(u_xlat16_16.x);
    u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube0_HDR.x;
    u_xlat16_10.xyz = u_xlat16_0.xyz * u_xlat16_16.xxx;
    u_xlat16_16.x = u_xlat16_42 * u_xlat16_42 + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_11.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_29);
    u_xlat16_11.xyz = vec3(u_xlat16_49) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_16.xxx * u_xlat16_11.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz * u_xlat16_10.xyz;
    u_xlat16_16.xyz = vs_TEXCOORD8.xyz * u_xlat16_8.xyz + u_xlat16_16.xyz;
    u_xlat16_48 = u_xlat16_48 * unity_LightData.z;
    u_xlat16_10.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_48 = u_xlat16_48 * u_xlat16_10.x;
    u_xlat16_10.xyz = vec3(u_xlat16_48) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat16_48 = inversesqrt(u_xlat27);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat16_48);
    u_xlat27 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat40 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat27 * u_xlat14 + 1.00001001;
    u_xlat16_48 = u_xlat40 * u_xlat40;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat40 = max(u_xlat16_48, 0.100000001);
    u_xlat27 = u_xlat40 * u_xlat27;
    u_xlat27 = u_xlat1.x * u_xlat27;
    u_xlat27 = u_xlat16_47 / u_xlat27;
    u_xlat16_48 = u_xlat27 + -6.10351562e-05;
    u_xlat16_48 = max(u_xlat16_48, 0.0);
    u_xlat16_48 = min(u_xlat16_48, 100.0);
    u_xlat16_11.xyz = u_xlat16_9.xyz * vec3(u_xlat16_48) + u_xlat16_8.xyz;
    u_xlat16_16.xyz = u_xlat16_11.xyz * u_xlat16_10.xyz + u_xlat16_16.xyz;
    u_xlat16_48 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu27 =  uint(int(u_xlat16_48));
    u_xlat16_10.xyz = u_xlat16_16.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu27 ; u_xlatu_loop_1++)
    {
        u_xlati41 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu4 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_48 = dot(unity_LightIndices[int(u_xlatu4)], ImmCB_0[u_xlati41]);
        u_xlati41 = int(u_xlat16_48);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati41].www + _AdditionalLightsPosition[u_xlati41].xyz;
        u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat43 = max(u_xlat43, 6.10351562e-05);
        u_xlat6.x = inversesqrt(u_xlat43);
        u_xlat19.xyz = u_xlat4.xyz * u_xlat6.xxx;
        u_xlat7.x = float(1.0) / float(u_xlat43);
        u_xlat43 = u_xlat43 * _AdditionalLightsAttenuation[u_xlati41].x + _AdditionalLightsAttenuation[u_xlati41].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
        u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
        u_xlat43 = u_xlat43 * u_xlat7.x;
        u_xlat16_48 = dot(_AdditionalLightsSpotDir[u_xlati41].xyz, u_xlat19.xyz);
        u_xlat16_48 = u_xlat16_48 * _AdditionalLightsAttenuation[u_xlati41].z + _AdditionalLightsAttenuation[u_xlati41].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
        u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
        u_xlat43 = u_xlat43 * u_xlat16_48;
        u_xlat16_48 = dot(vs_TEXCOORD2.xyz, u_xlat19.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
        u_xlat16_48 = u_xlat43 * u_xlat16_48;
        u_xlat16_11.xyz = vec3(u_xlat16_48) * _AdditionalLightsColor[u_xlati41].xyz;
        u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xxx + vs_TEXCOORD3.xyz;
        u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat41 = max(u_xlat41, 1.17549435e-38);
        u_xlat16_48 = inversesqrt(u_xlat41);
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat16_48);
        u_xlat41 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat41 = min(max(u_xlat41, 0.0), 1.0);
#else
        u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
#endif
        u_xlat4.x = dot(u_xlat19.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
        u_xlat41 = u_xlat41 * u_xlat41;
        u_xlat41 = u_xlat41 * u_xlat14 + 1.00001001;
        u_xlat16_48 = u_xlat4.x * u_xlat4.x;
        u_xlat41 = u_xlat41 * u_xlat41;
        u_xlat4.x = max(u_xlat16_48, 0.100000001);
        u_xlat41 = u_xlat41 * u_xlat4.x;
        u_xlat41 = u_xlat1.x * u_xlat41;
        u_xlat41 = u_xlat16_47 / u_xlat41;
        u_xlat16_48 = u_xlat41 + -6.10351562e-05;
        u_xlat16_48 = max(u_xlat16_48, 0.0);
        u_xlat16_48 = min(u_xlat16_48, 100.0);
        u_xlat16_12.xyz = u_xlat16_9.xyz * vec3(u_xlat16_48) + u_xlat16_8.xyz;
        u_xlat16_10.xyz = u_xlat16_12.xyz * u_xlat16_11.xyz + u_xlat16_10.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb21 = unity_OrthoParams.w==0.0;
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _EmissionMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_18;
float u_xlat19;
vec3 u_xlat21;
float u_xlat25;
int u_xlati25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat37;
int u_xlati37;
bool u_xlatb37;
float u_xlat38;
int u_xlati38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
float u_xlat43;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture2D(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    u_xlat25 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb25 = u_xlat25<vs_TEXCOORD7.z;
    u_xlat16_41 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = (u_xlatb25) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_41 = u_xlat16_41 + u_xlat16_6.x;
    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb37 = vs_TEXCOORD7.z>=1.0;
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_41 = (u_xlatb25) ? 1.0 : u_xlat16_41;
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat16_6.x = u_xlat25 * u_xlat25;
    u_xlat16_18 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_6.x * u_xlat16_18 + u_xlat16_41;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_42 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
    u_xlat16_42 = (-u_xlat16_42) + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_8.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_8.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat10_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);
    u_xlat16_8.xyz = vec3(u_xlat16_42) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat7.xyz = u_xlat16_15.xxx * u_xlat16_8.xyz;
    u_xlat16_15.xyz = u_xlat16_6.xyz * u_xlat7.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
    u_xlat16_41 = u_xlat16_41 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat7.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat25);
    u_xlat7.xyz = vec3(u_xlat16_41) * u_xlat7.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat7.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_41 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_41, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_40 / u_xlat25;
    u_xlat16_41 = u_xlat25 + -6.10351562e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
    u_xlat16_15.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati25 = int(u_xlat16_41);
    u_xlat16_6.xyz = u_xlat16_15.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati25 ; u_xlati_loop_1++)
    {
        u_xlat38 = float(u_xlati_loop_1);
        u_xlatb7 = u_xlat38<2.0;
        u_xlat16_8.xy = (bool(u_xlatb7)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat19 = u_xlat38 + -2.0;
        u_xlat38 = (u_xlatb7) ? u_xlat38 : u_xlat19;
        u_xlatb38 = u_xlat38<1.0;
        u_xlat16_41 = (u_xlatb38) ? u_xlat16_8.x : u_xlat16_8.y;
        u_xlati38 = int(u_xlat16_41);
        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati38).www + _AdditionalLightsPositionDynamicIndex(u_xlati38).xyz;
        u_xlat43 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat43 = max(u_xlat43, 6.10351562e-05);
        u_xlat9 = inversesqrt(u_xlat43);
        u_xlat21.xyz = u_xlat7.xyz * vec3(u_xlat9);
        u_xlat10 = float(1.0) / u_xlat43;
        u_xlat43 = u_xlat43 * _AdditionalLightsAttenuationDynamicIndex(u_xlati38).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati38).y;
        u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
        u_xlat43 = u_xlat43 * u_xlat10;
        u_xlat16_41 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati38).xyz, u_xlat21.xyz);
        u_xlat16_41 = u_xlat16_41 * _AdditionalLightsAttenuationDynamicIndex(u_xlati38).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati38).w;
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
        u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
        u_xlat43 = u_xlat16_41 * u_xlat43;
        u_xlat16_41 = dot(vs_TEXCOORD2.xyz, u_xlat21.xyz);
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
        u_xlat16_41 = u_xlat16_41 * u_xlat43;
        u_xlat16_8.xyz = vec3(u_xlat16_41) * _AdditionalLightsColorDynamicIndex(u_xlati38).xyz;
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat9) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_41 = inversesqrt(u_xlat38);
        u_xlat7.xyz = vec3(u_xlat16_41) * u_xlat7.xyz;
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat7.xyz);
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
        u_xlat7.x = dot(u_xlat21.xyz, u_xlat7.xyz);
        u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat38 = u_xlat38 * u_xlat13 + 1.00001001;
        u_xlat16_41 = u_xlat7.x * u_xlat7.x;
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat7.x = max(u_xlat16_41, 0.100000001);
        u_xlat38 = u_xlat38 * u_xlat7.x;
        u_xlat38 = u_xlat1.x * u_xlat38;
        u_xlat38 = u_xlat16_40 / u_xlat38;
        u_xlat16_41 = u_xlat38 + -6.10351562e-05;
        u_xlat16_41 = max(u_xlat16_41, 0.0);
        u_xlat16_41 = min(u_xlat16_41, 100.0);
        u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_8.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
int u_xlati3;
bvec4 u_xlatb3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec4 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat16;
uint u_xlatu16;
float u_xlat18;
mediump float u_xlat16_20;
mediump vec3 u_xlat16_22;
float u_xlat27;
mediump float u_xlat16_27;
uint u_xlatu27;
bool u_xlatb27;
float u_xlat31;
mediump float u_xlat16_35;
float u_xlat41;
int u_xlati41;
uint u_xlatu41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlat16_4.w = (u_xlatb3.w) ? float(1.0) : float(0.0);
    u_xlat16_7.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_7.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_7.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_7.xyz = u_xlat16_4.yzw + u_xlat16_7.xyz;
    u_xlat16_4.yzw = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.x = dot(u_xlat16_4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_7.x = (-u_xlat16_7.x) + 4.0;
    u_xlatu41 = uint(u_xlat16_7.x);
    u_xlati41 = int(int(u_xlatu41) << 2);
    u_xlat3.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati41 + 1)].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati41].xyz * vs_TEXCOORD1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati41 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati41 + 3)].xyz;
    u_xlat16_7.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_20 = (-u_xlat16_7.x) + _Smoothness;
    u_xlat16_7.xzw = u_xlat1.xyz * u_xlat16_7.xxx;
    u_xlat16_8.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_47 = (-_Smoothness) + 1.0;
    u_xlat16_9.x = u_xlat16_47 * u_xlat16_47;
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0078125);
    u_xlat16_20 = u_xlat16_20 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_9.x * 4.0 + 2.0;
    u_xlat14 = u_xlat16_9.x * u_xlat16_9.x + -1.0;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_35 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_35 = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat3.z);
#else
    u_xlatb27 = 0.0>=u_xlat3.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb41 = !!(u_xlat3.z>=1.0);
#else
    u_xlatb41 = u_xlat3.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb41;
    u_xlat16_35 = (u_xlatb27) ? 1.0 : u_xlat16_35;
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_48 = u_xlat27 * u_xlat27;
    u_xlat16_10.x = (-u_xlat16_35) + 1.0;
    u_xlat16_35 = u_xlat16_48 * u_xlat16_10.x + u_xlat16_35;
    u_xlat16_48 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_48 = u_xlat16_48 + u_xlat16_48;
    u_xlat16_10.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_48)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_48 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
    u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
    u_xlat16_9.w = (-u_xlat16_48) + 1.0;
    u_xlat16_22.xz = u_xlat16_9.xw * u_xlat16_9.xw;
    u_xlat16_48 = u_xlat16_22.z * u_xlat16_22.z;
    u_xlat16_49 = (-u_xlat16_47) * 0.699999988 + 1.70000005;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_49;
    u_xlat16_47 = u_xlat16_47 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_47);
    u_xlat16_47 = u_xlat16_0.w + -1.0;
    u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
    u_xlat16_47 = max(u_xlat16_47, 0.0);
    u_xlat16_47 = log2(u_xlat16_47);
    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.y;
    u_xlat16_47 = exp2(u_xlat16_47);
    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.x;
    u_xlat16_10.xyz = u_xlat16_0.xyz * vec3(u_xlat16_47);
    u_xlat16_47 = u_xlat16_9.x * u_xlat16_9.x + 1.0;
    u_xlat16_47 = float(1.0) / u_xlat16_47;
    u_xlat16_11.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_20);
    u_xlat16_11.xyz = vec3(u_xlat16_48) * u_xlat16_11.xyz + u_xlat16_8.xyz;
    u_xlat3.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;
    u_xlat16_10.xyz = u_xlat3.xyz * u_xlat16_10.xyz;
    u_xlat16_10.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xzw + u_xlat16_10.xyz;
    u_xlat16_20 = u_xlat16_35 * unity_LightData.z;
    u_xlat16_47 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);
#else
    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * u_xlat16_47;
    u_xlat16_9.xzw = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat3.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat27);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_20);
    u_xlat27 = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat41 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat41 = min(max(u_xlat41, 0.0), 1.0);
#else
    u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat27 * u_xlat14 + 1.00001001;
    u_xlat16_20 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat41 = max(u_xlat16_20, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat27 = u_xlat1.x * u_xlat27;
    u_xlat27 = u_xlat16_22.x / u_xlat27;
    u_xlat16_20 = u_xlat27 + -6.10351562e-05;
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = min(u_xlat16_20, 100.0);
    u_xlat16_11.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_7.xzw;
    u_xlat16_9.xzw = u_xlat16_11.xyz * u_xlat16_9.xzw + u_xlat16_10.xyz;
    u_xlat16_20 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu27 =  uint(int(u_xlat16_20));
    u_xlat16_10.xyz = u_xlat16_9.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu27 ; u_xlatu_loop_1++)
    {
        u_xlati3 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu16 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_20 = dot(unity_LightIndices[int(u_xlatu16)], ImmCB_0[u_xlati3]);
        u_xlati3 = int(u_xlat16_20);
        u_xlat16.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;
        u_xlat5.x = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat5.x = max(u_xlat5.x, 6.10351562e-05);
        u_xlat18 = inversesqrt(u_xlat5.x);
        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat18);
        u_xlat31 = float(1.0) / float(u_xlat5.x);
        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
        u_xlat5.x = u_xlat5.x * u_xlat31;
        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat6.xyz);
        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
        u_xlat5.x = u_xlat5.x * u_xlat16_20;
        u_xlat16_20 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
        u_xlat16_20 = u_xlat5.x * u_xlat16_20;
        u_xlat16_11.xyz = vec3(u_xlat16_20) * _AdditionalLightsColor[u_xlati3].xyz;
        u_xlat3.xyz = u_xlat16.xyz * vec3(u_xlat18) + vs_TEXCOORD3.xyz;
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = max(u_xlat42, 1.17549435e-38);
        u_xlat16_20 = inversesqrt(u_xlat42);
        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_20);
        u_xlat42 = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
        u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
        u_xlat16.x = u_xlat42 * u_xlat42;
        u_xlat16.x = u_xlat16.x * u_xlat14 + 1.00001001;
        u_xlat16_20 = u_xlat3.x * u_xlat3.x;
        u_xlat3.x = u_xlat16.x * u_xlat16.x;
        u_xlat16.x = max(u_xlat16_20, 0.100000001);
        u_xlat3.x = u_xlat16.x * u_xlat3.x;
        u_xlat3.x = u_xlat1.x * u_xlat3.x;
        u_xlat3.x = u_xlat16_22.x / u_xlat3.x;
        u_xlat16_20 = u_xlat3.x + -6.10351562e-05;
        u_xlat16_20 = max(u_xlat16_20, 0.0);
        u_xlat16_20 = min(u_xlat16_20, 100.0);
        u_xlat16_12.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_7.xzw;
        u_xlat16_10.xyz = u_xlat16_12.xyz * u_xlat16_11.xyz + u_xlat16_10.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp sampler2D _EmissionMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
lowp vec3 u_xlat10_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
vec3 u_xlat18;
bool u_xlatb18;
float u_xlat21;
float u_xlat25;
int u_xlati25;
bool u_xlatb25;
mediump float u_xlat16_29;
float u_xlat30;
float u_xlat33;
float u_xlat38;
int u_xlati38;
bool u_xlatb38;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_43;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_3.xzw = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_40 = (-_Smoothness) + 1.0;
    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0078125);
    u_xlat16_15 = u_xlat16_15 + 1.0;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat1.x = u_xlat16_5.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_5.x * u_xlat16_5.x + -1.0;
    u_xlat25 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb25 = u_xlat25<vs_TEXCOORD7.z;
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_41 = (u_xlatb25) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_29 = u_xlat16_41 + u_xlat16_29;
    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb38 = vs_TEXCOORD7.z>=1.0;
    u_xlatb25 = u_xlatb25 || u_xlatb38;
    u_xlat16_29 = (u_xlatb25) ? 1.0 : u_xlat16_29;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat16_41 = u_xlat25 * u_xlat25;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_41 * u_xlat16_7.x + u_xlat16_29;
    u_xlat16_41 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_41)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
    u_xlat16_5.w = (-u_xlat16_41) + 1.0;
    u_xlat16_17.xz = u_xlat16_5.xw * u_xlat16_5.xw;
    u_xlat16_41 = u_xlat16_17.z * u_xlat16_17.z;
    u_xlat16_43 = (-u_xlat16_40) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat16_40 * u_xlat16_43;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_40);
    u_xlat16_40 = u_xlat10_0.w + -1.0;
    u_xlat16_40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.y;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(u_xlat16_40);
    u_xlat16_40 = u_xlat16_5.x * u_xlat16_5.x + 1.0;
    u_xlat16_40 = float(1.0) / u_xlat16_40;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_15);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat6.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xzw + u_xlat16_7.xyz;
    u_xlat16_15 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_40 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_40;
    u_xlat16_5.xzw = vec3(u_xlat16_15) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_15 = inversesqrt(u_xlat25);
    u_xlat6.xyz = vec3(u_xlat16_15) * u_xlat6.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat38 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_15 = u_xlat38 * u_xlat38;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat38 = max(u_xlat16_15, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat38;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_17.x / u_xlat25;
    u_xlat16_15 = u_xlat25 + -6.10351562e-05;
    u_xlat16_15 = max(u_xlat16_15, 0.0);
    u_xlat16_15 = min(u_xlat16_15, 100.0);
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
    u_xlat16_5.xzw = u_xlat16_8.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    u_xlat16_15 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati25 = int(u_xlat16_15);
    u_xlat16_7.xyz = u_xlat16_5.xzw;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati25 ; u_xlati_loop_1++)
    {
        u_xlat6.x = float(u_xlati_loop_1);
        u_xlatb18 = u_xlat6.x<2.0;
        u_xlat16_8.xy = (bool(u_xlatb18)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat30 = u_xlat6.x + -2.0;
        u_xlat6.x = (u_xlatb18) ? u_xlat6.x : u_xlat30;
        u_xlatb6 = u_xlat6.x<1.0;
        u_xlat16_15 = (u_xlatb6) ? u_xlat16_8.x : u_xlat16_8.y;
        u_xlati6 = int(u_xlat16_15);
        u_xlat18.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati6).www + _AdditionalLightsPositionDynamicIndex(u_xlati6).xyz;
        u_xlat9 = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat9 = max(u_xlat9, 6.10351562e-05);
        u_xlat21 = inversesqrt(u_xlat9);
        u_xlat10.xyz = u_xlat18.xyz * vec3(u_xlat21);
        u_xlat33 = float(1.0) / u_xlat9;
        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuationDynamicIndex(u_xlati6).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati6).y;
        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
        u_xlat9 = u_xlat9 * u_xlat33;
        u_xlat16_15 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati6).xyz, u_xlat10.xyz);
        u_xlat16_15 = u_xlat16_15 * _AdditionalLightsAttenuationDynamicIndex(u_xlati6).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati6).w;
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
        u_xlat16_15 = u_xlat16_15 * u_xlat16_15;
        u_xlat9 = u_xlat16_15 * u_xlat9;
        u_xlat16_15 = dot(vs_TEXCOORD2.xyz, u_xlat10.xyz);
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
        u_xlat16_15 = u_xlat16_15 * u_xlat9;
        u_xlat16_8.xyz = vec3(u_xlat16_15) * _AdditionalLightsColorDynamicIndex(u_xlati6).xyz;
        u_xlat6.xyz = u_xlat18.xyz * vec3(u_xlat21) + vs_TEXCOORD3.xyz;
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = max(u_xlat42, 1.17549435e-38);
        u_xlat16_15 = inversesqrt(u_xlat42);
        u_xlat6.xyz = vec3(u_xlat16_15) * u_xlat6.xyz;
        u_xlat42 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
        u_xlat6.x = dot(u_xlat10.xyz, u_xlat6.xyz);
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
        u_xlat18.x = u_xlat42 * u_xlat42;
        u_xlat18.x = u_xlat18.x * u_xlat13 + 1.00001001;
        u_xlat16_15 = u_xlat6.x * u_xlat6.x;
        u_xlat6.x = u_xlat18.x * u_xlat18.x;
        u_xlat18.x = max(u_xlat16_15, 0.100000001);
        u_xlat6.x = u_xlat18.x * u_xlat6.x;
        u_xlat6.x = u_xlat1.x * u_xlat6.x;
        u_xlat6.x = u_xlat16_17.x / u_xlat6.x;
        u_xlat16_15 = u_xlat6.x + -6.10351562e-05;
        u_xlat16_15 = max(u_xlat16_15, 0.0);
        u_xlat16_15 = min(u_xlat16_15, 100.0);
        u_xlat16_11.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
        u_xlat16_7.xyz = u_xlat16_11.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
int u_xlati2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
uint u_xlatu14;
mediump vec3 u_xlat16_15;
float u_xlat17;
mediump float u_xlat16_21;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat29;
float u_xlat37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat38;
mediump float u_xlat16_39;
mediump float u_xlat16_43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14.x;
        u_xlat14.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14.x;
        u_xlat14.x = u_xlat14.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb2 = lessThan(u_xlat2, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_4.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_4.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.w = (u_xlatb2.w) ? float(1.0) : float(0.0);
    u_xlat16_15.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_15.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_15.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_15.xyz = u_xlat16_15.xyz + u_xlat16_4.yzw;
    u_xlat16_4.yzw = max(u_xlat16_15.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_15.x = dot(u_xlat16_4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_15.x = (-u_xlat16_15.x) + 4.0;
    u_xlatu37 = uint(u_xlat16_15.x);
    u_xlati37 = int(int(u_xlatu37) << 2);
    u_xlat2.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 1)].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati37].xyz * vs_TEXCOORD1.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 3)].xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_8.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_43 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_44 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_44 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_44;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=u_xlat2.z);
#else
    u_xlatb25 = 0.0>=u_xlat2.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat2.z>=1.0);
#else
    u_xlatb37 = u_xlat2.z>=1.0;
#endif
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_44 = (u_xlatb25) ? 1.0 : u_xlat16_44;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat25 * u_xlat25;
    u_xlat16_21 = (-u_xlat16_44) + 1.0;
    u_xlat16_44 = u_xlat16_9.x * u_xlat16_21 + u_xlat16_44;
    u_xlat16_9.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_9.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_45 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
    u_xlat16_45 = (-u_xlat16_45) + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_10.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_10.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_27);
    u_xlat16_10.xyz = vec3(u_xlat16_45) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = u_xlat16_15.xxx * u_xlat16_10.xyz;
    u_xlat16_15.xyz = u_xlat2.xyz * u_xlat16_9.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_15.xyz;
    u_xlat16_44 = u_xlat16_44 * unity_LightData.z;
    u_xlat16_9.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_44 = u_xlat16_44 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_44) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_44 = inversesqrt(u_xlat25);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_44);
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_44 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_44, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_43 / u_xlat25;
    u_xlat16_44 = u_xlat25 + -6.10351562e-05;
    u_xlat16_44 = max(u_xlat16_44, 0.0);
    u_xlat16_44 = min(u_xlat16_44, 100.0);
    u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_44) + u_xlat16_7.xyz;
    u_xlat16_15.xyz = u_xlat16_10.xyz * u_xlat16_9.xyz + u_xlat16_15.xyz;
    u_xlat16_44 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_44));
    u_xlat16_9.xyz = u_xlat16_15.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu14 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_44 = dot(unity_LightIndices[int(u_xlatu14)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_44);
        u_xlat14.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat5.x = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat5.x = max(u_xlat5.x, 6.10351562e-05);
        u_xlat17 = inversesqrt(u_xlat5.x);
        u_xlat6.xyz = u_xlat14.xyz * vec3(u_xlat17);
        u_xlat29 = float(1.0) / float(u_xlat5.x);
        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
        u_xlat5.x = u_xlat5.x * u_xlat29;
        u_xlat16_44 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat6.xyz);
        u_xlat16_44 = u_xlat16_44 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
        u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
        u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
        u_xlat5.x = u_xlat5.x * u_xlat16_44;
        u_xlat16_44 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
        u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
        u_xlat16_44 = u_xlat5.x * u_xlat16_44;
        u_xlat16_10.xyz = vec3(u_xlat16_44) * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat2.xyz = u_xlat14.xyz * vec3(u_xlat17) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_44 = inversesqrt(u_xlat38);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_44);
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
        u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
        u_xlat14.x = u_xlat38 * u_xlat38;
        u_xlat14.x = u_xlat14.x * u_xlat13 + 1.00001001;
        u_xlat16_44 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat14.x * u_xlat14.x;
        u_xlat14.x = max(u_xlat16_44, 0.100000001);
        u_xlat2.x = u_xlat14.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_43 / u_xlat2.x;
        u_xlat16_44 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_44 = max(u_xlat16_44, 0.0);
        u_xlat16_44 = min(u_xlat16_44, 100.0);
        u_xlat16_11.xyz = u_xlat16_8.xyz * vec3(u_xlat16_44) + u_xlat16_7.xyz;
        u_xlat16_9.xyz = u_xlat16_11.xyz * u_xlat16_10.xyz + u_xlat16_9.xyz;
    }
    SV_Target0.xyz = u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb21 = unity_OrthoParams.w==0.0;
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
vec3 u_xlat13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_17;
float u_xlat19;
float u_xlat23;
int u_xlati23;
bool u_xlatb23;
float u_xlat24;
mediump float u_xlat16_25;
float u_xlat30;
float u_xlat34;
int u_xlati34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture2D(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13.x;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13.x;
        u_xlat13.x = u_xlat13.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_37 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    u_xlat23 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb23 = u_xlat23<vs_TEXCOORD7.z;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = (u_xlatb23) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_38 = u_xlat16_38 + u_xlat16_6.x;
    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb34 = vs_TEXCOORD7.z>=1.0;
    u_xlatb23 = u_xlatb34 || u_xlatb23;
    u_xlat16_38 = (u_xlatb23) ? 1.0 : u_xlat16_38;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat16_6.x = u_xlat23 * u_xlat23;
    u_xlat16_17 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_6.x * u_xlat16_17 + u_xlat16_38;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_39 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
    u_xlat16_39 = (-u_xlat16_39) + 1.0;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_7.x;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat10_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_25);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_38 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_38 = u_xlat34 * u_xlat34;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat34 = max(u_xlat16_38, 0.100000001);
    u_xlat23 = u_xlat34 * u_xlat23;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_37 / u_xlat23;
    u_xlat16_38 = u_xlat23 + -6.10351562e-05;
    u_xlat16_38 = max(u_xlat16_38, 0.0);
    u_xlat16_38 = min(u_xlat16_38, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
    u_xlat16_14.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati23 = int(u_xlat16_38);
    u_xlat16_6.xyz = u_xlat16_14.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati23 ; u_xlati_loop_1++)
    {
        u_xlat2.x = float(u_xlati_loop_1);
        u_xlatb13 = u_xlat2.x<2.0;
        u_xlat16_7.xy = (bool(u_xlatb13)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat24 = u_xlat2.x + -2.0;
        u_xlat2.x = (u_xlatb13) ? u_xlat2.x : u_xlat24;
        u_xlatb2.x = u_xlat2.x<1.0;
        u_xlat16_38 = (u_xlatb2.x) ? u_xlat16_7.x : u_xlat16_7.y;
        u_xlati2 = int(u_xlat16_38);
        u_xlat13.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati2).www + _AdditionalLightsPositionDynamicIndex(u_xlati2).xyz;
        u_xlat8 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat8 = max(u_xlat8, 6.10351562e-05);
        u_xlat19 = inversesqrt(u_xlat8);
        u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat19);
        u_xlat30 = float(1.0) / u_xlat8;
        u_xlat8 = u_xlat8 * _AdditionalLightsAttenuationDynamicIndex(u_xlati2).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati2).y;
        u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
        u_xlat8 = u_xlat8 * u_xlat30;
        u_xlat16_38 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati2).xyz, u_xlat9.xyz);
        u_xlat16_38 = u_xlat16_38 * _AdditionalLightsAttenuationDynamicIndex(u_xlati2).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati2).w;
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
        u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
        u_xlat8 = u_xlat16_38 * u_xlat8;
        u_xlat16_38 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
        u_xlat16_38 = u_xlat16_38 * u_xlat8;
        u_xlat16_7.xyz = vec3(u_xlat16_38) * _AdditionalLightsColorDynamicIndex(u_xlati2).xyz;
        u_xlat2.xyz = u_xlat13.xyz * vec3(u_xlat19) + vs_TEXCOORD3.xyz;
        u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat35 = max(u_xlat35, 1.17549435e-38);
        u_xlat16_38 = inversesqrt(u_xlat35);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
        u_xlat35 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
        u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
        u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat13.x = u_xlat35 * u_xlat35;
        u_xlat13.x = u_xlat13.x * u_xlat12 + 1.00001001;
        u_xlat16_38 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat13.x * u_xlat13.x;
        u_xlat13.x = max(u_xlat16_38, 0.100000001);
        u_xlat2.x = u_xlat13.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_37 / u_xlat2.x;
        u_xlat16_38 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_38 = max(u_xlat16_38, 0.0);
        u_xlat16_38 = min(u_xlat16_38, 100.0);
        u_xlat16_10.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
int u_xlati2;
uint u_xlatu2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec4 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_18;
mediump vec3 u_xlat16_20;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
mediump float u_xlat16_32;
float u_xlat38;
float u_xlat40;
mediump float u_xlat16_43;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat2.w = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb2 = lessThan(u_xlat2, _CascadeShadowSplitSphereRadii);
    u_xlat16_3.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_3.w = (u_xlatb2.w) ? float(1.0) : float(0.0);
    u_xlat16_6.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_3.yzw + u_xlat16_6.xyz;
    u_xlat16_3.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu2 = uint(u_xlat16_6.x);
    u_xlati2 = int(int(u_xlatu2) << 2);
    u_xlat14.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 1)].xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati2].xyz * vs_TEXCOORD1.xxx + u_xlat14.xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat14.xyz;
    u_xlat2.xyz = u_xlat14.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 3)].xyz;
    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_18 = (-u_xlat16_6.x) + _Smoothness;
    u_xlat16_6.xzw = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat16_7.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_43 = (-_Smoothness) + 1.0;
    u_xlat16_8.x = u_xlat16_43 * u_xlat16_43;
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0078125);
    u_xlat16_18 = u_xlat16_18 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_8.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_8.x * u_xlat16_8.x + -1.0;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_32 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=u_xlat2.z);
#else
    u_xlatb25 = 0.0>=u_xlat2.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat2.z>=1.0);
#else
    u_xlatb2.x = u_xlat2.z>=1.0;
#endif
    u_xlatb25 = u_xlatb25 || u_xlatb2.x;
    u_xlat16_32 = (u_xlatb25) ? 1.0 : u_xlat16_32;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_44 = u_xlat25 * u_xlat25;
    u_xlat16_9.x = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_44 * u_xlat16_9.x + u_xlat16_32;
    u_xlat16_44 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_44 = u_xlat16_44 + u_xlat16_44;
    u_xlat16_9.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_44)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_44 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_44 = min(max(u_xlat16_44, 0.0), 1.0);
#else
    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
#endif
    u_xlat16_8.w = (-u_xlat16_44) + 1.0;
    u_xlat16_20.xz = u_xlat16_8.xw * u_xlat16_8.xw;
    u_xlat16_44 = u_xlat16_20.z * u_xlat16_20.z;
    u_xlat16_45 = (-u_xlat16_43) * 0.699999988 + 1.70000005;
    u_xlat16_43 = u_xlat16_43 * u_xlat16_45;
    u_xlat16_43 = u_xlat16_43 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_43);
    u_xlat16_43 = u_xlat16_0.w + -1.0;
    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
    u_xlat16_43 = max(u_xlat16_43, 0.0);
    u_xlat16_43 = log2(u_xlat16_43);
    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.y;
    u_xlat16_43 = exp2(u_xlat16_43);
    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_43);
    u_xlat16_43 = u_xlat16_8.x * u_xlat16_8.x + 1.0;
    u_xlat16_43 = float(1.0) / u_xlat16_43;
    u_xlat16_10.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_18);
    u_xlat16_10.xyz = vec3(u_xlat16_44) * u_xlat16_10.xyz + u_xlat16_7.xyz;
    u_xlat2.xyz = vec3(u_xlat16_43) * u_xlat16_10.xyz;
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xzw + u_xlat16_9.xyz;
    u_xlat16_18 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_43 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_43 = min(max(u_xlat16_43, 0.0), 1.0);
#else
    u_xlat16_43 = clamp(u_xlat16_43, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_18 * u_xlat16_43;
    u_xlat16_8.xzw = vec3(u_xlat16_18) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_18 = inversesqrt(u_xlat25);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_18);
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_18 = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat2.x = max(u_xlat16_18, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_20.x / u_xlat25;
    u_xlat16_18 = u_xlat25 + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_6.xzw;
    u_xlat16_8.xzw = u_xlat16_10.xyz * u_xlat16_8.xzw + u_xlat16_9.xyz;
    u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_18));
    u_xlat16_9.xyz = u_xlat16_8.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati14 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu26 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_18 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0[u_xlati14]);
        u_xlati14 = int(u_xlat16_18);
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati14].www + _AdditionalLightsPosition[u_xlati14].xyz;
        u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat26 = max(u_xlat26, 6.10351562e-05);
        u_xlat38 = inversesqrt(u_xlat26);
        u_xlat5.xyz = vec3(u_xlat38) * u_xlat4.xyz;
        u_xlat40 = float(1.0) / float(u_xlat26);
        u_xlat26 = u_xlat26 * _AdditionalLightsAttenuation[u_xlati14].x + _AdditionalLightsAttenuation[u_xlati14].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
        u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
        u_xlat26 = u_xlat26 * u_xlat40;
        u_xlat16_18 = dot(_AdditionalLightsSpotDir[u_xlati14].xyz, u_xlat5.xyz);
        u_xlat16_18 = u_xlat16_18 * _AdditionalLightsAttenuation[u_xlati14].z + _AdditionalLightsAttenuation[u_xlati14].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
        u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
        u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
        u_xlat26 = u_xlat26 * u_xlat16_18;
        u_xlat16_18 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
        u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
        u_xlat16_18 = u_xlat26 * u_xlat16_18;
        u_xlat16_10.xyz = vec3(u_xlat16_18) * _AdditionalLightsColor[u_xlati14].xyz;
        u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat38) + vs_TEXCOORD3.xyz;
        u_xlat4.x = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat4.x = max(u_xlat4.x, 1.17549435e-38);
        u_xlat16_18 = inversesqrt(u_xlat4.x);
        u_xlat14.xyz = u_xlat14.xyz * vec3(u_xlat16_18);
        u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
        u_xlat14.x = dot(u_xlat5.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
        u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
        u_xlat26 = u_xlat4.x * u_xlat4.x;
        u_xlat26 = u_xlat26 * u_xlat13 + 1.00001001;
        u_xlat16_18 = u_xlat14.x * u_xlat14.x;
        u_xlat14.x = u_xlat26 * u_xlat26;
        u_xlat26 = max(u_xlat16_18, 0.100000001);
        u_xlat14.x = u_xlat26 * u_xlat14.x;
        u_xlat14.x = u_xlat1.x * u_xlat14.x;
        u_xlat14.x = u_xlat16_20.x / u_xlat14.x;
        u_xlat16_18 = u_xlat14.x + -6.10351562e-05;
        u_xlat16_18 = max(u_xlat16_18, 0.0);
        u_xlat16_18 = min(u_xlat16_18, 100.0);
        u_xlat16_11.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_6.xzw;
        u_xlat16_9.xyz = u_xlat16_11.xyz * u_xlat16_10.xyz + u_xlat16_9.xyz;
    }
    SV_Target0.xyz = u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_LightIndices[2];
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
mediump vec3 u_xlat16_15;
vec3 u_xlat16;
int u_xlati16;
bool u_xlatb16;
float u_xlat23;
int u_xlati23;
bool u_xlatb23;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_39;
float u_xlat41;
#define UNITY_DYNAMIC_INDEX_ES2 0






vec4 _AdditionalLightsPositionDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsPosition[i];
#else
#define d_ar _AdditionalLightsPosition
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsAttenuationDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsAttenuation[i];
#else
#define d_ar _AdditionalLightsAttenuation
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsSpotDirDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsSpotDir[i];
#else
#define d_ar _AdditionalLightsSpotDir
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}


mediump vec4 _AdditionalLightsColorDynamicIndex(int i){
#if UNITY_DYNAMIC_INDEX_ES2
    return _AdditionalLightsColor[i];
#else
#define d_ar _AdditionalLightsColor
    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15];
    return d_ar[0];
#undef d_ar
#endif
}

void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_13 = (-u_xlat16_2.x) + _Smoothness;
    u_xlat16_2.xzw = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_36 = (-_Smoothness) + 1.0;
    u_xlat16_4.x = u_xlat16_36 * u_xlat16_36;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0078125);
    u_xlat16_13 = u_xlat16_13 + 1.0;
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
    u_xlat1.x = u_xlat16_4.x * 4.0 + 2.0;
    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x + -1.0;
    u_xlat23 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb23 = u_xlat23<vs_TEXCOORD7.z;
    u_xlat16_26 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = (u_xlatb23) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_26 = u_xlat16_37 + u_xlat16_26;
    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
    u_xlatb23 = u_xlatb23 || u_xlatb5;
    u_xlat16_26 = (u_xlatb23) ? 1.0 : u_xlat16_26;
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat16_37 = u_xlat23 * u_xlat23;
    u_xlat16_6.x = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = u_xlat16_37 * u_xlat16_6.x + u_xlat16_26;
    u_xlat16_37 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_37)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_37 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
    u_xlat16_4.w = (-u_xlat16_37) + 1.0;
    u_xlat16_15.xz = u_xlat16_4.xw * u_xlat16_4.xw;
    u_xlat16_37 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat16_39 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_36 = u_xlat16_36 * u_xlat16_39;
    u_xlat16_36 = u_xlat16_36 * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_36);
    u_xlat16_36 = u_xlat10_0.w + -1.0;
    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_36);
    u_xlat16_36 = u_xlat16_4.x * u_xlat16_4.x + 1.0;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_13);
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_3.xyz;
    u_xlat5.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat5.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xzw + u_xlat16_6.xyz;
    u_xlat16_13 = u_xlat16_26 * unity_LightData.z;
    u_xlat16_36 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
    u_xlat16_13 = u_xlat16_13 * u_xlat16_36;
    u_xlat16_4.xzw = vec3(u_xlat16_13) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_13 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_13) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_13 = u_xlat5.x * u_xlat5.x;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat5.x = max(u_xlat16_13, 0.100000001);
    u_xlat23 = u_xlat23 * u_xlat5.x;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_15.x / u_xlat23;
    u_xlat16_13 = u_xlat23 + -6.10351562e-05;
    u_xlat16_13 = max(u_xlat16_13, 0.0);
    u_xlat16_13 = min(u_xlat16_13, 100.0);
    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
    u_xlat16_4.xzw = u_xlat16_7.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    u_xlat16_13 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati23 = int(u_xlat16_13);
    u_xlat16_6.xyz = u_xlat16_4.xzw;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati23 ; u_xlati_loop_1++)
    {
        u_xlat16.x = float(u_xlati_loop_1);
        u_xlatb27 = u_xlat16.x<2.0;
        u_xlat16_7.xy = (bool(u_xlatb27)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
        u_xlat38 = u_xlat16.x + -2.0;
        u_xlat16.x = (u_xlatb27) ? u_xlat16.x : u_xlat38;
        u_xlatb16 = u_xlat16.x<1.0;
        u_xlat16_13 = (u_xlatb16) ? u_xlat16_7.x : u_xlat16_7.y;
        u_xlati16 = int(u_xlat16_13);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati16).www + _AdditionalLightsPositionDynamicIndex(u_xlati16).xyz;
        u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat27 = max(u_xlat27, 6.10351562e-05);
        u_xlat38 = inversesqrt(u_xlat27);
        u_xlat9.xyz = vec3(u_xlat38) * u_xlat8.xyz;
        u_xlat41 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 * _AdditionalLightsAttenuationDynamicIndex(u_xlati16).x + _AdditionalLightsAttenuationDynamicIndex(u_xlati16).y;
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
        u_xlat27 = u_xlat27 * u_xlat41;
        u_xlat16_13 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati16).xyz, u_xlat9.xyz);
        u_xlat16_13 = u_xlat16_13 * _AdditionalLightsAttenuationDynamicIndex(u_xlati16).z + _AdditionalLightsAttenuationDynamicIndex(u_xlati16).w;
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
        u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
        u_xlat27 = u_xlat16_13 * u_xlat27;
        u_xlat16_13 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
        u_xlat16_13 = u_xlat16_13 * u_xlat27;
        u_xlat16_7.xyz = vec3(u_xlat16_13) * _AdditionalLightsColorDynamicIndex(u_xlati16).xyz;
        u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat38) + vs_TEXCOORD3.xyz;
        u_xlat8.x = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
        u_xlat16_13 = inversesqrt(u_xlat8.x);
        u_xlat16.xyz = vec3(u_xlat16_13) * u_xlat16.xyz;
        u_xlat8.x = dot(vs_TEXCOORD2.xyz, u_xlat16.xyz);
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
        u_xlat16.x = dot(u_xlat9.xyz, u_xlat16.xyz);
        u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
        u_xlat27 = u_xlat8.x * u_xlat8.x;
        u_xlat27 = u_xlat27 * u_xlat12 + 1.00001001;
        u_xlat16_13 = u_xlat16.x * u_xlat16.x;
        u_xlat16.x = u_xlat27 * u_xlat27;
        u_xlat27 = max(u_xlat16_13, 0.100000001);
        u_xlat16.x = u_xlat27 * u_xlat16.x;
        u_xlat16.x = u_xlat1.x * u_xlat16.x;
        u_xlat16.x = u_xlat16_15.x / u_xlat16.x;
        u_xlat16_13 = u_xlat16.x + -6.10351562e-05;
        u_xlat16_13 = max(u_xlat16_13, 0.0);
        u_xlat16_13 = min(u_xlat16_13, 100.0);
        u_xlat16_10.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_22;
float u_xlat25;
mediump float u_xlat16_25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
mediump float u_xlat16_39;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);
    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);
    u_xlat16_15.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_15.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_15.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_15.xyz = u_xlat16_15.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_15.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_15.x = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_15.x = (-u_xlat16_15.x) + 4.0;
    u_xlatu37 = uint(u_xlat16_15.x);
    u_xlati37 = int(u_xlatu37) << 2;
    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati37].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 3)].xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_9.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_44 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_45 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_45 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_45;
    u_xlatb25 = 0.0>=u_xlat4.z;
    u_xlatb37 = u_xlat4.z>=1.0;
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_45 = (u_xlatb25) ? 1.0 : u_xlat16_45;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat16_10.x = u_xlat25 * u_xlat25;
    u_xlat16_22 = (-u_xlat16_45) + 1.0;
    u_xlat16_45 = u_xlat16_10.x * u_xlat16_22 + u_xlat16_45;
    u_xlat16_10.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_10.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_46 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
    u_xlat16_46 = (-u_xlat16_46) + 1.0;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_11.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_10.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_27);
    u_xlat16_11.xyz = vec3(u_xlat16_46) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_15.xxx * u_xlat16_11.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz * u_xlat16_10.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_8.xyz + u_xlat16_15.xyz;
    u_xlat16_45 = u_xlat16_45 * unity_LightData.z;
    u_xlat16_10.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
    u_xlat16_45 = u_xlat16_45 * u_xlat16_10.x;
    u_xlat16_10.xyz = vec3(u_xlat16_45) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_45 = inversesqrt(u_xlat25);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat16_45);
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat13 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_45 = u_xlat37 * u_xlat37;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat25 = max(u_xlat16_45, 0.100000001);
    u_xlat13 = u_xlat25 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat16_44 / u_xlat1.x;
    u_xlat16_44 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_44 = max(u_xlat16_44, 0.0);
    u_xlat16_44 = min(u_xlat16_44, 100.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vec3(u_xlat16_44) + u_xlat16_8.xyz;
    u_xlat16_15.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz + u_xlat16_15.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_15.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb21 = unity_OrthoParams.w==0.0;
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _EmissionMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_15;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_21;
float u_xlat28;
bool u_xlatb28;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture2D(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat11 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat11;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat11;
        u_xlat11 = u_xlat11 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat11) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat28 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat28 * u_xlat2.x;
    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_12.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_21 = (-u_xlat16_12.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_12.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.x = (-_Smoothness) + 1.0;
    u_xlat16_30 = u_xlat16_12.x * u_xlat16_12.x;
    u_xlat16_30 = max(u_xlat16_30, 0.0078125);
    u_xlat16_31 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_21 = u_xlat16_21 + 1.0;
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
    u_xlat1.x = u_xlat16_30 * 4.0 + 2.0;
    u_xlat10 = u_xlat16_30 * u_xlat16_30 + -1.0;
    u_xlat19 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb19 = u_xlat19<vs_TEXCOORD7.z;
    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = (u_xlatb19) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_32 = u_xlat16_32 + u_xlat16_6.x;
    u_xlatb19 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb28 = vs_TEXCOORD7.z>=1.0;
    u_xlatb19 = u_xlatb28 || u_xlatb19;
    u_xlat16_32 = (u_xlatb19) ? 1.0 : u_xlat16_32;
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat19 = u_xlat19 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat16_6.x = u_xlat19 * u_xlat19;
    u_xlat16_15 = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_6.x * u_xlat16_15 + u_xlat16_32;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_33 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_8.x = (-u_xlat16_12.x) * 0.699999988 + 1.70000005;
    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_8.x;
    u_xlat16_12.x = u_xlat16_12.x * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_12.x);
    u_xlat16_12.x = u_xlat10_0.w + -1.0;
    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlat16_12.x = log2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.y;
    u_xlat16_12.x = exp2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_12.xxx;
    u_xlat16_12.x = u_xlat16_30 * u_xlat16_30 + 1.0;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_21);
    u_xlat16_8.xyz = vec3(u_xlat16_33) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat7.xyz = u_xlat16_12.xxx * u_xlat16_8.xyz;
    u_xlat16_12.xyz = u_xlat16_6.xyz * u_xlat7.xyz;
    u_xlat16_12.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_12.xyz;
    u_xlat16_32 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;
    u_xlat7.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat19 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat19 = max(u_xlat19, 1.17549435e-38);
    u_xlat16_32 = inversesqrt(u_xlat19);
    u_xlat7.xyz = vec3(u_xlat16_32) * u_xlat7.xyz;
    u_xlat19 = dot(vs_TEXCOORD2.xyz, u_xlat7.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat19 * u_xlat10 + 1.00001001;
    u_xlat16_32 = u_xlat28 * u_xlat28;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat19 = max(u_xlat16_32, 0.100000001);
    u_xlat10 = u_xlat19 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat1.x = u_xlat16_31 / u_xlat1.x;
    u_xlat16_31 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_31 = max(u_xlat16_31, 0.0);
    u_xlat16_31 = min(u_xlat16_31, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;
    u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_12.xyz;
    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat15;
mediump float u_xlat16_16;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    u_xlatb22 = 0.0>=u_xlat1.z;
    u_xlatb3 = u_xlat1.z>=1.0;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb8 = u_xlatb22 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb8) ? 1.0 : u_xlat16_2.x;
    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_16 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_16 * u_xlat16_9 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_23 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_4.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_23)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_23 = (-_Smoothness) + 1.0;
    u_xlat16_25 = (-u_xlat16_23) * 0.699999988 + 1.70000005;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_25;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat16_23 = max(u_xlat16_23, 0.0078125);
    u_xlat16_25 = u_xlat16_25 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_25);
    u_xlat16_4.x = u_xlat16_0.w + -1.0;
    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_25 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_12.x = (-u_xlat16_5.x) + _Smoothness;
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.xyz = u_xlat16_12.xxx + (-u_xlat16_6.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_25) * u_xlat16_12.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_23 + 1.0;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat1.xyz = u_xlat16_12.xyz * vec3(u_xlat16_25);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat0.xyz;
    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = max(u_xlat22, 1.17549435e-38);
    u_xlat16_25 = inversesqrt(u_xlat22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_25);
    u_xlat22 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_25 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = max(u_xlat16_25, 0.100000001);
    u_xlat8.x = u_xlat22 * u_xlat22;
    u_xlat15 = u_xlat16_23 * u_xlat16_23 + -1.0;
    u_xlat8.x = u_xlat8.x * u_xlat15 + 1.00001001;
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat1.x = u_xlat1.x * u_xlat8.x;
    u_xlat8.x = u_xlat16_23 * 4.0 + 2.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = u_xlat16_23 / u_xlat1.x;
    u_xlat16_23 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = min(u_xlat16_23, 100.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform lowp sampler2D _EmissionMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
bool u_xlatb5;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump float u_xlat16_13;
float u_xlat17;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
float u_xlat23;
void main()
{
    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb0 = u_xlat0.x<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_7 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_7;
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb6 = vs_TEXCOORD7.z>=1.0;
    u_xlatb0 = u_xlatb6 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat16_13 = u_xlat0.x * u_xlat0.x;
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_7 + u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_7 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_19 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_2.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_19)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_19 = (-_Smoothness) + 1.0;
    u_xlat16_20 = (-u_xlat16_19) * 0.699999988 + 1.70000005;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_20;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 0.0078125);
    u_xlat16_20 = u_xlat16_20 * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_20);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_20 = (-u_xlat16_20) + 1.0;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_9.x = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = u_xlat16_9.xxx + (-u_xlat16_4.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_19 + 1.0;
    u_xlat16_20 = float(1.0) / u_xlat16_20;
    u_xlat5.xyz = u_xlat16_9.xyz * vec3(u_xlat16_20);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat0.xyz;
    u_xlat16_2.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_19 * u_xlat16_19 + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_19 * 4.0 + 2.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_19 / u_xlat5.x;
    u_xlat16_19 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_19 = max(u_xlat16_19, 0.0);
    u_xlat16_19 = min(u_xlat16_19, 100.0);
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat10_5.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * _EmissionColor.xyz + u_xlat16_1.xyz;
    u_xlatb5 = _Surface==1.0;
    SV_Target0.w = (u_xlatb5) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat12;
float u_xlat13;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_20;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_25;
float u_xlat34;
int u_xlati34;
uint u_xlatu34;
bool u_xlatb34;
mediump float u_xlat16_36;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13;
        u_xlat13 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13;
        u_xlat13 = u_xlat13 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb2 = lessThan(u_xlat2, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_4.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_4.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.w = (u_xlatb2.w) ? float(1.0) : float(0.0);
    u_xlat16_14.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_14.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_14.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_14.xyz = u_xlat16_14.xyz + u_xlat16_4.yzw;
    u_xlat16_4.yzw = max(u_xlat16_14.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_14.x = dot(u_xlat16_4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_14.x = (-u_xlat16_14.x) + 4.0;
    u_xlatu34 = uint(u_xlat16_14.x);
    u_xlati34 = int(u_xlatu34) << 2;
    u_xlat2.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati34 + 1)].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati34].xyz * vs_TEXCOORD1.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati34 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati34 + 3)].xyz;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_8.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_40 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_41 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_41 = u_xlat16_23 * _MainLightShadowParams.x + u_xlat16_41;
    u_xlatb23 = 0.0>=u_xlat2.z;
    u_xlatb34 = u_xlat2.z>=1.0;
    u_xlatb23 = u_xlatb34 || u_xlatb23;
    u_xlat16_41 = (u_xlatb23) ? 1.0 : u_xlat16_41;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat16_9.x = u_xlat23 * u_xlat23;
    u_xlat16_20 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_9.x * u_xlat16_20 + u_xlat16_41;
    u_xlat16_9.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_9.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_42 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
    u_xlat16_42 = (-u_xlat16_42) + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_10.x = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_10.x;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_25);
    u_xlat16_10.xyz = vec3(u_xlat16_42) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_10.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_9.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_14.xyz;
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_9.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_41);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat12 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_41 = u_xlat34 * u_xlat34;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat23 = max(u_xlat16_41, 0.100000001);
    u_xlat12 = u_xlat23 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat12;
    u_xlat1.x = u_xlat16_40 / u_xlat1.x;
    u_xlat16_40 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = min(u_xlat16_40, 100.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_14.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb21 = unity_OrthoParams.w==0.0;
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	vec4 _SoftParticleFadeParams;
uniform 	vec4 _CameraFadeParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_14;
float u_xlat17;
bool u_xlatb17;
mediump float u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture2D(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat10 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10;
        u_xlat10 = u_xlat10 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat10) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat25 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat25 * u_xlat2.x;
    u_xlat16_11.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_19 = (-u_xlat16_11.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_11.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.x = (-_Smoothness) + 1.0;
    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_27 = max(u_xlat16_27, 0.0078125);
    u_xlat16_28 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_19 = u_xlat16_19 + 1.0;
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat1.x = u_xlat16_27 * 4.0 + 2.0;
    u_xlat9 = u_xlat16_27 * u_xlat16_27 + -1.0;
    u_xlat17 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb17 = u_xlat17<vs_TEXCOORD7.z;
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = (u_xlatb17) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_29 = u_xlat16_29 + u_xlat16_6.x;
    u_xlatb17 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb25 = vs_TEXCOORD7.z>=1.0;
    u_xlatb17 = u_xlatb25 || u_xlatb17;
    u_xlat16_29 = (u_xlatb17) ? 1.0 : u_xlat16_29;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = u_xlat17 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat16_6.x = u_xlat17 * u_xlat17;
    u_xlat16_14 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_6.x * u_xlat16_14 + u_xlat16_29;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_7.x = (-u_xlat16_11.x) * 0.699999988 + 1.70000005;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_7.x;
    u_xlat16_11.x = u_xlat16_11.x * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_11.x);
    u_xlat16_11.x = u_xlat10_0.w + -1.0;
    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = log2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.y;
    u_xlat16_11.x = exp2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_11.xxx;
    u_xlat16_11.x = u_xlat16_27 * u_xlat16_27 + 1.0;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_19);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_11.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_11.xyz;
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = max(u_xlat17, 1.17549435e-38);
    u_xlat16_29 = inversesqrt(u_xlat17);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_29);
    u_xlat17 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat17 * u_xlat9 + 1.00001001;
    u_xlat16_29 = u_xlat25 * u_xlat25;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat17 = max(u_xlat16_29, 0.100000001);
    u_xlat9 = u_xlat17 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat1.x = u_xlat16_28 / u_xlat1.x;
    u_xlat16_28 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat15;
mediump float u_xlat16_16;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(u_xlatu1) << 2;
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    u_xlatb22 = 0.0>=u_xlat1.z;
    u_xlatb3 = u_xlat1.z>=1.0;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb8 = u_xlatb22 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb8) ? 1.0 : u_xlat16_2.x;
    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_16 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_16 * u_xlat16_9 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_23 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_4.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_23)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_23 = (-_Smoothness) + 1.0;
    u_xlat16_25 = (-u_xlat16_23) * 0.699999988 + 1.70000005;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_25;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat16_23 = max(u_xlat16_23, 0.0078125);
    u_xlat16_25 = u_xlat16_25 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_25);
    u_xlat16_4.x = u_xlat16_0.w + -1.0;
    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_25 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_12.x = (-u_xlat16_5.x) + _Smoothness;
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.xyz = u_xlat16_12.xxx + (-u_xlat16_6.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_25) * u_xlat16_12.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_23 + 1.0;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat1.xyz = u_xlat16_12.xyz * vec3(u_xlat16_25);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat0.xyz;
    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = max(u_xlat22, 1.17549435e-38);
    u_xlat16_25 = inversesqrt(u_xlat22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_25);
    u_xlat22 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16_25 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = max(u_xlat16_25, 0.100000001);
    u_xlat8.x = u_xlat22 * u_xlat22;
    u_xlat15 = u_xlat16_23 * u_xlat16_23 + -1.0;
    u_xlat8.x = u_xlat8.x * u_xlat15 + 1.00001001;
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat1.x = u_xlat1.x * u_xlat8.x;
    u_xlat8.x = u_xlat16_23 * 4.0 + 2.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = u_xlat16_23 / u_xlat1.x;
    u_xlat16_23 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = min(u_xlat16_23, 100.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlatb18 = unity_OrthoParams.w==0.0;
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump float _Metallic;
uniform 	mediump float _Smoothness;
uniform 	mediump float _Surface;
uniform lowp sampler2D _BaseMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec3 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump float u_xlat16_13;
float u_xlat17;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
float u_xlat23;
void main()
{
    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD7.xy).x;
    u_xlatb0 = u_xlat0.x<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_7 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_7;
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb6 = vs_TEXCOORD7.z>=1.0;
    u_xlatb0 = u_xlatb6 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat16_13 = u_xlat0.x * u_xlat0.x;
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_7 + u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_7 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_19 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_2.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_19)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_19 = (-_Smoothness) + 1.0;
    u_xlat16_20 = (-u_xlat16_19) * 0.699999988 + 1.70000005;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_20;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 0.0078125);
    u_xlat16_20 = u_xlat16_20 * 6.0;
    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_20);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_20 = (-u_xlat16_20) + 1.0;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_9.x = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _BaseColor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = u_xlat16_9.xxx + (-u_xlat16_4.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_19 + 1.0;
    u_xlat16_20 = float(1.0) / u_xlat16_20;
    u_xlat5.xyz = u_xlat16_9.xyz * vec3(u_xlat16_20);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat0.xyz;
    u_xlat16_2.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_19 * u_xlat16_19 + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_19 * 4.0 + 2.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_19 / u_xlat5.x;
    u_xlat16_19 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_19 = max(u_xlat16_19, 0.0);
    u_xlat16_19 = min(u_xlat16_19, 100.0);
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlatb5 = _Surface==1.0;
    SV_Target0.w = (u_xlatb5) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_22;
float u_xlat25;
mediump float u_xlat16_25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
mediump float u_xlat16_39;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);
    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);
    u_xlat16_15.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_15.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_15.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_15.xyz = u_xlat16_15.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_15.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_15.x = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_15.x = (-u_xlat16_15.x) + 4.0;
    u_xlatu37 = uint(u_xlat16_15.x);
    u_xlati37 = int(int(u_xlatu37) << 2);
    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati37].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 3)].xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_9.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_44 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_45 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_45 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_45;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb25 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb37 = u_xlat4.z>=1.0;
#endif
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_45 = (u_xlatb25) ? 1.0 : u_xlat16_45;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat25 * u_xlat25;
    u_xlat16_22 = (-u_xlat16_45) + 1.0;
    u_xlat16_45 = u_xlat16_10.x * u_xlat16_22 + u_xlat16_45;
    u_xlat16_10.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_10.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_46 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_46 = (-u_xlat16_46) + 1.0;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_11.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_10.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_27);
    u_xlat16_11.xyz = vec3(u_xlat16_46) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_15.xxx * u_xlat16_11.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz * u_xlat16_10.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_8.xyz + u_xlat16_15.xyz;
    u_xlat16_45 = u_xlat16_45 * unity_LightData.z;
    u_xlat16_10.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat16_45 * u_xlat16_10.x;
    u_xlat16_10.xyz = vec3(u_xlat16_45) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_45 = inversesqrt(u_xlat25);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat16_45);
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat13 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_45 = u_xlat37 * u_xlat37;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat25 = max(u_xlat16_45, 0.100000001);
    u_xlat13 = u_xlat25 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat16_44 / u_xlat1.x;
    u_xlat16_44 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_44 = max(u_xlat16_44, 0.0);
    u_xlat16_44 = min(u_xlat16_44, 100.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vec3(u_xlat16_44) + u_xlat16_8.xyz;
    u_xlat16_15.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz + u_xlat16_15.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_15.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat15;
mediump float u_xlat16_16;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb22 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb8 = u_xlatb22 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb8) ? 1.0 : u_xlat16_2.x;
    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_16 * u_xlat16_9 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_23 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_4.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_23)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_23 = (-_Smoothness) + 1.0;
    u_xlat16_25 = (-u_xlat16_23) * 0.699999988 + 1.70000005;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_25;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat16_23 = max(u_xlat16_23, 0.0078125);
    u_xlat16_25 = u_xlat16_25 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_25);
    u_xlat16_4.x = u_xlat16_0.w + -1.0;
    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_25 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_12.x = (-u_xlat16_5.x) + _Smoothness;
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.xyz = u_xlat16_12.xxx + (-u_xlat16_6.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_25) * u_xlat16_12.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_23 + 1.0;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat1.xyz = u_xlat16_12.xyz * vec3(u_xlat16_25);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat0.xyz;
    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = max(u_xlat22, 1.17549435e-38);
    u_xlat16_25 = inversesqrt(u_xlat22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_25);
    u_xlat22 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = max(u_xlat16_25, 0.100000001);
    u_xlat8.x = u_xlat22 * u_xlat22;
    u_xlat15 = u_xlat16_23 * u_xlat16_23 + -1.0;
    u_xlat8.x = u_xlat8.x * u_xlat15 + 1.00001001;
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat1.x = u_xlat1.x * u_xlat8.x;
    u_xlat8.x = u_xlat16_23 * 4.0 + 2.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = u_xlat16_23 / u_xlat1.x;
    u_xlat16_23 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = min(u_xlat16_23, 100.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat12;
float u_xlat13;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_20;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_25;
float u_xlat34;
int u_xlati34;
uint u_xlatu34;
bool u_xlatb34;
mediump float u_xlat16_36;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13;
        u_xlat13 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13;
        u_xlat13 = u_xlat13 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb2 = lessThan(u_xlat2, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_4.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_4.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.w = (u_xlatb2.w) ? float(1.0) : float(0.0);
    u_xlat16_14.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_14.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_14.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_14.xyz = u_xlat16_14.xyz + u_xlat16_4.yzw;
    u_xlat16_4.yzw = max(u_xlat16_14.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_14.x = dot(u_xlat16_4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_14.x = (-u_xlat16_14.x) + 4.0;
    u_xlatu34 = uint(u_xlat16_14.x);
    u_xlati34 = int(int(u_xlatu34) << 2);
    u_xlat2.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati34 + 1)].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati34].xyz * vs_TEXCOORD1.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati34 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati34 + 3)].xyz;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_8.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_40 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_41 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_41 = u_xlat16_23 * _MainLightShadowParams.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.0>=u_xlat2.z);
#else
    u_xlatb23 = 0.0>=u_xlat2.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat2.z>=1.0);
#else
    u_xlatb34 = u_xlat2.z>=1.0;
#endif
    u_xlatb23 = u_xlatb34 || u_xlatb23;
    u_xlat16_41 = (u_xlatb23) ? 1.0 : u_xlat16_41;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat23 * u_xlat23;
    u_xlat16_20 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_9.x * u_xlat16_20 + u_xlat16_41;
    u_xlat16_9.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_9.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_42 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat16_42 = (-u_xlat16_42) + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_10.x = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_10.x;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_25);
    u_xlat16_10.xyz = vec3(u_xlat16_42) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_10.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_9.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_14.xyz;
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_9.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_41);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat12 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_41 = u_xlat34 * u_xlat34;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat23 = max(u_xlat16_41, 0.100000001);
    u_xlat12 = u_xlat23 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat12;
    u_xlat1.x = u_xlat16_40 / u_xlat1.x;
    u_xlat16_40 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = min(u_xlat16_40, 100.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_14.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat15;
mediump float u_xlat16_16;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb22 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb8 = u_xlatb22 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb8) ? 1.0 : u_xlat16_2.x;
    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_16 * u_xlat16_9 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_23 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_4.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_23)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_23 = (-_Smoothness) + 1.0;
    u_xlat16_25 = (-u_xlat16_23) * 0.699999988 + 1.70000005;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_25;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat16_23 = max(u_xlat16_23, 0.0078125);
    u_xlat16_25 = u_xlat16_25 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_25);
    u_xlat16_4.x = u_xlat16_0.w + -1.0;
    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_25 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_12.x = (-u_xlat16_5.x) + _Smoothness;
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.xyz = u_xlat16_12.xxx + (-u_xlat16_6.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_25) * u_xlat16_12.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_23 + 1.0;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat1.xyz = u_xlat16_12.xyz * vec3(u_xlat16_25);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat0.xyz;
    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = max(u_xlat22, 1.17549435e-38);
    u_xlat16_25 = inversesqrt(u_xlat22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_25);
    u_xlat22 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = max(u_xlat16_25, 0.100000001);
    u_xlat8.x = u_xlat22 * u_xlat22;
    u_xlat15 = u_xlat16_23 * u_xlat16_23 + -1.0;
    u_xlat8.x = u_xlat8.x * u_xlat15 + 1.00001001;
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat1.x = u_xlat1.x * u_xlat8.x;
    u_xlat8.x = u_xlat16_23 * 4.0 + 2.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = u_xlat16_23 / u_xlat1.x;
    u_xlat16_23 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = min(u_xlat16_23, 100.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_22;
float u_xlat25;
mediump float u_xlat16_25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
mediump float u_xlat16_39;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);
    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);
    u_xlat16_15.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_15.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_15.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_15.xyz = u_xlat16_15.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_15.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_15.x = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_15.x = (-u_xlat16_15.x) + 4.0;
    u_xlatu37 = uint(u_xlat16_15.x);
    u_xlati37 = int(int(u_xlatu37) << 2);
    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati37].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati37 + 3)].xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_9.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_44 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_45 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_45 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_45;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb25 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb37 = u_xlat4.z>=1.0;
#endif
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_45 = (u_xlatb25) ? 1.0 : u_xlat16_45;
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat25 * u_xlat25;
    u_xlat16_22 = (-u_xlat16_45) + 1.0;
    u_xlat16_45 = u_xlat16_10.x * u_xlat16_22 + u_xlat16_45;
    u_xlat16_10.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_10.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_46 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_46 = (-u_xlat16_46) + 1.0;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_11.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_10.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_27);
    u_xlat16_11.xyz = vec3(u_xlat16_46) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_15.xxx * u_xlat16_11.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz * u_xlat16_10.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_8.xyz + u_xlat16_15.xyz;
    u_xlat16_45 = u_xlat16_45 * unity_LightData.z;
    u_xlat16_10.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_45 = u_xlat16_45 * u_xlat16_10.x;
    u_xlat16_10.xyz = vec3(u_xlat16_45) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_45 = inversesqrt(u_xlat25);
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat16_45);
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat13 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_45 = u_xlat37 * u_xlat37;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat25 = max(u_xlat16_45, 0.100000001);
    u_xlat13 = u_xlat25 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat16_44 / u_xlat1.x;
    u_xlat16_44 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_44 = max(u_xlat16_44, 0.0);
    u_xlat16_44 = min(u_xlat16_44, 100.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vec3(u_xlat16_44) + u_xlat16_8.xyz;
    u_xlat16_15.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz + u_xlat16_15.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_15.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat15;
mediump float u_xlat16_16;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb22 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb8 = u_xlatb22 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb8) ? 1.0 : u_xlat16_2.x;
    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_16 * u_xlat16_9 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_23 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_4.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_23)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_23 = (-_Smoothness) + 1.0;
    u_xlat16_25 = (-u_xlat16_23) * 0.699999988 + 1.70000005;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_25;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat16_23 = max(u_xlat16_23, 0.0078125);
    u_xlat16_25 = u_xlat16_25 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_25);
    u_xlat16_4.x = u_xlat16_0.w + -1.0;
    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_25 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_12.x = (-u_xlat16_5.x) + _Smoothness;
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.xyz = u_xlat16_12.xxx + (-u_xlat16_6.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_25) * u_xlat16_12.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_23 + 1.0;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat1.xyz = u_xlat16_12.xyz * vec3(u_xlat16_25);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat0.xyz;
    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = max(u_xlat22, 1.17549435e-38);
    u_xlat16_25 = inversesqrt(u_xlat22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_25);
    u_xlat22 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = max(u_xlat16_25, 0.100000001);
    u_xlat8.x = u_xlat22 * u_xlat22;
    u_xlat15 = u_xlat16_23 * u_xlat16_23 + -1.0;
    u_xlat8.x = u_xlat8.x * u_xlat15 + 1.00001001;
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat1.x = u_xlat1.x * u_xlat8.x;
    u_xlat8.x = u_xlat16_23 * 4.0 + 2.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = u_xlat16_23 / u_xlat1.x;
    u_xlat16_23 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = min(u_xlat16_23, 100.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat12;
float u_xlat13;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_20;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_25;
float u_xlat34;
int u_xlati34;
uint u_xlatu34;
bool u_xlatb34;
mediump float u_xlat16_36;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13;
        u_xlat13 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13;
        u_xlat13 = u_xlat13 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb2 = lessThan(u_xlat2, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_4.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_4.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.w = (u_xlatb2.w) ? float(1.0) : float(0.0);
    u_xlat16_14.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_14.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_14.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_14.xyz = u_xlat16_14.xyz + u_xlat16_4.yzw;
    u_xlat16_4.yzw = max(u_xlat16_14.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_14.x = dot(u_xlat16_4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_14.x = (-u_xlat16_14.x) + 4.0;
    u_xlatu34 = uint(u_xlat16_14.x);
    u_xlati34 = int(int(u_xlatu34) << 2);
    u_xlat2.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati34 + 1)].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati34].xyz * vs_TEXCOORD1.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati34 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati34 + 3)].xyz;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_8.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_40 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_41 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_41 = u_xlat16_23 * _MainLightShadowParams.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.0>=u_xlat2.z);
#else
    u_xlatb23 = 0.0>=u_xlat2.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat2.z>=1.0);
#else
    u_xlatb34 = u_xlat2.z>=1.0;
#endif
    u_xlatb23 = u_xlatb34 || u_xlatb23;
    u_xlat16_41 = (u_xlatb23) ? 1.0 : u_xlat16_41;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat23 * u_xlat23;
    u_xlat16_20 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_9.x * u_xlat16_20 + u_xlat16_41;
    u_xlat16_9.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_9.x = u_xlat16_9.x + u_xlat16_9.x;
    u_xlat16_9.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_9.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_42 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
    u_xlat16_42 = (-u_xlat16_42) + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_10.x = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_10.x;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_25);
    u_xlat16_10.xyz = vec3(u_xlat16_42) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_10.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_9.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_14.xyz;
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_9.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_41);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat12 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_41 = u_xlat34 * u_xlat34;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat23 = max(u_xlat16_41, 0.100000001);
    u_xlat12 = u_xlat23 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat12;
    u_xlat1.x = u_xlat16_40 / u_xlat1.x;
    u_xlat16_40 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = min(u_xlat16_40, 100.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_14.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat15;
mediump float u_xlat16_16;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb22 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb8 = u_xlatb22 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb8) ? 1.0 : u_xlat16_2.x;
    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat16_16 * u_xlat16_9 + u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * unity_LightData.z;
    u_xlat16_9 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat16_23 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_4.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_23)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_23 = (-_Smoothness) + 1.0;
    u_xlat16_25 = (-u_xlat16_23) * 0.699999988 + 1.70000005;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_25;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat16_23 = max(u_xlat16_23, 0.0078125);
    u_xlat16_25 = u_xlat16_25 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_25);
    u_xlat16_4.x = u_xlat16_0.w + -1.0;
    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;
    u_xlat16_25 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_12.x = (-u_xlat16_5.x) + _Smoothness;
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.xyz = u_xlat16_12.xxx + (-u_xlat16_6.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_25) * u_xlat16_12.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = u_xlat16_23 * u_xlat16_23 + 1.0;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat1.xyz = u_xlat16_12.xyz * vec3(u_xlat16_25);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat0.xyz;
    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = max(u_xlat22, 1.17549435e-38);
    u_xlat16_25 = inversesqrt(u_xlat22);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_25);
    u_xlat22 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = max(u_xlat16_25, 0.100000001);
    u_xlat8.x = u_xlat22 * u_xlat22;
    u_xlat15 = u_xlat16_23 * u_xlat16_23 + -1.0;
    u_xlat8.x = u_xlat8.x * u_xlat15 + 1.00001001;
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat1.x = u_xlat1.x * u_xlat8.x;
    u_xlat8.x = u_xlat16_23 * 4.0 + 2.0;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = u_xlat16_23 / u_xlat1.x;
    u_xlat16_23 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = min(u_xlat16_23, 100.0);
    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec4 vs_TEXCOORD7;
layout(location = 7) out highp vec3 vs_TEXCOORD8;
layout(location = 8) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb32;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
    vs_TEXCOORD7.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb32 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb32) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb32) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb32) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat2.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec4 vs_TEXCOORD7;
layout(location = 7) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
uint u_xlatu6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_19;
vec3 u_xlat21;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat38;
int u_xlati38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_43;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_41 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_41 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_41;
    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb37 = vs_TEXCOORD7.z>=1.0;
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_41 = (u_xlatb25) ? 1.0 : u_xlat16_41;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat16_7.x = u_xlat25 * u_xlat25;
    u_xlat16_19 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_7.x * u_xlat16_19 + u_xlat16_41;
    u_xlat16_7.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_7.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_43 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_43 = clamp(u_xlat16_43, 0.0, 1.0);
    u_xlat16_43 = (-u_xlat16_43) + 1.0;
    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;
    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;
    u_xlat16_8.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_8.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);
    u_xlat16_8.xyz = vec3(u_xlat16_43) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat6.xyz = u_xlat16_15.xxx * u_xlat16_8.xyz;
    u_xlat16_15.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
    u_xlat16_41 = u_xlat16_41 * u_xlat16_7.x;
    u_xlat16_7.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat25);
    u_xlat6.xyz = vec3(u_xlat16_41) * u_xlat6.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_41 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_41, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_40 / u_xlat25;
    u_xlat16_41 = u_xlat25 + -6.10351562e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
    u_xlat16_15.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_41));
    u_xlat16_7.xyz = u_xlat16_15.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati38 = int(u_xlatu_loop_1 & 3u);
        u_xlatu6 = u_xlatu_loop_1 >> 2u;
        u_xlat16_41 = dot(unity_LightIndices[int(u_xlatu6)], ImmCB_0[u_xlati38]);
        u_xlati38 = int(u_xlat16_41);
        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati38].www + _AdditionalLightsPosition[u_xlati38].xyz;
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = max(u_xlat42, 6.10351562e-05);
        u_xlat9 = inversesqrt(u_xlat42);
        u_xlat21.xyz = u_xlat6.xyz * vec3(u_xlat9);
        u_xlat10 = float(1.0) / float(u_xlat42);
        u_xlat42 = u_xlat42 * _AdditionalLightsAttenuation[u_xlati38].x + _AdditionalLightsAttenuation[u_xlati38].y;
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
        u_xlat42 = u_xlat42 * u_xlat10;
        u_xlat16_41 = dot(_AdditionalLightsSpotDir[u_xlati38].xyz, u_xlat21.xyz);
        u_xlat16_41 = u_xlat16_41 * _AdditionalLightsAttenuation[u_xlati38].z + _AdditionalLightsAttenuation[u_xlati38].w;
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
        u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
        u_xlat42 = u_xlat16_41 * u_xlat42;
        u_xlat16_41 = dot(vs_TEXCOORD2.xyz, u_xlat21.xyz);
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
        u_xlat16_41 = u_xlat16_41 * u_xlat42;
        u_xlat16_8.xyz = vec3(u_xlat16_41) * _AdditionalLightsColor[u_xlati38].xyz;
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat9) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_41 = inversesqrt(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat16_41) * u_xlat6.xyz;
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
        u_xlat6.x = dot(u_xlat21.xyz, u_xlat6.xyz);
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat38 = u_xlat38 * u_xlat13 + 1.00001001;
        u_xlat16_41 = u_xlat6.x * u_xlat6.x;
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat6.x = max(u_xlat16_41, 0.100000001);
        u_xlat38 = u_xlat38 * u_xlat6.x;
        u_xlat38 = u_xlat1.x * u_xlat38;
        u_xlat38 = u_xlat16_40 / u_xlat38;
        u_xlat16_41 = u_xlat38 + -6.10351562e-05;
        u_xlat16_41 = max(u_xlat16_41, 0.0);
        u_xlat16_41 = min(u_xlat16_41, 100.0);
        u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
        u_xlat16_7.xyz = u_xlat16_11.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD7;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat1.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat1.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat2.xyz;
    vs_TEXCOORD7.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_8.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_8.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD7;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
vec3 u_xlat18;
uint u_xlatu18;
float u_xlat21;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
mediump float u_xlat16_29;
float u_xlat33;
float u_xlat38;
uint u_xlatu38;
bool u_xlatb38;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_43;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_3.xzw = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_40 = (-_Smoothness) + 1.0;
    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0078125);
    u_xlat16_15 = u_xlat16_15 + 1.0;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat1.x = u_xlat16_5.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_5.x * u_xlat16_5.x + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_29 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_29;
    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb38 = vs_TEXCOORD7.z>=1.0;
    u_xlatb25 = u_xlatb25 || u_xlatb38;
    u_xlat16_29 = (u_xlatb25) ? 1.0 : u_xlat16_29;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat16_41 = u_xlat25 * u_xlat25;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_41 * u_xlat16_7.x + u_xlat16_29;
    u_xlat16_41 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_41)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
    u_xlat16_5.w = (-u_xlat16_41) + 1.0;
    u_xlat16_17.xz = u_xlat16_5.xw * u_xlat16_5.xw;
    u_xlat16_41 = u_xlat16_17.z * u_xlat16_17.z;
    u_xlat16_43 = (-u_xlat16_40) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat16_40 * u_xlat16_43;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_40);
    u_xlat16_40 = u_xlat16_0.w + -1.0;
    u_xlat16_40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.y;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_40);
    u_xlat16_40 = u_xlat16_5.x * u_xlat16_5.x + 1.0;
    u_xlat16_40 = float(1.0) / u_xlat16_40;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_15);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat6.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xzw + u_xlat16_7.xyz;
    u_xlat16_15 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_40 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_40;
    u_xlat16_5.xzw = vec3(u_xlat16_15) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_15 = inversesqrt(u_xlat25);
    u_xlat6.xyz = vec3(u_xlat16_15) * u_xlat6.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat38 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_15 = u_xlat38 * u_xlat38;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat38 = max(u_xlat16_15, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat38;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_17.x / u_xlat25;
    u_xlat16_15 = u_xlat25 + -6.10351562e-05;
    u_xlat16_15 = max(u_xlat16_15, 0.0);
    u_xlat16_15 = min(u_xlat16_15, 100.0);
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
    u_xlat16_5.xzw = u_xlat16_8.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    u_xlat16_15 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_15));
    u_xlat16_7.xyz = u_xlat16_5.xzw;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati6 = int(u_xlatu_loop_1 & 3u);
        u_xlatu18 = u_xlatu_loop_1 >> 2u;
        u_xlat16_15 = dot(unity_LightIndices[int(u_xlatu18)], ImmCB_0[u_xlati6]);
        u_xlati6 = int(u_xlat16_15);
        u_xlat18.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati6].www + _AdditionalLightsPosition[u_xlati6].xyz;
        u_xlat9 = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat9 = max(u_xlat9, 6.10351562e-05);
        u_xlat21 = inversesqrt(u_xlat9);
        u_xlat10.xyz = u_xlat18.xyz * vec3(u_xlat21);
        u_xlat33 = float(1.0) / float(u_xlat9);
        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati6].x + _AdditionalLightsAttenuation[u_xlati6].y;
        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
        u_xlat9 = u_xlat9 * u_xlat33;
        u_xlat16_15 = dot(_AdditionalLightsSpotDir[u_xlati6].xyz, u_xlat10.xyz);
        u_xlat16_15 = u_xlat16_15 * _AdditionalLightsAttenuation[u_xlati6].z + _AdditionalLightsAttenuation[u_xlati6].w;
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
        u_xlat16_15 = u_xlat16_15 * u_xlat16_15;
        u_xlat9 = u_xlat16_15 * u_xlat9;
        u_xlat16_15 = dot(vs_TEXCOORD2.xyz, u_xlat10.xyz);
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
        u_xlat16_15 = u_xlat16_15 * u_xlat9;
        u_xlat16_8.xyz = vec3(u_xlat16_15) * _AdditionalLightsColor[u_xlati6].xyz;
        u_xlat6.xyz = u_xlat18.xyz * vec3(u_xlat21) + vs_TEXCOORD3.xyz;
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = max(u_xlat42, 1.17549435e-38);
        u_xlat16_15 = inversesqrt(u_xlat42);
        u_xlat6.xyz = vec3(u_xlat16_15) * u_xlat6.xyz;
        u_xlat42 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
        u_xlat6.x = dot(u_xlat10.xyz, u_xlat6.xyz);
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
        u_xlat18.x = u_xlat42 * u_xlat42;
        u_xlat18.x = u_xlat18.x * u_xlat13 + 1.00001001;
        u_xlat16_15 = u_xlat6.x * u_xlat6.x;
        u_xlat6.x = u_xlat18.x * u_xlat18.x;
        u_xlat18.x = max(u_xlat16_15, 0.100000001);
        u_xlat6.x = u_xlat18.x * u_xlat6.x;
        u_xlat6.x = u_xlat1.x * u_xlat6.x;
        u_xlat6.x = u_xlat16_17.x / u_xlat6.x;
        u_xlat16_15 = u_xlat6.x + -6.10351562e-05;
        u_xlat16_15 = max(u_xlat16_15, 0.0);
        u_xlat16_15 = min(u_xlat16_15, 100.0);
        u_xlat16_11.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
        u_xlat16_7.xyz = u_xlat16_11.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec4 vs_TEXCOORD7;
layout(location = 7) out highp vec3 vs_TEXCOORD8;
layout(location = 8) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb32;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
    vs_TEXCOORD7.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb32 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb32) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb32) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb32) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat2.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec4 vs_TEXCOORD7;
layout(location = 7) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
vec3 u_xlat13;
uint u_xlatu13;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_17;
float u_xlat19;
float u_xlat23;
mediump float u_xlat16_23;
uint u_xlatu23;
bool u_xlatb23;
mediump float u_xlat16_25;
float u_xlat30;
float u_xlat34;
uint u_xlatu34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13.x;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13.x;
        u_xlat13.x = u_xlat13.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_37 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_23 * _MainLightShadowParams.x + u_xlat16_38;
    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb34 = vs_TEXCOORD7.z>=1.0;
    u_xlatb23 = u_xlatb34 || u_xlatb23;
    u_xlat16_38 = (u_xlatb23) ? 1.0 : u_xlat16_38;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat16_6.x = u_xlat23 * u_xlat23;
    u_xlat16_17 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_6.x * u_xlat16_17 + u_xlat16_38;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_39 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
    u_xlat16_39 = (-u_xlat16_39) + 1.0;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_7.x;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_25);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_38 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_38 = u_xlat34 * u_xlat34;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat34 = max(u_xlat16_38, 0.100000001);
    u_xlat23 = u_xlat34 * u_xlat23;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_37 / u_xlat23;
    u_xlat16_38 = u_xlat23 + -6.10351562e-05;
    u_xlat16_38 = max(u_xlat16_38, 0.0);
    u_xlat16_38 = min(u_xlat16_38, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
    u_xlat16_14.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_38));
    u_xlat16_6.xyz = u_xlat16_14.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(u_xlatu_loop_1 & 3u);
        u_xlatu13 = u_xlatu_loop_1 >> 2u;
        u_xlat16_38 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_38);
        u_xlat13.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat8 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat8 = max(u_xlat8, 6.10351562e-05);
        u_xlat19 = inversesqrt(u_xlat8);
        u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat19);
        u_xlat30 = float(1.0) / float(u_xlat8);
        u_xlat8 = u_xlat8 * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
        u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
        u_xlat8 = u_xlat8 * u_xlat30;
        u_xlat16_38 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat9.xyz);
        u_xlat16_38 = u_xlat16_38 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
        u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
        u_xlat8 = u_xlat16_38 * u_xlat8;
        u_xlat16_38 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
        u_xlat16_38 = u_xlat16_38 * u_xlat8;
        u_xlat16_7.xyz = vec3(u_xlat16_38) * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat2.xyz = u_xlat13.xyz * vec3(u_xlat19) + vs_TEXCOORD3.xyz;
        u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat35 = max(u_xlat35, 1.17549435e-38);
        u_xlat16_38 = inversesqrt(u_xlat35);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
        u_xlat35 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
        u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
        u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat13.x = u_xlat35 * u_xlat35;
        u_xlat13.x = u_xlat13.x * u_xlat12 + 1.00001001;
        u_xlat16_38 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat13.x * u_xlat13.x;
        u_xlat13.x = max(u_xlat16_38, 0.100000001);
        u_xlat2.x = u_xlat13.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_37 / u_xlat2.x;
        u_xlat16_38 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_38 = max(u_xlat16_38, 0.0);
        u_xlat16_38 = min(u_xlat16_38, 100.0);
        u_xlat16_10.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD7;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat1.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat1.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat2.xyz;
    vs_TEXCOORD7.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_8.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_8.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD7;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
uint u_xlatu5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
mediump vec3 u_xlat16_15;
vec3 u_xlat16;
int u_xlati16;
bool u_xlatb16;
float u_xlat23;
mediump float u_xlat16_23;
uint u_xlatu23;
bool u_xlatb23;
mediump float u_xlat16_26;
float u_xlat27;
uint u_xlatu27;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_39;
float u_xlat41;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_13 = (-u_xlat16_2.x) + _Smoothness;
    u_xlat16_2.xzw = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_36 = (-_Smoothness) + 1.0;
    u_xlat16_4.x = u_xlat16_36 * u_xlat16_36;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0078125);
    u_xlat16_13 = u_xlat16_13 + 1.0;
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
    u_xlat1.x = u_xlat16_4.x * 4.0 + 2.0;
    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_26 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_26 = u_xlat16_23 * _MainLightShadowParams.x + u_xlat16_26;
    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
    u_xlatb23 = u_xlatb23 || u_xlatb5;
    u_xlat16_26 = (u_xlatb23) ? 1.0 : u_xlat16_26;
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat16_37 = u_xlat23 * u_xlat23;
    u_xlat16_6.x = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = u_xlat16_37 * u_xlat16_6.x + u_xlat16_26;
    u_xlat16_37 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_37)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_37 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
    u_xlat16_4.w = (-u_xlat16_37) + 1.0;
    u_xlat16_15.xz = u_xlat16_4.xw * u_xlat16_4.xw;
    u_xlat16_37 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat16_39 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_36 = u_xlat16_36 * u_xlat16_39;
    u_xlat16_36 = u_xlat16_36 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_36);
    u_xlat16_36 = u_xlat16_0.w + -1.0;
    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_36);
    u_xlat16_36 = u_xlat16_4.x * u_xlat16_4.x + 1.0;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_13);
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_3.xyz;
    u_xlat5.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat5.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xzw + u_xlat16_6.xyz;
    u_xlat16_13 = u_xlat16_26 * unity_LightData.z;
    u_xlat16_36 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
    u_xlat16_13 = u_xlat16_13 * u_xlat16_36;
    u_xlat16_4.xzw = vec3(u_xlat16_13) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_13 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_13) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_13 = u_xlat5.x * u_xlat5.x;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat5.x = max(u_xlat16_13, 0.100000001);
    u_xlat23 = u_xlat23 * u_xlat5.x;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_15.x / u_xlat23;
    u_xlat16_13 = u_xlat23 + -6.10351562e-05;
    u_xlat16_13 = max(u_xlat16_13, 0.0);
    u_xlat16_13 = min(u_xlat16_13, 100.0);
    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
    u_xlat16_4.xzw = u_xlat16_7.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    u_xlat16_13 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_13));
    u_xlat16_6.xyz = u_xlat16_4.xzw;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati16 = int(u_xlatu_loop_1 & 3u);
        u_xlatu27 = u_xlatu_loop_1 >> 2u;
        u_xlat16_13 = dot(unity_LightIndices[int(u_xlatu27)], ImmCB_0[u_xlati16]);
        u_xlati16 = int(u_xlat16_13);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati16].www + _AdditionalLightsPosition[u_xlati16].xyz;
        u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat27 = max(u_xlat27, 6.10351562e-05);
        u_xlat38 = inversesqrt(u_xlat27);
        u_xlat9.xyz = vec3(u_xlat38) * u_xlat8.xyz;
        u_xlat41 = float(1.0) / float(u_xlat27);
        u_xlat27 = u_xlat27 * _AdditionalLightsAttenuation[u_xlati16].x + _AdditionalLightsAttenuation[u_xlati16].y;
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
        u_xlat27 = u_xlat27 * u_xlat41;
        u_xlat16_13 = dot(_AdditionalLightsSpotDir[u_xlati16].xyz, u_xlat9.xyz);
        u_xlat16_13 = u_xlat16_13 * _AdditionalLightsAttenuation[u_xlati16].z + _AdditionalLightsAttenuation[u_xlati16].w;
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
        u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
        u_xlat27 = u_xlat16_13 * u_xlat27;
        u_xlat16_13 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
        u_xlat16_13 = u_xlat16_13 * u_xlat27;
        u_xlat16_7.xyz = vec3(u_xlat16_13) * _AdditionalLightsColor[u_xlati16].xyz;
        u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat38) + vs_TEXCOORD3.xyz;
        u_xlat8.x = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
        u_xlat16_13 = inversesqrt(u_xlat8.x);
        u_xlat16.xyz = vec3(u_xlat16_13) * u_xlat16.xyz;
        u_xlat8.x = dot(vs_TEXCOORD2.xyz, u_xlat16.xyz);
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
        u_xlat16.x = dot(u_xlat9.xyz, u_xlat16.xyz);
        u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
        u_xlat27 = u_xlat8.x * u_xlat8.x;
        u_xlat27 = u_xlat27 * u_xlat12 + 1.00001001;
        u_xlat16_13 = u_xlat16.x * u_xlat16.x;
        u_xlat16.x = u_xlat27 * u_xlat27;
        u_xlat27 = max(u_xlat16_13, 0.100000001);
        u_xlat16.x = u_xlat27 * u_xlat16.x;
        u_xlat16.x = u_xlat1.x * u_xlat16.x;
        u_xlat16.x = u_xlat16_15.x / u_xlat16.x;
        u_xlat16_13 = u_xlat16.x + -6.10351562e-05;
        u_xlat16_13 = max(u_xlat16_13, 0.0);
        u_xlat16_13 = min(u_xlat16_13, 100.0);
        u_xlat16_10.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb22 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb22) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb22) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb22) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat5.w = u_xlat7.x * 0.5;
    u_xlat5.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat5.zz + u_xlat5.xw;
    u_xlat7.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat7.xyz;
    vs_TEXCOORD7.xyz = u_xlat7.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
uint u_xlatu6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_19;
vec3 u_xlat21;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat38;
int u_xlati38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_43;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_41 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_41 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb37 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_41 = (u_xlatb25) ? 1.0 : u_xlat16_41;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat25 * u_xlat25;
    u_xlat16_19 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_7.x * u_xlat16_19 + u_xlat16_41;
    u_xlat16_7.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_7.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_43 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_43 = min(max(u_xlat16_43, 0.0), 1.0);
#else
    u_xlat16_43 = clamp(u_xlat16_43, 0.0, 1.0);
#endif
    u_xlat16_43 = (-u_xlat16_43) + 1.0;
    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;
    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;
    u_xlat16_8.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_8.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);
    u_xlat16_8.xyz = vec3(u_xlat16_43) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat6.xyz = u_xlat16_15.xxx * u_xlat16_8.xyz;
    u_xlat16_15.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_41 = u_xlat16_41 * u_xlat16_7.x;
    u_xlat16_7.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat25);
    u_xlat6.xyz = vec3(u_xlat16_41) * u_xlat6.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_41 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_41, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_40 / u_xlat25;
    u_xlat16_41 = u_xlat25 + -6.10351562e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
    u_xlat16_15.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_41));
    u_xlat16_7.xyz = u_xlat16_15.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati38 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu6 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_41 = dot(unity_LightIndices[int(u_xlatu6)], ImmCB_0[u_xlati38]);
        u_xlati38 = int(u_xlat16_41);
        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati38].www + _AdditionalLightsPosition[u_xlati38].xyz;
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = max(u_xlat42, 6.10351562e-05);
        u_xlat9 = inversesqrt(u_xlat42);
        u_xlat21.xyz = u_xlat6.xyz * vec3(u_xlat9);
        u_xlat10 = float(1.0) / float(u_xlat42);
        u_xlat42 = u_xlat42 * _AdditionalLightsAttenuation[u_xlati38].x + _AdditionalLightsAttenuation[u_xlati38].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
        u_xlat42 = u_xlat42 * u_xlat10;
        u_xlat16_41 = dot(_AdditionalLightsSpotDir[u_xlati38].xyz, u_xlat21.xyz);
        u_xlat16_41 = u_xlat16_41 * _AdditionalLightsAttenuation[u_xlati38].z + _AdditionalLightsAttenuation[u_xlati38].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
        u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
        u_xlat42 = u_xlat16_41 * u_xlat42;
        u_xlat16_41 = dot(vs_TEXCOORD2.xyz, u_xlat21.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
        u_xlat16_41 = u_xlat16_41 * u_xlat42;
        u_xlat16_8.xyz = vec3(u_xlat16_41) * _AdditionalLightsColor[u_xlati38].xyz;
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat9) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_41 = inversesqrt(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat16_41) * u_xlat6.xyz;
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
        u_xlat6.x = dot(u_xlat21.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat38 = u_xlat38 * u_xlat13 + 1.00001001;
        u_xlat16_41 = u_xlat6.x * u_xlat6.x;
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat6.x = max(u_xlat16_41, 0.100000001);
        u_xlat38 = u_xlat38 * u_xlat6.x;
        u_xlat38 = u_xlat1.x * u_xlat38;
        u_xlat38 = u_xlat16_40 / u_xlat38;
        u_xlat16_41 = u_xlat38 + -6.10351562e-05;
        u_xlat16_41 = max(u_xlat16_41, 0.0);
        u_xlat16_41 = min(u_xlat16_41, 100.0);
        u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
        u_xlat16_7.xyz = u_xlat16_11.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb19 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb19) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb19) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb19) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat6.xyz;
    vs_TEXCOORD7.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
vec3 u_xlat18;
uint u_xlatu18;
float u_xlat21;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
mediump float u_xlat16_29;
float u_xlat33;
float u_xlat38;
uint u_xlatu38;
bool u_xlatb38;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_43;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_3.xzw = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_40 = (-_Smoothness) + 1.0;
    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0078125);
    u_xlat16_15 = u_xlat16_15 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_5.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_5.x * u_xlat16_5.x + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_29 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb38 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb25 = u_xlatb25 || u_xlatb38;
    u_xlat16_29 = (u_xlatb25) ? 1.0 : u_xlat16_29;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_41 = u_xlat25 * u_xlat25;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_41 * u_xlat16_7.x + u_xlat16_29;
    u_xlat16_41 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_41)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_5.w = (-u_xlat16_41) + 1.0;
    u_xlat16_17.xz = u_xlat16_5.xw * u_xlat16_5.xw;
    u_xlat16_41 = u_xlat16_17.z * u_xlat16_17.z;
    u_xlat16_43 = (-u_xlat16_40) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat16_40 * u_xlat16_43;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_40);
    u_xlat16_40 = u_xlat16_0.w + -1.0;
    u_xlat16_40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.y;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_40);
    u_xlat16_40 = u_xlat16_5.x * u_xlat16_5.x + 1.0;
    u_xlat16_40 = float(1.0) / u_xlat16_40;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_15);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat6.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xzw + u_xlat16_7.xyz;
    u_xlat16_15 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_40 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * u_xlat16_40;
    u_xlat16_5.xzw = vec3(u_xlat16_15) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_15 = inversesqrt(u_xlat25);
    u_xlat6.xyz = vec3(u_xlat16_15) * u_xlat6.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat38 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_15 = u_xlat38 * u_xlat38;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat38 = max(u_xlat16_15, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat38;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_17.x / u_xlat25;
    u_xlat16_15 = u_xlat25 + -6.10351562e-05;
    u_xlat16_15 = max(u_xlat16_15, 0.0);
    u_xlat16_15 = min(u_xlat16_15, 100.0);
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
    u_xlat16_5.xzw = u_xlat16_8.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    u_xlat16_15 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_15));
    u_xlat16_7.xyz = u_xlat16_5.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati6 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu18 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_15 = dot(unity_LightIndices[int(u_xlatu18)], ImmCB_0[u_xlati6]);
        u_xlati6 = int(u_xlat16_15);
        u_xlat18.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati6].www + _AdditionalLightsPosition[u_xlati6].xyz;
        u_xlat9 = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat9 = max(u_xlat9, 6.10351562e-05);
        u_xlat21 = inversesqrt(u_xlat9);
        u_xlat10.xyz = u_xlat18.xyz * vec3(u_xlat21);
        u_xlat33 = float(1.0) / float(u_xlat9);
        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati6].x + _AdditionalLightsAttenuation[u_xlati6].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
        u_xlat9 = u_xlat9 * u_xlat33;
        u_xlat16_15 = dot(_AdditionalLightsSpotDir[u_xlati6].xyz, u_xlat10.xyz);
        u_xlat16_15 = u_xlat16_15 * _AdditionalLightsAttenuation[u_xlati6].z + _AdditionalLightsAttenuation[u_xlati6].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat16_15 = u_xlat16_15 * u_xlat16_15;
        u_xlat9 = u_xlat16_15 * u_xlat9;
        u_xlat16_15 = dot(vs_TEXCOORD2.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat16_15 = u_xlat16_15 * u_xlat9;
        u_xlat16_8.xyz = vec3(u_xlat16_15) * _AdditionalLightsColor[u_xlati6].xyz;
        u_xlat6.xyz = u_xlat18.xyz * vec3(u_xlat21) + vs_TEXCOORD3.xyz;
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = max(u_xlat42, 1.17549435e-38);
        u_xlat16_15 = inversesqrt(u_xlat42);
        u_xlat6.xyz = vec3(u_xlat16_15) * u_xlat6.xyz;
        u_xlat42 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
        u_xlat6.x = dot(u_xlat10.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
        u_xlat18.x = u_xlat42 * u_xlat42;
        u_xlat18.x = u_xlat18.x * u_xlat13 + 1.00001001;
        u_xlat16_15 = u_xlat6.x * u_xlat6.x;
        u_xlat6.x = u_xlat18.x * u_xlat18.x;
        u_xlat18.x = max(u_xlat16_15, 0.100000001);
        u_xlat6.x = u_xlat18.x * u_xlat6.x;
        u_xlat6.x = u_xlat1.x * u_xlat6.x;
        u_xlat6.x = u_xlat16_17.x / u_xlat6.x;
        u_xlat16_15 = u_xlat6.x + -6.10351562e-05;
        u_xlat16_15 = max(u_xlat16_15, 0.0);
        u_xlat16_15 = min(u_xlat16_15, 100.0);
        u_xlat16_11.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
        u_xlat16_7.xyz = u_xlat16_11.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb22 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb22) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb22) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb22) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat5.w = u_xlat7.x * 0.5;
    u_xlat5.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat5.zz + u_xlat5.xw;
    u_xlat7.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat7.xyz;
    vs_TEXCOORD7.xyz = u_xlat7.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
vec3 u_xlat13;
uint u_xlatu13;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_17;
float u_xlat19;
float u_xlat23;
mediump float u_xlat16_23;
uint u_xlatu23;
bool u_xlatb23;
mediump float u_xlat16_25;
float u_xlat30;
float u_xlat34;
uint u_xlatu34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13.x;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13.x;
        u_xlat13.x = u_xlat13.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_37 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_23 * _MainLightShadowParams.x + u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb34 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb23 = u_xlatb34 || u_xlatb23;
    u_xlat16_38 = (u_xlatb23) ? 1.0 : u_xlat16_38;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat23 * u_xlat23;
    u_xlat16_17 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_6.x * u_xlat16_17 + u_xlat16_38;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_39 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_39 = (-u_xlat16_39) + 1.0;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_7.x;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_25);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_38 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_38 = u_xlat34 * u_xlat34;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat34 = max(u_xlat16_38, 0.100000001);
    u_xlat23 = u_xlat34 * u_xlat23;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_37 / u_xlat23;
    u_xlat16_38 = u_xlat23 + -6.10351562e-05;
    u_xlat16_38 = max(u_xlat16_38, 0.0);
    u_xlat16_38 = min(u_xlat16_38, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
    u_xlat16_14.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_38));
    u_xlat16_6.xyz = u_xlat16_14.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu13 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_38 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_38);
        u_xlat13.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat8 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat8 = max(u_xlat8, 6.10351562e-05);
        u_xlat19 = inversesqrt(u_xlat8);
        u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat19);
        u_xlat30 = float(1.0) / float(u_xlat8);
        u_xlat8 = u_xlat8 * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
        u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
        u_xlat8 = u_xlat8 * u_xlat30;
        u_xlat16_38 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat9.xyz);
        u_xlat16_38 = u_xlat16_38 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
        u_xlat8 = u_xlat16_38 * u_xlat8;
        u_xlat16_38 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat8;
        u_xlat16_7.xyz = vec3(u_xlat16_38) * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat2.xyz = u_xlat13.xyz * vec3(u_xlat19) + vs_TEXCOORD3.xyz;
        u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat35 = max(u_xlat35, 1.17549435e-38);
        u_xlat16_38 = inversesqrt(u_xlat35);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
        u_xlat35 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
        u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
        u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
        u_xlat13.x = u_xlat35 * u_xlat35;
        u_xlat13.x = u_xlat13.x * u_xlat12 + 1.00001001;
        u_xlat16_38 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat13.x * u_xlat13.x;
        u_xlat13.x = max(u_xlat16_38, 0.100000001);
        u_xlat2.x = u_xlat13.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_37 / u_xlat2.x;
        u_xlat16_38 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_38 = max(u_xlat16_38, 0.0);
        u_xlat16_38 = min(u_xlat16_38, 100.0);
        u_xlat16_10.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb19 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb19) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb19) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb19) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat6.xyz;
    vs_TEXCOORD7.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
uint u_xlatu5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
mediump vec3 u_xlat16_15;
vec3 u_xlat16;
int u_xlati16;
bool u_xlatb16;
float u_xlat23;
mediump float u_xlat16_23;
uint u_xlatu23;
bool u_xlatb23;
mediump float u_xlat16_26;
float u_xlat27;
uint u_xlatu27;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_39;
float u_xlat41;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_13 = (-u_xlat16_2.x) + _Smoothness;
    u_xlat16_2.xzw = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_36 = (-_Smoothness) + 1.0;
    u_xlat16_4.x = u_xlat16_36 * u_xlat16_36;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0078125);
    u_xlat16_13 = u_xlat16_13 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_4.x * 4.0 + 2.0;
    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_26 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_26 = u_xlat16_23 * _MainLightShadowParams.x + u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb23 = u_xlatb23 || u_xlatb5;
    u_xlat16_26 = (u_xlatb23) ? 1.0 : u_xlat16_26;
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_37 = u_xlat23 * u_xlat23;
    u_xlat16_6.x = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = u_xlat16_37 * u_xlat16_6.x + u_xlat16_26;
    u_xlat16_37 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_37)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_37 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_4.w = (-u_xlat16_37) + 1.0;
    u_xlat16_15.xz = u_xlat16_4.xw * u_xlat16_4.xw;
    u_xlat16_37 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat16_39 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_36 = u_xlat16_36 * u_xlat16_39;
    u_xlat16_36 = u_xlat16_36 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_36);
    u_xlat16_36 = u_xlat16_0.w + -1.0;
    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_36);
    u_xlat16_36 = u_xlat16_4.x * u_xlat16_4.x + 1.0;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_13);
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_3.xyz;
    u_xlat5.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat5.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xzw + u_xlat16_6.xyz;
    u_xlat16_13 = u_xlat16_26 * unity_LightData.z;
    u_xlat16_36 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
#else
    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_13 * u_xlat16_36;
    u_xlat16_4.xzw = vec3(u_xlat16_13) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_13 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_13) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_13 = u_xlat5.x * u_xlat5.x;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat5.x = max(u_xlat16_13, 0.100000001);
    u_xlat23 = u_xlat23 * u_xlat5.x;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_15.x / u_xlat23;
    u_xlat16_13 = u_xlat23 + -6.10351562e-05;
    u_xlat16_13 = max(u_xlat16_13, 0.0);
    u_xlat16_13 = min(u_xlat16_13, 100.0);
    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
    u_xlat16_4.xzw = u_xlat16_7.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    u_xlat16_13 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_13));
    u_xlat16_6.xyz = u_xlat16_4.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati16 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu27 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_13 = dot(unity_LightIndices[int(u_xlatu27)], ImmCB_0[u_xlati16]);
        u_xlati16 = int(u_xlat16_13);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati16].www + _AdditionalLightsPosition[u_xlati16].xyz;
        u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat27 = max(u_xlat27, 6.10351562e-05);
        u_xlat38 = inversesqrt(u_xlat27);
        u_xlat9.xyz = vec3(u_xlat38) * u_xlat8.xyz;
        u_xlat41 = float(1.0) / float(u_xlat27);
        u_xlat27 = u_xlat27 * _AdditionalLightsAttenuation[u_xlati16].x + _AdditionalLightsAttenuation[u_xlati16].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = u_xlat27 * u_xlat41;
        u_xlat16_13 = dot(_AdditionalLightsSpotDir[u_xlati16].xyz, u_xlat9.xyz);
        u_xlat16_13 = u_xlat16_13 * _AdditionalLightsAttenuation[u_xlati16].z + _AdditionalLightsAttenuation[u_xlati16].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
        u_xlat27 = u_xlat16_13 * u_xlat27;
        u_xlat16_13 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat16_13 = u_xlat16_13 * u_xlat27;
        u_xlat16_7.xyz = vec3(u_xlat16_13) * _AdditionalLightsColor[u_xlati16].xyz;
        u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat38) + vs_TEXCOORD3.xyz;
        u_xlat8.x = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
        u_xlat16_13 = inversesqrt(u_xlat8.x);
        u_xlat16.xyz = vec3(u_xlat16_13) * u_xlat16.xyz;
        u_xlat8.x = dot(vs_TEXCOORD2.xyz, u_xlat16.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
        u_xlat16.x = dot(u_xlat9.xyz, u_xlat16.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
        u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
        u_xlat27 = u_xlat8.x * u_xlat8.x;
        u_xlat27 = u_xlat27 * u_xlat12 + 1.00001001;
        u_xlat16_13 = u_xlat16.x * u_xlat16.x;
        u_xlat16.x = u_xlat27 * u_xlat27;
        u_xlat27 = max(u_xlat16_13, 0.100000001);
        u_xlat16.x = u_xlat27 * u_xlat16.x;
        u_xlat16.x = u_xlat1.x * u_xlat16.x;
        u_xlat16.x = u_xlat16_15.x / u_xlat16.x;
        u_xlat16_13 = u_xlat16.x + -6.10351562e-05;
        u_xlat16_13 = max(u_xlat16_13, 0.0);
        u_xlat16_13 = min(u_xlat16_13, 100.0);
        u_xlat16_10.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb21 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
uint u_xlatu6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_19;
vec3 u_xlat21;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
mediump float u_xlat16_27;
float u_xlat37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat38;
int u_xlati38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_43;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_41 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_41 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb37 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb25 = u_xlatb37 || u_xlatb25;
    u_xlat16_41 = (u_xlatb25) ? 1.0 : u_xlat16_41;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat25 * u_xlat25;
    u_xlat16_19 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_7.x * u_xlat16_19 + u_xlat16_41;
    u_xlat16_7.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_7.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_43 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_43 = min(max(u_xlat16_43, 0.0), 1.0);
#else
    u_xlat16_43 = clamp(u_xlat16_43, 0.0, 1.0);
#endif
    u_xlat16_43 = (-u_xlat16_43) + 1.0;
    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;
    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;
    u_xlat16_8.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_8.x;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);
    u_xlat16_8.xyz = vec3(u_xlat16_43) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat6.xyz = u_xlat16_15.xxx * u_xlat16_8.xyz;
    u_xlat16_15.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_41 = u_xlat16_41 * u_xlat16_7.x;
    u_xlat16_7.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat25);
    u_xlat6.xyz = vec3(u_xlat16_41) * u_xlat6.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_41 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_41, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_40 / u_xlat25;
    u_xlat16_41 = u_xlat25 + -6.10351562e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
    u_xlat16_15.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_41));
    u_xlat16_7.xyz = u_xlat16_15.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati38 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu6 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_41 = dot(unity_LightIndices[int(u_xlatu6)], ImmCB_0[u_xlati38]);
        u_xlati38 = int(u_xlat16_41);
        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati38].www + _AdditionalLightsPosition[u_xlati38].xyz;
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = max(u_xlat42, 6.10351562e-05);
        u_xlat9 = inversesqrt(u_xlat42);
        u_xlat21.xyz = u_xlat6.xyz * vec3(u_xlat9);
        u_xlat10 = float(1.0) / float(u_xlat42);
        u_xlat42 = u_xlat42 * _AdditionalLightsAttenuation[u_xlati38].x + _AdditionalLightsAttenuation[u_xlati38].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
        u_xlat42 = u_xlat42 * u_xlat10;
        u_xlat16_41 = dot(_AdditionalLightsSpotDir[u_xlati38].xyz, u_xlat21.xyz);
        u_xlat16_41 = u_xlat16_41 * _AdditionalLightsAttenuation[u_xlati38].z + _AdditionalLightsAttenuation[u_xlati38].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
        u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
        u_xlat42 = u_xlat16_41 * u_xlat42;
        u_xlat16_41 = dot(vs_TEXCOORD2.xyz, u_xlat21.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
        u_xlat16_41 = u_xlat16_41 * u_xlat42;
        u_xlat16_8.xyz = vec3(u_xlat16_41) * _AdditionalLightsColor[u_xlati38].xyz;
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat9) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_41 = inversesqrt(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat16_41) * u_xlat6.xyz;
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
        u_xlat6.x = dot(u_xlat21.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat38 = u_xlat38 * u_xlat13 + 1.00001001;
        u_xlat16_41 = u_xlat6.x * u_xlat6.x;
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat6.x = max(u_xlat16_41, 0.100000001);
        u_xlat38 = u_xlat38 * u_xlat6.x;
        u_xlat38 = u_xlat1.x * u_xlat38;
        u_xlat38 = u_xlat16_40 / u_xlat38;
        u_xlat16_41 = u_xlat38 + -6.10351562e-05;
        u_xlat16_41 = max(u_xlat16_41, 0.0);
        u_xlat16_41 = min(u_xlat16_41, 100.0);
        u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
        u_xlat16_7.xyz = u_xlat16_11.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
vec3 u_xlat18;
uint u_xlatu18;
float u_xlat21;
float u_xlat25;
mediump float u_xlat16_25;
uint u_xlatu25;
bool u_xlatb25;
mediump float u_xlat16_29;
float u_xlat33;
float u_xlat38;
uint u_xlatu38;
bool u_xlatb38;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_43;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_3.xzw = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_40 = (-_Smoothness) + 1.0;
    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0078125);
    u_xlat16_15 = u_xlat16_15 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_5.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_5.x * u_xlat16_5.x + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_29 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb38 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb25 = u_xlatb25 || u_xlatb38;
    u_xlat16_29 = (u_xlatb25) ? 1.0 : u_xlat16_29;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_41 = u_xlat25 * u_xlat25;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_41 * u_xlat16_7.x + u_xlat16_29;
    u_xlat16_41 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_41)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_5.w = (-u_xlat16_41) + 1.0;
    u_xlat16_17.xz = u_xlat16_5.xw * u_xlat16_5.xw;
    u_xlat16_41 = u_xlat16_17.z * u_xlat16_17.z;
    u_xlat16_43 = (-u_xlat16_40) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat16_40 * u_xlat16_43;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_40);
    u_xlat16_40 = u_xlat16_0.w + -1.0;
    u_xlat16_40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.y;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_40);
    u_xlat16_40 = u_xlat16_5.x * u_xlat16_5.x + 1.0;
    u_xlat16_40 = float(1.0) / u_xlat16_40;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_15);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat6.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xzw + u_xlat16_7.xyz;
    u_xlat16_15 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_40 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * u_xlat16_40;
    u_xlat16_5.xzw = vec3(u_xlat16_15) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_15 = inversesqrt(u_xlat25);
    u_xlat6.xyz = vec3(u_xlat16_15) * u_xlat6.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat38 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_15 = u_xlat38 * u_xlat38;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat38 = max(u_xlat16_15, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat38;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_17.x / u_xlat25;
    u_xlat16_15 = u_xlat25 + -6.10351562e-05;
    u_xlat16_15 = max(u_xlat16_15, 0.0);
    u_xlat16_15 = min(u_xlat16_15, 100.0);
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
    u_xlat16_5.xzw = u_xlat16_8.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    u_xlat16_15 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_15));
    u_xlat16_7.xyz = u_xlat16_5.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati6 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu18 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_15 = dot(unity_LightIndices[int(u_xlatu18)], ImmCB_0[u_xlati6]);
        u_xlati6 = int(u_xlat16_15);
        u_xlat18.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati6].www + _AdditionalLightsPosition[u_xlati6].xyz;
        u_xlat9 = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat9 = max(u_xlat9, 6.10351562e-05);
        u_xlat21 = inversesqrt(u_xlat9);
        u_xlat10.xyz = u_xlat18.xyz * vec3(u_xlat21);
        u_xlat33 = float(1.0) / float(u_xlat9);
        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati6].x + _AdditionalLightsAttenuation[u_xlati6].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
        u_xlat9 = u_xlat9 * u_xlat33;
        u_xlat16_15 = dot(_AdditionalLightsSpotDir[u_xlati6].xyz, u_xlat10.xyz);
        u_xlat16_15 = u_xlat16_15 * _AdditionalLightsAttenuation[u_xlati6].z + _AdditionalLightsAttenuation[u_xlati6].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat16_15 = u_xlat16_15 * u_xlat16_15;
        u_xlat9 = u_xlat16_15 * u_xlat9;
        u_xlat16_15 = dot(vs_TEXCOORD2.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat16_15 = u_xlat16_15 * u_xlat9;
        u_xlat16_8.xyz = vec3(u_xlat16_15) * _AdditionalLightsColor[u_xlati6].xyz;
        u_xlat6.xyz = u_xlat18.xyz * vec3(u_xlat21) + vs_TEXCOORD3.xyz;
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = max(u_xlat42, 1.17549435e-38);
        u_xlat16_15 = inversesqrt(u_xlat42);
        u_xlat6.xyz = vec3(u_xlat16_15) * u_xlat6.xyz;
        u_xlat42 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
        u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
        u_xlat6.x = dot(u_xlat10.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
        u_xlat18.x = u_xlat42 * u_xlat42;
        u_xlat18.x = u_xlat18.x * u_xlat13 + 1.00001001;
        u_xlat16_15 = u_xlat6.x * u_xlat6.x;
        u_xlat6.x = u_xlat18.x * u_xlat18.x;
        u_xlat18.x = max(u_xlat16_15, 0.100000001);
        u_xlat6.x = u_xlat18.x * u_xlat6.x;
        u_xlat6.x = u_xlat1.x * u_xlat6.x;
        u_xlat6.x = u_xlat16_17.x / u_xlat6.x;
        u_xlat16_15 = u_xlat6.x + -6.10351562e-05;
        u_xlat16_15 = max(u_xlat16_15, 0.0);
        u_xlat16_15 = min(u_xlat16_15, 100.0);
        u_xlat16_11.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
        u_xlat16_7.xyz = u_xlat16_11.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb21 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
vec3 u_xlat13;
uint u_xlatu13;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_17;
float u_xlat19;
float u_xlat23;
mediump float u_xlat16_23;
uint u_xlatu23;
bool u_xlatb23;
mediump float u_xlat16_25;
float u_xlat30;
float u_xlat34;
uint u_xlatu34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13.x;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13.x;
        u_xlat13.x = u_xlat13.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_37 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_23 * _MainLightShadowParams.x + u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb34 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb23 = u_xlatb34 || u_xlatb23;
    u_xlat16_38 = (u_xlatb23) ? 1.0 : u_xlat16_38;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat23 * u_xlat23;
    u_xlat16_17 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_6.x * u_xlat16_17 + u_xlat16_38;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_39 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_39 = (-u_xlat16_39) + 1.0;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_7.x;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_25);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_38 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_38 = u_xlat34 * u_xlat34;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat34 = max(u_xlat16_38, 0.100000001);
    u_xlat23 = u_xlat34 * u_xlat23;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_37 / u_xlat23;
    u_xlat16_38 = u_xlat23 + -6.10351562e-05;
    u_xlat16_38 = max(u_xlat16_38, 0.0);
    u_xlat16_38 = min(u_xlat16_38, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
    u_xlat16_14.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_38));
    u_xlat16_6.xyz = u_xlat16_14.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu13 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_38 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_38);
        u_xlat13.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat8 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat8 = max(u_xlat8, 6.10351562e-05);
        u_xlat19 = inversesqrt(u_xlat8);
        u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat19);
        u_xlat30 = float(1.0) / float(u_xlat8);
        u_xlat8 = u_xlat8 * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
        u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
        u_xlat8 = u_xlat8 * u_xlat30;
        u_xlat16_38 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat9.xyz);
        u_xlat16_38 = u_xlat16_38 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
        u_xlat8 = u_xlat16_38 * u_xlat8;
        u_xlat16_38 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat8;
        u_xlat16_7.xyz = vec3(u_xlat16_38) * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat2.xyz = u_xlat13.xyz * vec3(u_xlat19) + vs_TEXCOORD3.xyz;
        u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat35 = max(u_xlat35, 1.17549435e-38);
        u_xlat16_38 = inversesqrt(u_xlat35);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
        u_xlat35 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
        u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
        u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
        u_xlat13.x = u_xlat35 * u_xlat35;
        u_xlat13.x = u_xlat13.x * u_xlat12 + 1.00001001;
        u_xlat16_38 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat13.x * u_xlat13.x;
        u_xlat13.x = max(u_xlat16_38, 0.100000001);
        u_xlat2.x = u_xlat13.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_37 / u_xlat2.x;
        u_xlat16_38 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_38 = max(u_xlat16_38, 0.0);
        u_xlat16_38 = min(u_xlat16_38, 100.0);
        u_xlat16_10.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
uint u_xlatu5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
mediump vec3 u_xlat16_15;
vec3 u_xlat16;
int u_xlati16;
bool u_xlatb16;
float u_xlat23;
mediump float u_xlat16_23;
uint u_xlatu23;
bool u_xlatb23;
mediump float u_xlat16_26;
float u_xlat27;
uint u_xlatu27;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_39;
float u_xlat41;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_13 = (-u_xlat16_2.x) + _Smoothness;
    u_xlat16_2.xzw = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_36 = (-_Smoothness) + 1.0;
    u_xlat16_4.x = u_xlat16_36 * u_xlat16_36;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0078125);
    u_xlat16_13 = u_xlat16_13 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_4.x * 4.0 + 2.0;
    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_26 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_26 = u_xlat16_23 * _MainLightShadowParams.x + u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb5 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb23 = u_xlatb23 || u_xlatb5;
    u_xlat16_26 = (u_xlatb23) ? 1.0 : u_xlat16_26;
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = u_xlat23 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_37 = u_xlat23 * u_xlat23;
    u_xlat16_6.x = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = u_xlat16_37 * u_xlat16_6.x + u_xlat16_26;
    u_xlat16_37 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_37)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_37 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_4.w = (-u_xlat16_37) + 1.0;
    u_xlat16_15.xz = u_xlat16_4.xw * u_xlat16_4.xw;
    u_xlat16_37 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat16_39 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_36 = u_xlat16_36 * u_xlat16_39;
    u_xlat16_36 = u_xlat16_36 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_36);
    u_xlat16_36 = u_xlat16_0.w + -1.0;
    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_36);
    u_xlat16_36 = u_xlat16_4.x * u_xlat16_4.x + 1.0;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_13);
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_3.xyz;
    u_xlat5.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat5.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xzw + u_xlat16_6.xyz;
    u_xlat16_13 = u_xlat16_26 * unity_LightData.z;
    u_xlat16_36 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
#else
    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_13 * u_xlat16_36;
    u_xlat16_4.xzw = vec3(u_xlat16_13) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_13 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_13) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_13 = u_xlat5.x * u_xlat5.x;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat5.x = max(u_xlat16_13, 0.100000001);
    u_xlat23 = u_xlat23 * u_xlat5.x;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_15.x / u_xlat23;
    u_xlat16_13 = u_xlat23 + -6.10351562e-05;
    u_xlat16_13 = max(u_xlat16_13, 0.0);
    u_xlat16_13 = min(u_xlat16_13, 100.0);
    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
    u_xlat16_4.xzw = u_xlat16_7.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    u_xlat16_13 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_13));
    u_xlat16_6.xyz = u_xlat16_4.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati16 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu27 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_13 = dot(unity_LightIndices[int(u_xlatu27)], ImmCB_0[u_xlati16]);
        u_xlati16 = int(u_xlat16_13);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati16].www + _AdditionalLightsPosition[u_xlati16].xyz;
        u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat27 = max(u_xlat27, 6.10351562e-05);
        u_xlat38 = inversesqrt(u_xlat27);
        u_xlat9.xyz = vec3(u_xlat38) * u_xlat8.xyz;
        u_xlat41 = float(1.0) / float(u_xlat27);
        u_xlat27 = u_xlat27 * _AdditionalLightsAttenuation[u_xlati16].x + _AdditionalLightsAttenuation[u_xlati16].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = u_xlat27 * u_xlat41;
        u_xlat16_13 = dot(_AdditionalLightsSpotDir[u_xlati16].xyz, u_xlat9.xyz);
        u_xlat16_13 = u_xlat16_13 * _AdditionalLightsAttenuation[u_xlati16].z + _AdditionalLightsAttenuation[u_xlati16].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
        u_xlat27 = u_xlat16_13 * u_xlat27;
        u_xlat16_13 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat16_13 = u_xlat16_13 * u_xlat27;
        u_xlat16_7.xyz = vec3(u_xlat16_13) * _AdditionalLightsColor[u_xlati16].xyz;
        u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat38) + vs_TEXCOORD3.xyz;
        u_xlat8.x = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
        u_xlat16_13 = inversesqrt(u_xlat8.x);
        u_xlat16.xyz = vec3(u_xlat16_13) * u_xlat16.xyz;
        u_xlat8.x = dot(vs_TEXCOORD2.xyz, u_xlat16.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
        u_xlat16.x = dot(u_xlat9.xyz, u_xlat16.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
        u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
        u_xlat27 = u_xlat8.x * u_xlat8.x;
        u_xlat27 = u_xlat27 * u_xlat12 + 1.00001001;
        u_xlat16_13 = u_xlat16.x * u_xlat16.x;
        u_xlat16.x = u_xlat27 * u_xlat27;
        u_xlat27 = max(u_xlat16_13, 0.100000001);
        u_xlat16.x = u_xlat27 * u_xlat16.x;
        u_xlat16.x = u_xlat1.x * u_xlat16.x;
        u_xlat16.x = u_xlat16_15.x / u_xlat16.x;
        u_xlat16_13 = u_xlat16.x + -6.10351562e-05;
        u_xlat16_13 = max(u_xlat16_13, 0.0);
        u_xlat16_13 = min(u_xlat16_13, 100.0);
        u_xlat16_10.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec4 vs_TEXCOORD7;
layout(location = 7) out highp vec3 vs_TEXCOORD8;
layout(location = 8) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb32;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
    vs_TEXCOORD7.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb32 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb32) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb32) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb32) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat2.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec4 vs_TEXCOORD7;
layout(location = 7) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat19;
mediump float u_xlat16_19;
bool u_xlatb19;
mediump float u_xlat16_21;
float u_xlat28;
bool u_xlatb28;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
mediump float u_xlat16_34;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat11 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat11;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat11;
        u_xlat11 = u_xlat11 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat11) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat28 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat28 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_12.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_21 = (-u_xlat16_12.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_12.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.x = (-_Smoothness) + 1.0;
    u_xlat16_30 = u_xlat16_12.x * u_xlat16_12.x;
    u_xlat16_30 = max(u_xlat16_30, 0.0078125);
    u_xlat16_31 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_21 = u_xlat16_21 + 1.0;
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
    u_xlat1.x = u_xlat16_30 * 4.0 + 2.0;
    u_xlat10 = u_xlat16_30 * u_xlat16_30 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_19 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_32 = u_xlat16_19 * _MainLightShadowParams.x + u_xlat16_32;
    u_xlatb19 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb28 = vs_TEXCOORD7.z>=1.0;
    u_xlatb19 = u_xlatb28 || u_xlatb19;
    u_xlat16_32 = (u_xlatb19) ? 1.0 : u_xlat16_32;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = u_xlat19 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat16_7.x = u_xlat19 * u_xlat19;
    u_xlat16_16 = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_7.x * u_xlat16_16 + u_xlat16_32;
    u_xlat16_7.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_7.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_34 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
    u_xlat16_34 = (-u_xlat16_34) + 1.0;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_8.x = (-u_xlat16_12.x) * 0.699999988 + 1.70000005;
    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_8.x;
    u_xlat16_12.x = u_xlat16_12.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_0.w + -1.0;
    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlat16_12.x = log2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.y;
    u_xlat16_12.x = exp2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_12.xxx;
    u_xlat16_12.x = u_xlat16_30 * u_xlat16_30 + 1.0;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_21);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat6.xyz = u_xlat16_12.xxx * u_xlat16_8.xyz;
    u_xlat16_12.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_12.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_12.xyz;
    u_xlat16_32 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
    u_xlat16_7.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = max(u_xlat19, 1.17549435e-38);
    u_xlat16_32 = inversesqrt(u_xlat19);
    u_xlat6.xyz = vec3(u_xlat16_32) * u_xlat6.xyz;
    u_xlat19 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat19 * u_xlat10 + 1.00001001;
    u_xlat16_32 = u_xlat28 * u_xlat28;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat19 = max(u_xlat16_32, 0.100000001);
    u_xlat10 = u_xlat19 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat1.x = u_xlat16_31 / u_xlat1.x;
    u_xlat16_31 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_31 = max(u_xlat16_31, 0.0);
    u_xlat16_31 = min(u_xlat16_31, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;
    u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz + u_xlat16_12.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD7;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat1.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat1.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat2.xyz;
    vs_TEXCOORD7.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_8.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_8.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD7;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
bool u_xlatb5;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump float u_xlat16_13;
float u_xlat17;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
float u_xlat23;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_7 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_7 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_7;
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb6 = vs_TEXCOORD7.z>=1.0;
    u_xlatb0 = u_xlatb6 || u_xlatb0;
    u_xlat16_7 = (u_xlatb0) ? 1.0 : u_xlat16_7;
    u_xlat16_13 = (-u_xlat16_7) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13 + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_7 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_19 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_2.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_19)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_19 = (-_Smoothness) + 1.0;
    u_xlat16_20 = (-u_xlat16_19) * 0.699999988 + 1.70000005;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_20;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 0.0078125);
    u_xlat16_20 = u_xlat16_20 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_20);
    u_xlat16_2.x = u_xlat16_0.w + -1.0;
    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_20 = (-u_xlat16_20) + 1.0;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_9.x = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = u_xlat16_9.xxx + (-u_xlat16_4.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_19 + 1.0;
    u_xlat16_20 = float(1.0) / u_xlat16_20;
    u_xlat5.xyz = u_xlat16_9.xyz * vec3(u_xlat16_20);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat0.xyz;
    u_xlat16_2.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_19 * u_xlat16_19 + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_19 * 4.0 + 2.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_19 / u_xlat5.x;
    u_xlat16_19 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_19 = max(u_xlat16_19, 0.0);
    u_xlat16_19 = min(u_xlat16_19, 100.0);
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_5.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_5.xyz * _EmissionColor.xyz + u_xlat16_1.xyz;
    u_xlatb5 = _Surface==1.0;
    SV_Target0.w = (u_xlatb5) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec4 vs_TEXCOORD7;
layout(location = 7) out highp vec3 vs_TEXCOORD8;
layout(location = 8) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb32;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
    vs_TEXCOORD7.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb32 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb32) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb32) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb32) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat2.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec4 vs_TEXCOORD7;
layout(location = 7) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_17;
bool u_xlatb17;
mediump float u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat10 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10;
        u_xlat10 = u_xlat10 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat10) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat25 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat25 * u_xlat2.x;
    u_xlat16_11.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_19 = (-u_xlat16_11.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_11.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.x = (-_Smoothness) + 1.0;
    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_27 = max(u_xlat16_27, 0.0078125);
    u_xlat16_28 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_19 = u_xlat16_19 + 1.0;
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat1.x = u_xlat16_27 * 4.0 + 2.0;
    u_xlat9 = u_xlat16_27 * u_xlat16_27 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_29 = u_xlat16_17 * _MainLightShadowParams.x + u_xlat16_29;
    u_xlatb17 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb25 = vs_TEXCOORD7.z>=1.0;
    u_xlatb17 = u_xlatb25 || u_xlatb17;
    u_xlat16_29 = (u_xlatb17) ? 1.0 : u_xlat16_29;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = u_xlat17 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat16_6.x = u_xlat17 * u_xlat17;
    u_xlat16_14 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_6.x * u_xlat16_14 + u_xlat16_29;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_7.x = (-u_xlat16_11.x) * 0.699999988 + 1.70000005;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_7.x;
    u_xlat16_11.x = u_xlat16_11.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_0.w + -1.0;
    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = log2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.y;
    u_xlat16_11.x = exp2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_11.xxx;
    u_xlat16_11.x = u_xlat16_27 * u_xlat16_27 + 1.0;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_19);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_11.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_11.xyz;
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = max(u_xlat17, 1.17549435e-38);
    u_xlat16_29 = inversesqrt(u_xlat17);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_29);
    u_xlat17 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat17 * u_xlat9 + 1.00001001;
    u_xlat16_29 = u_xlat25 * u_xlat25;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat17 = max(u_xlat16_29, 0.100000001);
    u_xlat9 = u_xlat17 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat1.x = u_xlat16_28 / u_xlat1.x;
    u_xlat16_28 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD7;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat1.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat1.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat0.y = dot(in_NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat6.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat6.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat6.zzz + u_xlat2.xyz;
    vs_TEXCOORD7.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_8.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_8.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_8.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD7;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump float u_xlat16_13;
float u_xlat17;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
float u_xlat23;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_7 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_7 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_7;
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
    u_xlatb6 = vs_TEXCOORD7.z>=1.0;
    u_xlatb0 = u_xlatb6 || u_xlatb0;
    u_xlat16_7 = (u_xlatb0) ? 1.0 : u_xlat16_7;
    u_xlat16_13 = (-u_xlat16_7) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13 + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_7 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_19 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_2.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_19)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_19 = (-_Smoothness) + 1.0;
    u_xlat16_20 = (-u_xlat16_19) * 0.699999988 + 1.70000005;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_20;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 0.0078125);
    u_xlat16_20 = u_xlat16_20 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_20);
    u_xlat16_2.x = u_xlat16_0.w + -1.0;
    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_20 = (-u_xlat16_20) + 1.0;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_9.x = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = u_xlat16_9.xxx + (-u_xlat16_4.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_19 + 1.0;
    u_xlat16_20 = float(1.0) / u_xlat16_20;
    u_xlat5.xyz = u_xlat16_9.xyz * vec3(u_xlat16_20);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat0.xyz;
    u_xlat16_2.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_19 * u_xlat16_19 + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_19 * 4.0 + 2.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_19 / u_xlat5.x;
    u_xlat16_19 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_19 = max(u_xlat16_19, 0.0);
    u_xlat16_19 = min(u_xlat16_19, 100.0);
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlatb5 = _Surface==1.0;
    SV_Target0.w = (u_xlatb5) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb22 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb22) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb22) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb22) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat5.w = u_xlat7.x * 0.5;
    u_xlat5.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat5.zz + u_xlat5.xw;
    u_xlat7.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat7.xyz;
    vs_TEXCOORD7.xyz = u_xlat7.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat19;
mediump float u_xlat16_19;
bool u_xlatb19;
mediump float u_xlat16_21;
float u_xlat28;
bool u_xlatb28;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
mediump float u_xlat16_34;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat11 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat11;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat11;
        u_xlat11 = u_xlat11 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat11) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat28 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat28 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_12.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_21 = (-u_xlat16_12.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_12.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.x = (-_Smoothness) + 1.0;
    u_xlat16_30 = u_xlat16_12.x * u_xlat16_12.x;
    u_xlat16_30 = max(u_xlat16_30, 0.0078125);
    u_xlat16_31 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_21 = u_xlat16_21 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_30 * 4.0 + 2.0;
    u_xlat10 = u_xlat16_30 * u_xlat16_30 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_19 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_32 = u_xlat16_19 * _MainLightShadowParams.x + u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb19 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb28 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb19 = u_xlatb28 || u_xlatb19;
    u_xlat16_32 = (u_xlatb19) ? 1.0 : u_xlat16_32;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = u_xlat19 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat19 * u_xlat19;
    u_xlat16_16 = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_7.x * u_xlat16_16 + u_xlat16_32;
    u_xlat16_7.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_7.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_34 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = (-u_xlat16_34) + 1.0;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_8.x = (-u_xlat16_12.x) * 0.699999988 + 1.70000005;
    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_8.x;
    u_xlat16_12.x = u_xlat16_12.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_0.w + -1.0;
    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlat16_12.x = log2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.y;
    u_xlat16_12.x = exp2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_12.xxx;
    u_xlat16_12.x = u_xlat16_30 * u_xlat16_30 + 1.0;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_21);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat6.xyz = u_xlat16_12.xxx * u_xlat16_8.xyz;
    u_xlat16_12.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_12.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_12.xyz;
    u_xlat16_32 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
    u_xlat16_7.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = max(u_xlat19, 1.17549435e-38);
    u_xlat16_32 = inversesqrt(u_xlat19);
    u_xlat6.xyz = vec3(u_xlat16_32) * u_xlat6.xyz;
    u_xlat19 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat19 * u_xlat10 + 1.00001001;
    u_xlat16_32 = u_xlat28 * u_xlat28;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat19 = max(u_xlat16_32, 0.100000001);
    u_xlat10 = u_xlat19 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat1.x = u_xlat16_31 / u_xlat1.x;
    u_xlat16_31 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_31 = max(u_xlat16_31, 0.0);
    u_xlat16_31 = min(u_xlat16_31, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;
    u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz + u_xlat16_12.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb19 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb19) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb19) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb19) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat6.xyz;
    vs_TEXCOORD7.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
bool u_xlatb5;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump float u_xlat16_13;
float u_xlat17;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
float u_xlat23;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_7 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_7 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb6 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb6 || u_xlatb0;
    u_xlat16_7 = (u_xlatb0) ? 1.0 : u_xlat16_7;
    u_xlat16_13 = (-u_xlat16_7) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13 + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_7 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_19 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_2.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_19)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_19 = (-_Smoothness) + 1.0;
    u_xlat16_20 = (-u_xlat16_19) * 0.699999988 + 1.70000005;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_20;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 0.0078125);
    u_xlat16_20 = u_xlat16_20 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_20);
    u_xlat16_2.x = u_xlat16_0.w + -1.0;
    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = (-u_xlat16_20) + 1.0;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_9.x = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = u_xlat16_9.xxx + (-u_xlat16_4.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_19 + 1.0;
    u_xlat16_20 = float(1.0) / u_xlat16_20;
    u_xlat5.xyz = u_xlat16_9.xyz * vec3(u_xlat16_20);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat0.xyz;
    u_xlat16_2.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_19 * u_xlat16_19 + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_19 * 4.0 + 2.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_19 / u_xlat5.x;
    u_xlat16_19 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_19 = max(u_xlat16_19, 0.0);
    u_xlat16_19 = min(u_xlat16_19, 100.0);
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_5.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_5.xyz * _EmissionColor.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_Surface==1.0);
#else
    u_xlatb5 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb5) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb22 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb22) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb22) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb22) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7.x);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat5.w = u_xlat7.x * 0.5;
    u_xlat5.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat5.zz + u_xlat5.xw;
    u_xlat7.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat7.xyz;
    vs_TEXCOORD7.xyz = u_xlat7.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_17;
bool u_xlatb17;
mediump float u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat10 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10;
        u_xlat10 = u_xlat10 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat10) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat25 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat25 * u_xlat2.x;
    u_xlat16_11.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_19 = (-u_xlat16_11.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_11.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.x = (-_Smoothness) + 1.0;
    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_27 = max(u_xlat16_27, 0.0078125);
    u_xlat16_28 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_19 = u_xlat16_19 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_27 * 4.0 + 2.0;
    u_xlat9 = u_xlat16_27 * u_xlat16_27 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_29 = u_xlat16_17 * _MainLightShadowParams.x + u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb17 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb25 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb17 = u_xlatb25 || u_xlatb17;
    u_xlat16_29 = (u_xlatb17) ? 1.0 : u_xlat16_29;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = u_xlat17 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat17 * u_xlat17;
    u_xlat16_14 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_6.x * u_xlat16_14 + u_xlat16_29;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_7.x = (-u_xlat16_11.x) * 0.699999988 + 1.70000005;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_7.x;
    u_xlat16_11.x = u_xlat16_11.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_0.w + -1.0;
    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = log2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.y;
    u_xlat16_11.x = exp2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_11.xxx;
    u_xlat16_11.x = u_xlat16_27 * u_xlat16_27 + 1.0;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_19);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_11.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_11.xyz;
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = max(u_xlat17, 1.17549435e-38);
    u_xlat16_29 = inversesqrt(u_xlat17);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_29);
    u_xlat17 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat17 * u_xlat9 + 1.00001001;
    u_xlat16_29 = u_xlat25 * u_xlat25;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat17 = max(u_xlat16_29, 0.100000001);
    u_xlat9 = u_xlat17 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat1.x = u_xlat16_28 / u_xlat1.x;
    u_xlat16_28 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb19 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb19) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb19) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb19) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat1.zzz + u_xlat6.xyz;
    vs_TEXCOORD7.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump float u_xlat16_13;
float u_xlat17;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
float u_xlat23;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_7 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_7 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb6 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb6 || u_xlatb0;
    u_xlat16_7 = (u_xlatb0) ? 1.0 : u_xlat16_7;
    u_xlat16_13 = (-u_xlat16_7) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13 + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_7 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_19 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_2.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_19)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_19 = (-_Smoothness) + 1.0;
    u_xlat16_20 = (-u_xlat16_19) * 0.699999988 + 1.70000005;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_20;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 0.0078125);
    u_xlat16_20 = u_xlat16_20 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_20);
    u_xlat16_2.x = u_xlat16_0.w + -1.0;
    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = (-u_xlat16_20) + 1.0;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_9.x = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = u_xlat16_9.xxx + (-u_xlat16_4.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_19 + 1.0;
    u_xlat16_20 = float(1.0) / u_xlat16_20;
    u_xlat5.xyz = u_xlat16_9.xyz * vec3(u_xlat16_20);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat0.xyz;
    u_xlat16_2.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_19 * u_xlat16_19 + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_19 * 4.0 + 2.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_19 / u_xlat5.x;
    u_xlat16_19 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_19 = max(u_xlat16_19, 0.0);
    u_xlat16_19 = min(u_xlat16_19, 100.0);
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_Surface==1.0);
#else
    u_xlatb5 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb5) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb21 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(5) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat19;
mediump float u_xlat16_19;
bool u_xlatb19;
mediump float u_xlat16_21;
float u_xlat28;
bool u_xlatb28;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
mediump float u_xlat16_34;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat11 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat11;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat11;
        u_xlat11 = u_xlat11 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat11) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat28 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat28 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_12.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_21 = (-u_xlat16_12.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_12.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.x = (-_Smoothness) + 1.0;
    u_xlat16_30 = u_xlat16_12.x * u_xlat16_12.x;
    u_xlat16_30 = max(u_xlat16_30, 0.0078125);
    u_xlat16_31 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_21 = u_xlat16_21 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_30 * 4.0 + 2.0;
    u_xlat10 = u_xlat16_30 * u_xlat16_30 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_19 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_32 = u_xlat16_19 * _MainLightShadowParams.x + u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb19 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb28 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb19 = u_xlatb28 || u_xlatb19;
    u_xlat16_32 = (u_xlatb19) ? 1.0 : u_xlat16_32;
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = u_xlat19 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat19 * u_xlat19;
    u_xlat16_16 = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_7.x * u_xlat16_16 + u_xlat16_32;
    u_xlat16_7.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_7.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_34 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = (-u_xlat16_34) + 1.0;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_8.x = (-u_xlat16_12.x) * 0.699999988 + 1.70000005;
    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_8.x;
    u_xlat16_12.x = u_xlat16_12.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_0.w + -1.0;
    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlat16_12.x = log2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.y;
    u_xlat16_12.x = exp2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_12.xxx;
    u_xlat16_12.x = u_xlat16_30 * u_xlat16_30 + 1.0;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_21);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat6.xyz = u_xlat16_12.xxx * u_xlat16_8.xyz;
    u_xlat16_12.xyz = u_xlat6.xyz * u_xlat16_7.xyz;
    u_xlat16_12.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_12.xyz;
    u_xlat16_32 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
    u_xlat16_7.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;
    u_xlat6.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = max(u_xlat19, 1.17549435e-38);
    u_xlat16_32 = inversesqrt(u_xlat19);
    u_xlat6.xyz = vec3(u_xlat16_32) * u_xlat6.xyz;
    u_xlat19 = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat19 * u_xlat10 + 1.00001001;
    u_xlat16_32 = u_xlat28 * u_xlat28;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat19 = max(u_xlat16_32, 0.100000001);
    u_xlat10 = u_xlat19 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat1.x = u_xlat16_31 / u_xlat1.x;
    u_xlat16_31 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_31 = max(u_xlat16_31, 0.0);
    u_xlat16_31 = min(u_xlat16_31, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;
    u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz + u_xlat16_12.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
bool u_xlatb5;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump float u_xlat16_13;
float u_xlat17;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
float u_xlat23;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_7 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_7 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb6 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb6 || u_xlatb0;
    u_xlat16_7 = (u_xlatb0) ? 1.0 : u_xlat16_7;
    u_xlat16_13 = (-u_xlat16_7) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13 + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_7 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_19 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_2.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_19)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_19 = (-_Smoothness) + 1.0;
    u_xlat16_20 = (-u_xlat16_19) * 0.699999988 + 1.70000005;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_20;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 0.0078125);
    u_xlat16_20 = u_xlat16_20 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_20);
    u_xlat16_2.x = u_xlat16_0.w + -1.0;
    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = (-u_xlat16_20) + 1.0;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_9.x = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = u_xlat16_9.xxx + (-u_xlat16_4.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_19 + 1.0;
    u_xlat16_20 = float(1.0) / u_xlat16_20;
    u_xlat5.xyz = u_xlat16_9.xyz * vec3(u_xlat16_20);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat0.xyz;
    u_xlat16_2.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_19 * u_xlat16_19 + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_19 * 4.0 + 2.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_19 / u_xlat5.x;
    u_xlat16_19 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_19 = max(u_xlat16_19, 0.0);
    u_xlat16_19 = min(u_xlat16_19, 100.0);
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_5.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_5.xyz * _EmissionColor.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_Surface==1.0);
#else
    u_xlatb5 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb5) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb21 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb21) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb21) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb21) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat21);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat21 * 0.5;
    u_xlat4.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_6.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_6.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_6.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(4) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_17;
bool u_xlatb17;
mediump float u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat10 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10;
        u_xlat10 = u_xlat10 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat10) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat25 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat25 * u_xlat2.x;
    u_xlat16_11.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_19 = (-u_xlat16_11.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_11.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.x = (-_Smoothness) + 1.0;
    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_27 = max(u_xlat16_27, 0.0078125);
    u_xlat16_28 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_19 = u_xlat16_19 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_27 * 4.0 + 2.0;
    u_xlat9 = u_xlat16_27 * u_xlat16_27 + -1.0;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_29 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_29 = u_xlat16_17 * _MainLightShadowParams.x + u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb17 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb25 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb17 = u_xlatb25 || u_xlatb17;
    u_xlat16_29 = (u_xlatb17) ? 1.0 : u_xlat16_29;
    u_xlat2.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = u_xlat17 * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat17 * u_xlat17;
    u_xlat16_14 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_6.x * u_xlat16_14 + u_xlat16_29;
    u_xlat16_6.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_6.x;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_6.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_7.x = (-u_xlat16_11.x) * 0.699999988 + 1.70000005;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_7.x;
    u_xlat16_11.x = u_xlat16_11.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_0.w + -1.0;
    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = log2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.y;
    u_xlat16_11.x = exp2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_11.xxx;
    u_xlat16_11.x = u_xlat16_27 * u_xlat16_27 + 1.0;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_19);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_11.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_11.xyz;
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.x = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = max(u_xlat17, 1.17549435e-38);
    u_xlat16_29 = inversesqrt(u_xlat17);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_29);
    u_xlat17 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat17 * u_xlat9 + 1.00001001;
    u_xlat16_29 = u_xlat25 * u_xlat25;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat17 = max(u_xlat16_29, 0.100000001);
    u_xlat9 = u_xlat17 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat1.x = u_xlat16_28 / u_xlat1.x;
    u_xlat16_28 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat18);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD7;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
bool u_xlatb6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump float u_xlat16_13;
float u_xlat17;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
float u_xlat23;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x * u_xlat0.x;
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_7 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_7 = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb6 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb6 || u_xlatb0;
    u_xlat16_7 = (u_xlatb0) ? 1.0 : u_xlat16_7;
    u_xlat16_13 = (-u_xlat16_7) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13 + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_7 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_19 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_2.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_19)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_19 = (-_Smoothness) + 1.0;
    u_xlat16_20 = (-u_xlat16_19) * 0.699999988 + 1.70000005;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_20;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 0.0078125);
    u_xlat16_20 = u_xlat16_20 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_20);
    u_xlat16_2.x = u_xlat16_0.w + -1.0;
    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = (-u_xlat16_20) + 1.0;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_9.x = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = u_xlat16_9.xxx + (-u_xlat16_4.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_19 + 1.0;
    u_xlat16_20 = float(1.0) / u_xlat16_20;
    u_xlat5.xyz = u_xlat16_9.xyz * vec3(u_xlat16_20);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat0.xyz;
    u_xlat16_2.xyz = vs_TEXCOORD8.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_19 * u_xlat16_19 + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_19 * 4.0 + 2.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_19 / u_xlat5.x;
    u_xlat16_19 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_19 = max(u_xlat16_19, 0.0);
    u_xlat16_19 = min(u_xlat16_19, 100.0);
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_Surface==1.0);
#else
    u_xlatb5 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb5) ? u_xlat0.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
uint u_xlatu8;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
vec3 u_xlat21;
float u_xlat25;
uint u_xlatu25;
mediump float u_xlat16_27;
float u_xlat37;
uint u_xlatu37;
float u_xlat38;
int u_xlati38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
float u_xlat44;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    u_xlat16_41 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_41)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_42 = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_42;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);
    u_xlat16_7.xyz = vec3(u_xlat16_41) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_15.xxx * u_xlat16_7.xyz;
    u_xlat16_15.xyz = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat25);
    u_xlat8.xyz = vec3(u_xlat16_41) * u_xlat8.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_41 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_41, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_40 / u_xlat25;
    u_xlat16_41 = u_xlat25 + -6.10351562e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
    u_xlat16_15.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_41));
    u_xlat16_6.xyz = u_xlat16_15.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati38 = int(u_xlatu_loop_1 & 3u);
        u_xlatu8 = u_xlatu_loop_1 >> 2u;
        u_xlat16_41 = dot(unity_LightIndices[int(u_xlatu8)], ImmCB_0[u_xlati38]);
        u_xlati38 = int(u_xlat16_41);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati38].www + _AdditionalLightsPosition[u_xlati38].xyz;
        u_xlat44 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat44 = max(u_xlat44, 6.10351562e-05);
        u_xlat9 = inversesqrt(u_xlat44);
        u_xlat21.xyz = u_xlat8.xyz * vec3(u_xlat9);
        u_xlat10 = float(1.0) / float(u_xlat44);
        u_xlat44 = u_xlat44 * _AdditionalLightsAttenuation[u_xlati38].x + _AdditionalLightsAttenuation[u_xlati38].y;
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
        u_xlat44 = u_xlat44 * u_xlat10;
        u_xlat16_41 = dot(_AdditionalLightsSpotDir[u_xlati38].xyz, u_xlat21.xyz);
        u_xlat16_41 = u_xlat16_41 * _AdditionalLightsAttenuation[u_xlati38].z + _AdditionalLightsAttenuation[u_xlati38].w;
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
        u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
        u_xlat44 = u_xlat16_41 * u_xlat44;
        u_xlat16_41 = dot(vs_TEXCOORD2.xyz, u_xlat21.xyz);
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
        u_xlat16_41 = u_xlat16_41 * u_xlat44;
        u_xlat16_7.xyz = vec3(u_xlat16_41) * _AdditionalLightsColor[u_xlati38].xyz;
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_41 = inversesqrt(u_xlat38);
        u_xlat8.xyz = vec3(u_xlat16_41) * u_xlat8.xyz;
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
        u_xlat8.x = dot(u_xlat21.xyz, u_xlat8.xyz);
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat38 = u_xlat38 * u_xlat13 + 1.00001001;
        u_xlat16_41 = u_xlat8.x * u_xlat8.x;
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat8.x = max(u_xlat16_41, 0.100000001);
        u_xlat38 = u_xlat38 * u_xlat8.x;
        u_xlat38 = u_xlat1.x * u_xlat38;
        u_xlat38 = u_xlat16_40 / u_xlat38;
        u_xlat16_41 = u_xlat38 + -6.10351562e-05;
        u_xlat16_41 = max(u_xlat16_41, 0.0);
        u_xlat16_41 = min(u_xlat16_41, 100.0);
        u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_17;
vec3 u_xlat20;
uint u_xlatu20;
float u_xlat21;
float u_xlat25;
uint u_xlatu25;
mediump float u_xlat16_29;
float u_xlat33;
float u_xlat38;
uint u_xlatu38;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat44;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_3.xzw = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_40 = (-_Smoothness) + 1.0;
    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0078125);
    u_xlat16_15 = u_xlat16_15 + 1.0;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat1.x = u_xlat16_5.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_5.x * u_xlat16_5.x + -1.0;
    u_xlat16_29 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_29)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
    u_xlat16_5.z = (-u_xlat16_29) + 1.0;
    u_xlat16_17.xy = u_xlat16_5.xz * u_xlat16_5.xz;
    u_xlat16_29 = u_xlat16_17.y * u_xlat16_17.y;
    u_xlat16_41 = (-u_xlat16_40) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_40);
    u_xlat16_40 = u_xlat16_0.w + -1.0;
    u_xlat16_40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.y;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_40);
    u_xlat16_40 = u_xlat16_5.x * u_xlat16_5.x + 1.0;
    u_xlat16_40 = float(1.0) / u_xlat16_40;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_15);
    u_xlat16_5.xzw = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat8.xyz = vec3(u_xlat16_40) * u_xlat16_5.xzw;
    u_xlat16_5.xzw = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_5.xzw = vs_TEXCOORD8.xyz * u_xlat16_3.xzw + u_xlat16_5.xzw;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlat16_15 = u_xlat16_15 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_15) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_15 = inversesqrt(u_xlat25);
    u_xlat8.xyz = vec3(u_xlat16_15) * u_xlat8.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat38 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_15 = u_xlat38 * u_xlat38;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat38 = max(u_xlat16_15, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat38;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_17.x / u_xlat25;
    u_xlat16_15 = u_xlat25 + -6.10351562e-05;
    u_xlat16_15 = max(u_xlat16_15, 0.0);
    u_xlat16_15 = min(u_xlat16_15, 100.0);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
    u_xlat16_5.xzw = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xzw;
    u_xlat16_15 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_15));
    u_xlat16_6.xyz = u_xlat16_5.xzw;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati8 = int(u_xlatu_loop_1 & 3u);
        u_xlatu20 = u_xlatu_loop_1 >> 2u;
        u_xlat16_15 = dot(unity_LightIndices[int(u_xlatu20)], ImmCB_0[u_xlati8]);
        u_xlati8 = int(u_xlat16_15);
        u_xlat20.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati8].www + _AdditionalLightsPosition[u_xlati8].xyz;
        u_xlat9 = dot(u_xlat20.xyz, u_xlat20.xyz);
        u_xlat9 = max(u_xlat9, 6.10351562e-05);
        u_xlat21 = inversesqrt(u_xlat9);
        u_xlat10.xyz = u_xlat20.xyz * vec3(u_xlat21);
        u_xlat33 = float(1.0) / float(u_xlat9);
        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati8].x + _AdditionalLightsAttenuation[u_xlati8].y;
        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
        u_xlat9 = u_xlat9 * u_xlat33;
        u_xlat16_15 = dot(_AdditionalLightsSpotDir[u_xlati8].xyz, u_xlat10.xyz);
        u_xlat16_15 = u_xlat16_15 * _AdditionalLightsAttenuation[u_xlati8].z + _AdditionalLightsAttenuation[u_xlati8].w;
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
        u_xlat16_15 = u_xlat16_15 * u_xlat16_15;
        u_xlat9 = u_xlat16_15 * u_xlat9;
        u_xlat16_15 = dot(vs_TEXCOORD2.xyz, u_xlat10.xyz);
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
        u_xlat16_15 = u_xlat16_15 * u_xlat9;
        u_xlat16_7.xyz = vec3(u_xlat16_15) * _AdditionalLightsColor[u_xlati8].xyz;
        u_xlat8.xyz = u_xlat20.xyz * vec3(u_xlat21) + vs_TEXCOORD3.xyz;
        u_xlat44 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat44 = max(u_xlat44, 1.17549435e-38);
        u_xlat16_15 = inversesqrt(u_xlat44);
        u_xlat8.xyz = vec3(u_xlat16_15) * u_xlat8.xyz;
        u_xlat44 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
        u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
        u_xlat20.x = u_xlat44 * u_xlat44;
        u_xlat20.x = u_xlat20.x * u_xlat13 + 1.00001001;
        u_xlat16_15 = u_xlat8.x * u_xlat8.x;
        u_xlat8.x = u_xlat20.x * u_xlat20.x;
        u_xlat20.x = max(u_xlat16_15, 0.100000001);
        u_xlat8.x = u_xlat20.x * u_xlat8.x;
        u_xlat8.x = u_xlat1.x * u_xlat8.x;
        u_xlat8.x = u_xlat16_17.x / u_xlat8.x;
        u_xlat16_15 = u_xlat8.x + -6.10351562e-05;
        u_xlat16_15 = max(u_xlat16_15, 0.0);
        u_xlat16_15 = min(u_xlat16_15, 100.0);
        u_xlat16_11.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
vec3 u_xlat13;
uint u_xlatu13;
mediump vec3 u_xlat16_14;
float u_xlat19;
float u_xlat23;
uint u_xlatu23;
mediump float u_xlat16_25;
float u_xlat30;
float u_xlat34;
uint u_xlatu34;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13.x;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13.x;
        u_xlat13.x = u_xlat13.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_37 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    u_xlat16_38 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_38 = u_xlat16_38 + u_xlat16_38;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_38)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_38 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_39 = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_39;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_25);
    u_xlat16_7.xyz = vec3(u_xlat16_38) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_38 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_38 = u_xlat34 * u_xlat34;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat34 = max(u_xlat16_38, 0.100000001);
    u_xlat23 = u_xlat34 * u_xlat23;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_37 / u_xlat23;
    u_xlat16_38 = u_xlat23 + -6.10351562e-05;
    u_xlat16_38 = max(u_xlat16_38, 0.0);
    u_xlat16_38 = min(u_xlat16_38, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
    u_xlat16_14.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_38));
    u_xlat16_6.xyz = u_xlat16_14.xyz;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(u_xlatu_loop_1 & 3u);
        u_xlatu13 = u_xlatu_loop_1 >> 2u;
        u_xlat16_38 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_38);
        u_xlat13.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat8 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat8 = max(u_xlat8, 6.10351562e-05);
        u_xlat19 = inversesqrt(u_xlat8);
        u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat19);
        u_xlat30 = float(1.0) / float(u_xlat8);
        u_xlat8 = u_xlat8 * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
        u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
        u_xlat8 = u_xlat8 * u_xlat30;
        u_xlat16_38 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat9.xyz);
        u_xlat16_38 = u_xlat16_38 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
        u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
        u_xlat8 = u_xlat16_38 * u_xlat8;
        u_xlat16_38 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
        u_xlat16_38 = u_xlat16_38 * u_xlat8;
        u_xlat16_7.xyz = vec3(u_xlat16_38) * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat2.xyz = u_xlat13.xyz * vec3(u_xlat19) + vs_TEXCOORD3.xyz;
        u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat35 = max(u_xlat35, 1.17549435e-38);
        u_xlat16_38 = inversesqrt(u_xlat35);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
        u_xlat35 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
        u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
        u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat13.x = u_xlat35 * u_xlat35;
        u_xlat13.x = u_xlat13.x * u_xlat12 + 1.00001001;
        u_xlat16_38 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat13.x * u_xlat13.x;
        u_xlat13.x = max(u_xlat16_38, 0.100000001);
        u_xlat2.x = u_xlat13.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_37 / u_xlat2.x;
        u_xlat16_38 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_38 = max(u_xlat16_38, 0.0);
        u_xlat16_38 = min(u_xlat16_38, 100.0);
        u_xlat16_10.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
uint u_xlatu7;
vec3 u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_15;
vec3 u_xlat18;
int u_xlati18;
bool u_xlatb18;
float u_xlat23;
uint u_xlatu23;
mediump float u_xlat16_26;
float u_xlat29;
uint u_xlatu29;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
float u_xlat40;
float u_xlat41;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_13 = (-u_xlat16_2.x) + _Smoothness;
    u_xlat16_2.xzw = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_36 = (-_Smoothness) + 1.0;
    u_xlat16_4.x = u_xlat16_36 * u_xlat16_36;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0078125);
    u_xlat16_13 = u_xlat16_13 + 1.0;
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
    u_xlat1.x = u_xlat16_4.x * 4.0 + 2.0;
    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x + -1.0;
    u_xlat16_26 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_26 = u_xlat16_26 + u_xlat16_26;
    u_xlat16_5.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_26)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
    u_xlat16_4.z = (-u_xlat16_26) + 1.0;
    u_xlat16_15.xy = u_xlat16_4.xz * u_xlat16_4.xz;
    u_xlat16_26 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
    u_xlat16_36 = u_xlat16_36 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_36);
    u_xlat16_36 = u_xlat16_0.w + -1.0;
    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_36);
    u_xlat16_36 = u_xlat16_4.x * u_xlat16_4.x + 1.0;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_13);
    u_xlat16_4.xzw = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat7.xyz = vec3(u_xlat16_36) * u_xlat16_4.xzw;
    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat7.xyz;
    u_xlat16_4.xzw = vs_TEXCOORD8.xyz * u_xlat16_2.xzw + u_xlat16_4.xzw;
    u_xlat16_13 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
    u_xlat16_13 = u_xlat16_13 * unity_LightData.z;
    u_xlat16_5.xyz = vec3(u_xlat16_13) * _MainLightColor.xyz;
    u_xlat7.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_13 = inversesqrt(u_xlat23);
    u_xlat7.xyz = vec3(u_xlat16_13) * u_xlat7.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat7.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat7.x = dot(_MainLightPosition.xyz, u_xlat7.xyz);
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_13 = u_xlat7.x * u_xlat7.x;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat7.x = max(u_xlat16_13, 0.100000001);
    u_xlat23 = u_xlat23 * u_xlat7.x;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_15.x / u_xlat23;
    u_xlat16_13 = u_xlat23 + -6.10351562e-05;
    u_xlat16_13 = max(u_xlat16_13, 0.0);
    u_xlat16_13 = min(u_xlat16_13, 100.0);
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
    u_xlat16_4.xzw = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;
    u_xlat16_13 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_13));
    u_xlat16_5.xyz = u_xlat16_4.xzw;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati18 = int(u_xlatu_loop_1 & 3u);
        u_xlatu29 = u_xlatu_loop_1 >> 2u;
        u_xlat16_13 = dot(unity_LightIndices[int(u_xlatu29)], ImmCB_0[u_xlati18]);
        u_xlati18 = int(u_xlat16_13);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati18].www + _AdditionalLightsPosition[u_xlati18].xyz;
        u_xlat29 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat29 = max(u_xlat29, 6.10351562e-05);
        u_xlat40 = inversesqrt(u_xlat29);
        u_xlat9.xyz = vec3(u_xlat40) * u_xlat8.xyz;
        u_xlat41 = float(1.0) / float(u_xlat29);
        u_xlat29 = u_xlat29 * _AdditionalLightsAttenuation[u_xlati18].x + _AdditionalLightsAttenuation[u_xlati18].y;
        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
        u_xlat29 = u_xlat29 * u_xlat41;
        u_xlat16_13 = dot(_AdditionalLightsSpotDir[u_xlati18].xyz, u_xlat9.xyz);
        u_xlat16_13 = u_xlat16_13 * _AdditionalLightsAttenuation[u_xlati18].z + _AdditionalLightsAttenuation[u_xlati18].w;
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
        u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
        u_xlat29 = u_xlat16_13 * u_xlat29;
        u_xlat16_13 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
        u_xlat16_13 = u_xlat16_13 * u_xlat29;
        u_xlat16_6.xyz = vec3(u_xlat16_13) * _AdditionalLightsColor[u_xlati18].xyz;
        u_xlat18.xyz = u_xlat8.xyz * vec3(u_xlat40) + vs_TEXCOORD3.xyz;
        u_xlat8.x = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
        u_xlat16_13 = inversesqrt(u_xlat8.x);
        u_xlat18.xyz = vec3(u_xlat16_13) * u_xlat18.xyz;
        u_xlat8.x = dot(vs_TEXCOORD2.xyz, u_xlat18.xyz);
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
        u_xlat18.x = dot(u_xlat9.xyz, u_xlat18.xyz);
        u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
        u_xlat29 = u_xlat8.x * u_xlat8.x;
        u_xlat29 = u_xlat29 * u_xlat12 + 1.00001001;
        u_xlat16_13 = u_xlat18.x * u_xlat18.x;
        u_xlat18.x = u_xlat29 * u_xlat29;
        u_xlat29 = max(u_xlat16_13, 0.100000001);
        u_xlat18.x = u_xlat29 * u_xlat18.x;
        u_xlat18.x = u_xlat1.x * u_xlat18.x;
        u_xlat18.x = u_xlat16_15.x / u_xlat18.x;
        u_xlat16_13 = u_xlat18.x + -6.10351562e-05;
        u_xlat16_13 = max(u_xlat16_13, 0.0);
        u_xlat16_13 = min(u_xlat16_13, 100.0);
        u_xlat16_10.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
        u_xlat16_5.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    }
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
uint u_xlatu8;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
vec3 u_xlat21;
float u_xlat25;
uint u_xlatu25;
mediump float u_xlat16_27;
float u_xlat37;
uint u_xlatu37;
float u_xlat38;
int u_xlati38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
float u_xlat44;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    u_xlat16_41 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_41)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_42 = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_42;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);
    u_xlat16_7.xyz = vec3(u_xlat16_41) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_15.xxx * u_xlat16_7.xyz;
    u_xlat16_15.xyz = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat25);
    u_xlat8.xyz = vec3(u_xlat16_41) * u_xlat8.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_41 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_41, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_40 / u_xlat25;
    u_xlat16_41 = u_xlat25 + -6.10351562e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
    u_xlat16_15.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_41));
    u_xlat16_6.xyz = u_xlat16_15.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati38 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu8 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_41 = dot(unity_LightIndices[int(u_xlatu8)], ImmCB_0[u_xlati38]);
        u_xlati38 = int(u_xlat16_41);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati38].www + _AdditionalLightsPosition[u_xlati38].xyz;
        u_xlat44 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat44 = max(u_xlat44, 6.10351562e-05);
        u_xlat9 = inversesqrt(u_xlat44);
        u_xlat21.xyz = u_xlat8.xyz * vec3(u_xlat9);
        u_xlat10 = float(1.0) / float(u_xlat44);
        u_xlat44 = u_xlat44 * _AdditionalLightsAttenuation[u_xlati38].x + _AdditionalLightsAttenuation[u_xlati38].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
        u_xlat44 = u_xlat44 * u_xlat10;
        u_xlat16_41 = dot(_AdditionalLightsSpotDir[u_xlati38].xyz, u_xlat21.xyz);
        u_xlat16_41 = u_xlat16_41 * _AdditionalLightsAttenuation[u_xlati38].z + _AdditionalLightsAttenuation[u_xlati38].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
        u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
        u_xlat44 = u_xlat16_41 * u_xlat44;
        u_xlat16_41 = dot(vs_TEXCOORD2.xyz, u_xlat21.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
        u_xlat16_41 = u_xlat16_41 * u_xlat44;
        u_xlat16_7.xyz = vec3(u_xlat16_41) * _AdditionalLightsColor[u_xlati38].xyz;
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_41 = inversesqrt(u_xlat38);
        u_xlat8.xyz = vec3(u_xlat16_41) * u_xlat8.xyz;
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
        u_xlat8.x = dot(u_xlat21.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat38 = u_xlat38 * u_xlat13 + 1.00001001;
        u_xlat16_41 = u_xlat8.x * u_xlat8.x;
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat8.x = max(u_xlat16_41, 0.100000001);
        u_xlat38 = u_xlat38 * u_xlat8.x;
        u_xlat38 = u_xlat1.x * u_xlat38;
        u_xlat38 = u_xlat16_40 / u_xlat38;
        u_xlat16_41 = u_xlat38 + -6.10351562e-05;
        u_xlat16_41 = max(u_xlat16_41, 0.0);
        u_xlat16_41 = min(u_xlat16_41, 100.0);
        u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_17;
vec3 u_xlat20;
uint u_xlatu20;
float u_xlat21;
float u_xlat25;
uint u_xlatu25;
mediump float u_xlat16_29;
float u_xlat33;
float u_xlat38;
uint u_xlatu38;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat44;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_3.xzw = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_40 = (-_Smoothness) + 1.0;
    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0078125);
    u_xlat16_15 = u_xlat16_15 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_5.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_5.x * u_xlat16_5.x + -1.0;
    u_xlat16_29 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_29)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_5.z = (-u_xlat16_29) + 1.0;
    u_xlat16_17.xy = u_xlat16_5.xz * u_xlat16_5.xz;
    u_xlat16_29 = u_xlat16_17.y * u_xlat16_17.y;
    u_xlat16_41 = (-u_xlat16_40) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_40);
    u_xlat16_40 = u_xlat16_0.w + -1.0;
    u_xlat16_40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.y;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_40);
    u_xlat16_40 = u_xlat16_5.x * u_xlat16_5.x + 1.0;
    u_xlat16_40 = float(1.0) / u_xlat16_40;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_15);
    u_xlat16_5.xzw = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat8.xyz = vec3(u_xlat16_40) * u_xlat16_5.xzw;
    u_xlat16_5.xzw = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_5.xzw = vs_TEXCOORD8.xyz * u_xlat16_3.xzw + u_xlat16_5.xzw;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_15) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_15 = inversesqrt(u_xlat25);
    u_xlat8.xyz = vec3(u_xlat16_15) * u_xlat8.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat38 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_15 = u_xlat38 * u_xlat38;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat38 = max(u_xlat16_15, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat38;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_17.x / u_xlat25;
    u_xlat16_15 = u_xlat25 + -6.10351562e-05;
    u_xlat16_15 = max(u_xlat16_15, 0.0);
    u_xlat16_15 = min(u_xlat16_15, 100.0);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
    u_xlat16_5.xzw = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xzw;
    u_xlat16_15 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_15));
    u_xlat16_6.xyz = u_xlat16_5.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati8 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu20 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_15 = dot(unity_LightIndices[int(u_xlatu20)], ImmCB_0[u_xlati8]);
        u_xlati8 = int(u_xlat16_15);
        u_xlat20.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati8].www + _AdditionalLightsPosition[u_xlati8].xyz;
        u_xlat9 = dot(u_xlat20.xyz, u_xlat20.xyz);
        u_xlat9 = max(u_xlat9, 6.10351562e-05);
        u_xlat21 = inversesqrt(u_xlat9);
        u_xlat10.xyz = u_xlat20.xyz * vec3(u_xlat21);
        u_xlat33 = float(1.0) / float(u_xlat9);
        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati8].x + _AdditionalLightsAttenuation[u_xlati8].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
        u_xlat9 = u_xlat9 * u_xlat33;
        u_xlat16_15 = dot(_AdditionalLightsSpotDir[u_xlati8].xyz, u_xlat10.xyz);
        u_xlat16_15 = u_xlat16_15 * _AdditionalLightsAttenuation[u_xlati8].z + _AdditionalLightsAttenuation[u_xlati8].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat16_15 = u_xlat16_15 * u_xlat16_15;
        u_xlat9 = u_xlat16_15 * u_xlat9;
        u_xlat16_15 = dot(vs_TEXCOORD2.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat16_15 = u_xlat16_15 * u_xlat9;
        u_xlat16_7.xyz = vec3(u_xlat16_15) * _AdditionalLightsColor[u_xlati8].xyz;
        u_xlat8.xyz = u_xlat20.xyz * vec3(u_xlat21) + vs_TEXCOORD3.xyz;
        u_xlat44 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat44 = max(u_xlat44, 1.17549435e-38);
        u_xlat16_15 = inversesqrt(u_xlat44);
        u_xlat8.xyz = vec3(u_xlat16_15) * u_xlat8.xyz;
        u_xlat44 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
        u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
        u_xlat20.x = u_xlat44 * u_xlat44;
        u_xlat20.x = u_xlat20.x * u_xlat13 + 1.00001001;
        u_xlat16_15 = u_xlat8.x * u_xlat8.x;
        u_xlat8.x = u_xlat20.x * u_xlat20.x;
        u_xlat20.x = max(u_xlat16_15, 0.100000001);
        u_xlat8.x = u_xlat20.x * u_xlat8.x;
        u_xlat8.x = u_xlat1.x * u_xlat8.x;
        u_xlat8.x = u_xlat16_17.x / u_xlat8.x;
        u_xlat16_15 = u_xlat8.x + -6.10351562e-05;
        u_xlat16_15 = max(u_xlat16_15, 0.0);
        u_xlat16_15 = min(u_xlat16_15, 100.0);
        u_xlat16_11.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
vec3 u_xlat13;
uint u_xlatu13;
mediump vec3 u_xlat16_14;
float u_xlat19;
float u_xlat23;
uint u_xlatu23;
mediump float u_xlat16_25;
float u_xlat30;
float u_xlat34;
uint u_xlatu34;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13.x;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13.x;
        u_xlat13.x = u_xlat13.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_37 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    u_xlat16_38 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_38 = u_xlat16_38 + u_xlat16_38;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_38)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_38 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_39 = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_39;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_25);
    u_xlat16_7.xyz = vec3(u_xlat16_38) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_38 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_38 = u_xlat34 * u_xlat34;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat34 = max(u_xlat16_38, 0.100000001);
    u_xlat23 = u_xlat34 * u_xlat23;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_37 / u_xlat23;
    u_xlat16_38 = u_xlat23 + -6.10351562e-05;
    u_xlat16_38 = max(u_xlat16_38, 0.0);
    u_xlat16_38 = min(u_xlat16_38, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
    u_xlat16_14.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_38));
    u_xlat16_6.xyz = u_xlat16_14.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu13 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_38 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_38);
        u_xlat13.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat8 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat8 = max(u_xlat8, 6.10351562e-05);
        u_xlat19 = inversesqrt(u_xlat8);
        u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat19);
        u_xlat30 = float(1.0) / float(u_xlat8);
        u_xlat8 = u_xlat8 * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
        u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
        u_xlat8 = u_xlat8 * u_xlat30;
        u_xlat16_38 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat9.xyz);
        u_xlat16_38 = u_xlat16_38 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
        u_xlat8 = u_xlat16_38 * u_xlat8;
        u_xlat16_38 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat8;
        u_xlat16_7.xyz = vec3(u_xlat16_38) * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat2.xyz = u_xlat13.xyz * vec3(u_xlat19) + vs_TEXCOORD3.xyz;
        u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat35 = max(u_xlat35, 1.17549435e-38);
        u_xlat16_38 = inversesqrt(u_xlat35);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
        u_xlat35 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
        u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
        u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
        u_xlat13.x = u_xlat35 * u_xlat35;
        u_xlat13.x = u_xlat13.x * u_xlat12 + 1.00001001;
        u_xlat16_38 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat13.x * u_xlat13.x;
        u_xlat13.x = max(u_xlat16_38, 0.100000001);
        u_xlat2.x = u_xlat13.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_37 / u_xlat2.x;
        u_xlat16_38 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_38 = max(u_xlat16_38, 0.0);
        u_xlat16_38 = min(u_xlat16_38, 100.0);
        u_xlat16_10.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
uint u_xlatu7;
vec3 u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_15;
vec3 u_xlat18;
int u_xlati18;
bool u_xlatb18;
float u_xlat23;
uint u_xlatu23;
mediump float u_xlat16_26;
float u_xlat29;
uint u_xlatu29;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
float u_xlat40;
float u_xlat41;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_13 = (-u_xlat16_2.x) + _Smoothness;
    u_xlat16_2.xzw = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_36 = (-_Smoothness) + 1.0;
    u_xlat16_4.x = u_xlat16_36 * u_xlat16_36;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0078125);
    u_xlat16_13 = u_xlat16_13 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_4.x * 4.0 + 2.0;
    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x + -1.0;
    u_xlat16_26 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_26 = u_xlat16_26 + u_xlat16_26;
    u_xlat16_5.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_26)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_4.z = (-u_xlat16_26) + 1.0;
    u_xlat16_15.xy = u_xlat16_4.xz * u_xlat16_4.xz;
    u_xlat16_26 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
    u_xlat16_36 = u_xlat16_36 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_36);
    u_xlat16_36 = u_xlat16_0.w + -1.0;
    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_36);
    u_xlat16_36 = u_xlat16_4.x * u_xlat16_4.x + 1.0;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_13);
    u_xlat16_4.xzw = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat7.xyz = vec3(u_xlat16_36) * u_xlat16_4.xzw;
    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat7.xyz;
    u_xlat16_4.xzw = vs_TEXCOORD8.xyz * u_xlat16_2.xzw + u_xlat16_4.xzw;
    u_xlat16_13 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_13 * unity_LightData.z;
    u_xlat16_5.xyz = vec3(u_xlat16_13) * _MainLightColor.xyz;
    u_xlat7.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_13 = inversesqrt(u_xlat23);
    u_xlat7.xyz = vec3(u_xlat16_13) * u_xlat7.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = dot(_MainLightPosition.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_13 = u_xlat7.x * u_xlat7.x;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat7.x = max(u_xlat16_13, 0.100000001);
    u_xlat23 = u_xlat23 * u_xlat7.x;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_15.x / u_xlat23;
    u_xlat16_13 = u_xlat23 + -6.10351562e-05;
    u_xlat16_13 = max(u_xlat16_13, 0.0);
    u_xlat16_13 = min(u_xlat16_13, 100.0);
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
    u_xlat16_4.xzw = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;
    u_xlat16_13 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_13));
    u_xlat16_5.xyz = u_xlat16_4.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati18 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu29 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_13 = dot(unity_LightIndices[int(u_xlatu29)], ImmCB_0[u_xlati18]);
        u_xlati18 = int(u_xlat16_13);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati18].www + _AdditionalLightsPosition[u_xlati18].xyz;
        u_xlat29 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat29 = max(u_xlat29, 6.10351562e-05);
        u_xlat40 = inversesqrt(u_xlat29);
        u_xlat9.xyz = vec3(u_xlat40) * u_xlat8.xyz;
        u_xlat41 = float(1.0) / float(u_xlat29);
        u_xlat29 = u_xlat29 * _AdditionalLightsAttenuation[u_xlati18].x + _AdditionalLightsAttenuation[u_xlati18].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
        u_xlat29 = u_xlat29 * u_xlat41;
        u_xlat16_13 = dot(_AdditionalLightsSpotDir[u_xlati18].xyz, u_xlat9.xyz);
        u_xlat16_13 = u_xlat16_13 * _AdditionalLightsAttenuation[u_xlati18].z + _AdditionalLightsAttenuation[u_xlati18].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
        u_xlat29 = u_xlat16_13 * u_xlat29;
        u_xlat16_13 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat16_13 = u_xlat16_13 * u_xlat29;
        u_xlat16_6.xyz = vec3(u_xlat16_13) * _AdditionalLightsColor[u_xlati18].xyz;
        u_xlat18.xyz = u_xlat8.xyz * vec3(u_xlat40) + vs_TEXCOORD3.xyz;
        u_xlat8.x = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
        u_xlat16_13 = inversesqrt(u_xlat8.x);
        u_xlat18.xyz = vec3(u_xlat16_13) * u_xlat18.xyz;
        u_xlat8.x = dot(vs_TEXCOORD2.xyz, u_xlat18.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
        u_xlat18.x = dot(u_xlat9.xyz, u_xlat18.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
        u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
        u_xlat29 = u_xlat8.x * u_xlat8.x;
        u_xlat29 = u_xlat29 * u_xlat12 + 1.00001001;
        u_xlat16_13 = u_xlat18.x * u_xlat18.x;
        u_xlat18.x = u_xlat29 * u_xlat29;
        u_xlat29 = max(u_xlat16_13, 0.100000001);
        u_xlat18.x = u_xlat29 * u_xlat18.x;
        u_xlat18.x = u_xlat1.x * u_xlat18.x;
        u_xlat18.x = u_xlat16_15.x / u_xlat18.x;
        u_xlat16_13 = u_xlat18.x + -6.10351562e-05;
        u_xlat16_13 = max(u_xlat16_13, 0.0);
        u_xlat16_13 = min(u_xlat16_13, 100.0);
        u_xlat16_10.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
        u_xlat16_5.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    }
    SV_Target0.xyz = u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
uint u_xlatu8;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_15;
vec3 u_xlat21;
float u_xlat25;
uint u_xlatu25;
mediump float u_xlat16_27;
float u_xlat37;
uint u_xlatu37;
float u_xlat38;
int u_xlati38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
float u_xlat44;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat14 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat14;
        u_xlat14 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat14;
        u_xlat14 = u_xlat14 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat14) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat37 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat37 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_27 = (-u_xlat16_15.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_15.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_15.x = (-_Smoothness) + 1.0;
    u_xlat16_39 = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_39 = max(u_xlat16_39, 0.0078125);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_27 = u_xlat16_27 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_39 * 4.0 + 2.0;
    u_xlat13 = u_xlat16_39 * u_xlat16_39 + -1.0;
    u_xlat16_41 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_41)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_41 = (-u_xlat16_41) + 1.0;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_42 = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_42;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_0.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_39 * u_xlat16_39 + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);
    u_xlat16_7.xyz = vec3(u_xlat16_41) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_15.xxx * u_xlat16_7.xyz;
    u_xlat16_15.xyz = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_15.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_41 = u_xlat16_41 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_41 = inversesqrt(u_xlat25);
    u_xlat8.xyz = vec3(u_xlat16_41) * u_xlat8.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat37 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_41 = u_xlat37 * u_xlat37;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat37 = max(u_xlat16_41, 0.100000001);
    u_xlat25 = u_xlat37 * u_xlat25;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_40 / u_xlat25;
    u_xlat16_41 = u_xlat25 + -6.10351562e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
    u_xlat16_15.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_15.xyz;
    u_xlat16_41 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_41));
    u_xlat16_6.xyz = u_xlat16_15.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati38 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu8 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_41 = dot(unity_LightIndices[int(u_xlatu8)], ImmCB_0[u_xlati38]);
        u_xlati38 = int(u_xlat16_41);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati38].www + _AdditionalLightsPosition[u_xlati38].xyz;
        u_xlat44 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat44 = max(u_xlat44, 6.10351562e-05);
        u_xlat9 = inversesqrt(u_xlat44);
        u_xlat21.xyz = u_xlat8.xyz * vec3(u_xlat9);
        u_xlat10 = float(1.0) / float(u_xlat44);
        u_xlat44 = u_xlat44 * _AdditionalLightsAttenuation[u_xlati38].x + _AdditionalLightsAttenuation[u_xlati38].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
        u_xlat44 = u_xlat44 * u_xlat10;
        u_xlat16_41 = dot(_AdditionalLightsSpotDir[u_xlati38].xyz, u_xlat21.xyz);
        u_xlat16_41 = u_xlat16_41 * _AdditionalLightsAttenuation[u_xlati38].z + _AdditionalLightsAttenuation[u_xlati38].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
        u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
        u_xlat44 = u_xlat16_41 * u_xlat44;
        u_xlat16_41 = dot(vs_TEXCOORD2.xyz, u_xlat21.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
        u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
        u_xlat16_41 = u_xlat16_41 * u_xlat44;
        u_xlat16_7.xyz = vec3(u_xlat16_41) * _AdditionalLightsColor[u_xlati38].xyz;
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9) + vs_TEXCOORD3.xyz;
        u_xlat38 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat38 = max(u_xlat38, 1.17549435e-38);
        u_xlat16_41 = inversesqrt(u_xlat38);
        u_xlat8.xyz = vec3(u_xlat16_41) * u_xlat8.xyz;
        u_xlat38 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
        u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
        u_xlat8.x = dot(u_xlat21.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat38 = u_xlat38 * u_xlat13 + 1.00001001;
        u_xlat16_41 = u_xlat8.x * u_xlat8.x;
        u_xlat38 = u_xlat38 * u_xlat38;
        u_xlat8.x = max(u_xlat16_41, 0.100000001);
        u_xlat38 = u_xlat38 * u_xlat8.x;
        u_xlat38 = u_xlat1.x * u_xlat38;
        u_xlat38 = u_xlat16_40 / u_xlat38;
        u_xlat16_41 = u_xlat38 + -6.10351562e-05;
        u_xlat16_41 = max(u_xlat16_41, 0.0);
        u_xlat16_41 = min(u_xlat16_41, 100.0);
        u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(u_xlat16_41) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_17;
vec3 u_xlat20;
uint u_xlatu20;
float u_xlat21;
float u_xlat25;
uint u_xlatu25;
mediump float u_xlat16_29;
float u_xlat33;
float u_xlat38;
uint u_xlatu38;
mediump float u_xlat16_40;
mediump float u_xlat16_41;
float u_xlat44;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_3.x) + _Smoothness;
    u_xlat16_3.xzw = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_40 = (-_Smoothness) + 1.0;
    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0078125);
    u_xlat16_15 = u_xlat16_15 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_5.x * 4.0 + 2.0;
    u_xlat13 = u_xlat16_5.x * u_xlat16_5.x + -1.0;
    u_xlat16_29 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_29)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_5.z = (-u_xlat16_29) + 1.0;
    u_xlat16_17.xy = u_xlat16_5.xz * u_xlat16_5.xz;
    u_xlat16_29 = u_xlat16_17.y * u_xlat16_17.y;
    u_xlat16_41 = (-u_xlat16_40) * 0.699999988 + 1.70000005;
    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;
    u_xlat16_40 = u_xlat16_40 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_40);
    u_xlat16_40 = u_xlat16_0.w + -1.0;
    u_xlat16_40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.y;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_40);
    u_xlat16_40 = u_xlat16_5.x * u_xlat16_5.x + 1.0;
    u_xlat16_40 = float(1.0) / u_xlat16_40;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) + vec3(u_xlat16_15);
    u_xlat16_5.xzw = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat8.xyz = vec3(u_xlat16_40) * u_xlat16_5.xzw;
    u_xlat16_5.xzw = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_5.xzw = vs_TEXCOORD8.xyz * u_xlat16_3.xzw + u_xlat16_5.xzw;
    u_xlat16_15 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_15) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat25 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = max(u_xlat25, 1.17549435e-38);
    u_xlat16_15 = inversesqrt(u_xlat25);
    u_xlat8.xyz = vec3(u_xlat16_15) * u_xlat8.xyz;
    u_xlat25 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat38 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat13 + 1.00001001;
    u_xlat16_15 = u_xlat38 * u_xlat38;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat38 = max(u_xlat16_15, 0.100000001);
    u_xlat25 = u_xlat25 * u_xlat38;
    u_xlat25 = u_xlat1.x * u_xlat25;
    u_xlat25 = u_xlat16_17.x / u_xlat25;
    u_xlat16_15 = u_xlat25 + -6.10351562e-05;
    u_xlat16_15 = max(u_xlat16_15, 0.0);
    u_xlat16_15 = min(u_xlat16_15, 100.0);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
    u_xlat16_5.xzw = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xzw;
    u_xlat16_15 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu25 =  uint(int(u_xlat16_15));
    u_xlat16_6.xyz = u_xlat16_5.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu25 ; u_xlatu_loop_1++)
    {
        u_xlati8 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu20 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_15 = dot(unity_LightIndices[int(u_xlatu20)], ImmCB_0[u_xlati8]);
        u_xlati8 = int(u_xlat16_15);
        u_xlat20.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati8].www + _AdditionalLightsPosition[u_xlati8].xyz;
        u_xlat9 = dot(u_xlat20.xyz, u_xlat20.xyz);
        u_xlat9 = max(u_xlat9, 6.10351562e-05);
        u_xlat21 = inversesqrt(u_xlat9);
        u_xlat10.xyz = u_xlat20.xyz * vec3(u_xlat21);
        u_xlat33 = float(1.0) / float(u_xlat9);
        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati8].x + _AdditionalLightsAttenuation[u_xlati8].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
        u_xlat9 = u_xlat9 * u_xlat33;
        u_xlat16_15 = dot(_AdditionalLightsSpotDir[u_xlati8].xyz, u_xlat10.xyz);
        u_xlat16_15 = u_xlat16_15 * _AdditionalLightsAttenuation[u_xlati8].z + _AdditionalLightsAttenuation[u_xlati8].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat16_15 = u_xlat16_15 * u_xlat16_15;
        u_xlat9 = u_xlat16_15 * u_xlat9;
        u_xlat16_15 = dot(vs_TEXCOORD2.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat16_15 = u_xlat16_15 * u_xlat9;
        u_xlat16_7.xyz = vec3(u_xlat16_15) * _AdditionalLightsColor[u_xlati8].xyz;
        u_xlat8.xyz = u_xlat20.xyz * vec3(u_xlat21) + vs_TEXCOORD3.xyz;
        u_xlat44 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat44 = max(u_xlat44, 1.17549435e-38);
        u_xlat16_15 = inversesqrt(u_xlat44);
        u_xlat8.xyz = vec3(u_xlat16_15) * u_xlat8.xyz;
        u_xlat44 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
        u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
        u_xlat20.x = u_xlat44 * u_xlat44;
        u_xlat20.x = u_xlat20.x * u_xlat13 + 1.00001001;
        u_xlat16_15 = u_xlat8.x * u_xlat8.x;
        u_xlat8.x = u_xlat20.x * u_xlat20.x;
        u_xlat20.x = max(u_xlat16_15, 0.100000001);
        u_xlat8.x = u_xlat20.x * u_xlat8.x;
        u_xlat8.x = u_xlat1.x * u_xlat8.x;
        u_xlat8.x = u_xlat16_17.x / u_xlat8.x;
        u_xlat16_15 = u_xlat8.x + -6.10351562e-05;
        u_xlat16_15 = max(u_xlat16_15, 0.0);
        u_xlat16_15 = min(u_xlat16_15, 100.0);
        u_xlat16_11.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat16_3.xzw;
        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
vec3 u_xlat13;
uint u_xlatu13;
mediump vec3 u_xlat16_14;
float u_xlat19;
float u_xlat23;
uint u_xlatu23;
mediump float u_xlat16_25;
float u_xlat30;
float u_xlat34;
uint u_xlatu34;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat13.x = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat13.x;
        u_xlat13.x = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat13.x;
        u_xlat13.x = u_xlat13.x + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat13.x) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat34 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat34 * u_xlat2.x;
    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_25 = (-u_xlat16_14.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_14.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14.x = (-_Smoothness) + 1.0;
    u_xlat16_36 = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_36 = max(u_xlat16_36, 0.0078125);
    u_xlat16_37 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_25 = u_xlat16_25 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_36 * 4.0 + 2.0;
    u_xlat12 = u_xlat16_36 * u_xlat16_36 + -1.0;
    u_xlat16_38 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_38 = u_xlat16_38 + u_xlat16_38;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_38)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_38 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_39 = (-u_xlat16_14.x) * 0.699999988 + 1.70000005;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_39;
    u_xlat16_14.x = u_xlat16_14.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_0.w + -1.0;
    u_xlat16_14.x = unity_SpecCube0_HDR.w * u_xlat16_14.x + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.y;
    u_xlat16_14.x = exp2(u_xlat16_14.x);
    u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_14.x = u_xlat16_36 * u_xlat16_36 + 1.0;
    u_xlat16_14.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_25);
    u_xlat16_7.xyz = vec3(u_xlat16_38) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_14.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_38 = inversesqrt(u_xlat23);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat34 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_38 = u_xlat34 * u_xlat34;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat34 = max(u_xlat16_38, 0.100000001);
    u_xlat23 = u_xlat34 * u_xlat23;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_37 / u_xlat23;
    u_xlat16_38 = u_xlat23 + -6.10351562e-05;
    u_xlat16_38 = max(u_xlat16_38, 0.0);
    u_xlat16_38 = min(u_xlat16_38, 100.0);
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
    u_xlat16_14.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_14.xyz;
    u_xlat16_38 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_38));
    u_xlat16_6.xyz = u_xlat16_14.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu13 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_38 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_38);
        u_xlat13.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat8 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat8 = max(u_xlat8, 6.10351562e-05);
        u_xlat19 = inversesqrt(u_xlat8);
        u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat19);
        u_xlat30 = float(1.0) / float(u_xlat8);
        u_xlat8 = u_xlat8 * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
        u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
        u_xlat8 = u_xlat8 * u_xlat30;
        u_xlat16_38 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat9.xyz);
        u_xlat16_38 = u_xlat16_38 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
        u_xlat8 = u_xlat16_38 * u_xlat8;
        u_xlat16_38 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat16_38 = u_xlat16_38 * u_xlat8;
        u_xlat16_7.xyz = vec3(u_xlat16_38) * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat2.xyz = u_xlat13.xyz * vec3(u_xlat19) + vs_TEXCOORD3.xyz;
        u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat35 = max(u_xlat35, 1.17549435e-38);
        u_xlat16_38 = inversesqrt(u_xlat35);
        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_38);
        u_xlat35 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
        u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
        u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
        u_xlat13.x = u_xlat35 * u_xlat35;
        u_xlat13.x = u_xlat13.x * u_xlat12 + 1.00001001;
        u_xlat16_38 = u_xlat2.x * u_xlat2.x;
        u_xlat2.x = u_xlat13.x * u_xlat13.x;
        u_xlat13.x = max(u_xlat16_38, 0.100000001);
        u_xlat2.x = u_xlat13.x * u_xlat2.x;
        u_xlat2.x = u_xlat1.x * u_xlat2.x;
        u_xlat2.x = u_xlat16_37 / u_xlat2.x;
        u_xlat16_38 = u_xlat2.x + -6.10351562e-05;
        u_xlat16_38 = max(u_xlat16_38, 0.0);
        u_xlat16_38 = min(u_xlat16_38, 100.0);
        u_xlat16_10.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat16_4.xyz;
        u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;
    }
    SV_Target0.xyz = u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[16];
uniform 	mediump vec4 _AdditionalLightsColor[16];
uniform 	mediump vec4 _AdditionalLightsAttenuation[16];
uniform 	mediump vec4 _AdditionalLightsSpotDir[16];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
uint u_xlatu7;
vec3 u_xlat8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_15;
vec3 u_xlat18;
int u_xlati18;
bool u_xlatb18;
float u_xlat23;
uint u_xlatu23;
mediump float u_xlat16_26;
float u_xlat29;
uint u_xlatu29;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
float u_xlat40;
float u_xlat41;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_13 = (-u_xlat16_2.x) + _Smoothness;
    u_xlat16_2.xzw = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_36 = (-_Smoothness) + 1.0;
    u_xlat16_4.x = u_xlat16_36 * u_xlat16_36;
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0078125);
    u_xlat16_13 = u_xlat16_13 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_4.x * 4.0 + 2.0;
    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x + -1.0;
    u_xlat16_26 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_26 = u_xlat16_26 + u_xlat16_26;
    u_xlat16_5.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_26)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_4.z = (-u_xlat16_26) + 1.0;
    u_xlat16_15.xy = u_xlat16_4.xz * u_xlat16_4.xz;
    u_xlat16_26 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
    u_xlat16_36 = u_xlat16_36 * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_36);
    u_xlat16_36 = u_xlat16_0.w + -1.0;
    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_36);
    u_xlat16_36 = u_xlat16_4.x * u_xlat16_4.x + 1.0;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_13);
    u_xlat16_4.xzw = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat7.xyz = vec3(u_xlat16_36) * u_xlat16_4.xzw;
    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat7.xyz;
    u_xlat16_4.xzw = vs_TEXCOORD8.xyz * u_xlat16_2.xzw + u_xlat16_4.xzw;
    u_xlat16_13 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_13 * unity_LightData.z;
    u_xlat16_5.xyz = vec3(u_xlat16_13) * _MainLightColor.xyz;
    u_xlat7.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_13 = inversesqrt(u_xlat23);
    u_xlat7.xyz = vec3(u_xlat16_13) * u_xlat7.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = dot(_MainLightPosition.xyz, u_xlat7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat23 = u_xlat23 * u_xlat12 + 1.00001001;
    u_xlat16_13 = u_xlat7.x * u_xlat7.x;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat7.x = max(u_xlat16_13, 0.100000001);
    u_xlat23 = u_xlat23 * u_xlat7.x;
    u_xlat23 = u_xlat1.x * u_xlat23;
    u_xlat23 = u_xlat16_15.x / u_xlat23;
    u_xlat16_13 = u_xlat23 + -6.10351562e-05;
    u_xlat16_13 = max(u_xlat16_13, 0.0);
    u_xlat16_13 = min(u_xlat16_13, 100.0);
    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
    u_xlat16_4.xzw = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;
    u_xlat16_13 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu23 =  uint(int(u_xlat16_13));
    u_xlat16_5.xyz = u_xlat16_4.xzw;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu23 ; u_xlatu_loop_1++)
    {
        u_xlati18 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu29 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_13 = dot(unity_LightIndices[int(u_xlatu29)], ImmCB_0[u_xlati18]);
        u_xlati18 = int(u_xlat16_13);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati18].www + _AdditionalLightsPosition[u_xlati18].xyz;
        u_xlat29 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat29 = max(u_xlat29, 6.10351562e-05);
        u_xlat40 = inversesqrt(u_xlat29);
        u_xlat9.xyz = vec3(u_xlat40) * u_xlat8.xyz;
        u_xlat41 = float(1.0) / float(u_xlat29);
        u_xlat29 = u_xlat29 * _AdditionalLightsAttenuation[u_xlati18].x + _AdditionalLightsAttenuation[u_xlati18].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
        u_xlat29 = u_xlat29 * u_xlat41;
        u_xlat16_13 = dot(_AdditionalLightsSpotDir[u_xlati18].xyz, u_xlat9.xyz);
        u_xlat16_13 = u_xlat16_13 * _AdditionalLightsAttenuation[u_xlati18].z + _AdditionalLightsAttenuation[u_xlati18].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
        u_xlat29 = u_xlat16_13 * u_xlat29;
        u_xlat16_13 = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat16_13 = u_xlat16_13 * u_xlat29;
        u_xlat16_6.xyz = vec3(u_xlat16_13) * _AdditionalLightsColor[u_xlati18].xyz;
        u_xlat18.xyz = u_xlat8.xyz * vec3(u_xlat40) + vs_TEXCOORD3.xyz;
        u_xlat8.x = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
        u_xlat16_13 = inversesqrt(u_xlat8.x);
        u_xlat18.xyz = vec3(u_xlat16_13) * u_xlat18.xyz;
        u_xlat8.x = dot(vs_TEXCOORD2.xyz, u_xlat18.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
        u_xlat18.x = dot(u_xlat9.xyz, u_xlat18.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
        u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
        u_xlat29 = u_xlat8.x * u_xlat8.x;
        u_xlat29 = u_xlat29 * u_xlat12 + 1.00001001;
        u_xlat16_13 = u_xlat18.x * u_xlat18.x;
        u_xlat18.x = u_xlat29 * u_xlat29;
        u_xlat29 = max(u_xlat16_13, 0.100000001);
        u_xlat18.x = u_xlat29 * u_xlat18.x;
        u_xlat18.x = u_xlat1.x * u_xlat18.x;
        u_xlat18.x = u_xlat16_15.x / u_xlat18.x;
        u_xlat16_13 = u_xlat18.x + -6.10351562e-05;
        u_xlat16_13 = max(u_xlat16_13, 0.0);
        u_xlat16_13 = min(u_xlat16_13, 100.0);
        u_xlat16_10.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat16_2.xzw;
        u_xlat16_5.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    }
    SV_Target0.xyz = u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat19;
mediump float u_xlat16_21;
float u_xlat28;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat11 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat11;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat11;
        u_xlat11 = u_xlat11 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat11) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat28 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat28 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_12.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_21 = (-u_xlat16_12.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_12.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.x = (-_Smoothness) + 1.0;
    u_xlat16_30 = u_xlat16_12.x * u_xlat16_12.x;
    u_xlat16_30 = max(u_xlat16_30, 0.0078125);
    u_xlat16_31 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_21 = u_xlat16_21 + 1.0;
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
    u_xlat1.x = u_xlat16_30 * 4.0 + 2.0;
    u_xlat10 = u_xlat16_30 * u_xlat16_30 + -1.0;
    u_xlat16_32 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_32)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_32 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
    u_xlat16_32 = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_33 = (-u_xlat16_12.x) * 0.699999988 + 1.70000005;
    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_33;
    u_xlat16_12.x = u_xlat16_12.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_0.w + -1.0;
    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlat16_12.x = log2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.y;
    u_xlat16_12.x = exp2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_12.xxx;
    u_xlat16_12.x = u_xlat16_30 * u_xlat16_30 + 1.0;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_21);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_12.xxx * u_xlat16_7.xyz;
    u_xlat16_12.xyz = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_12.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
    u_xlat16_32 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat19 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat19 = max(u_xlat19, 1.17549435e-38);
    u_xlat16_32 = inversesqrt(u_xlat19);
    u_xlat8.xyz = vec3(u_xlat16_32) * u_xlat8.xyz;
    u_xlat19 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat19 * u_xlat10 + 1.00001001;
    u_xlat16_32 = u_xlat28 * u_xlat28;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat19 = max(u_xlat16_32, 0.100000001);
    u_xlat10 = u_xlat19 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat1.x = u_xlat16_31 / u_xlat1.x;
    u_xlat16_31 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_31 = max(u_xlat16_31, 0.0);
    u_xlat16_31 = min(u_xlat16_31, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;
    u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_12.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 5) out highp vec4 vs_TEXCOORD1;
layout(location = 2) out highp vec3 vs_TEXCOORD2;
layout(location = 3) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec3 vs_TEXCOORD2;
layout(location = 3) in highp vec3 vs_TEXCOORD3;
layout(location = 4) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
bool u_xlatb5;
mediump float u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat23;
void main()
{
    u_xlat16_0.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_0.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_18 = (-_Smoothness) + 1.0;
    u_xlat16_1.x = (-u_xlat16_18) * 0.699999988 + 1.70000005;
    u_xlat16_1.x = u_xlat16_18 * u_xlat16_1.x;
    u_xlat16_0.w = u_xlat16_18 * u_xlat16_18;
    u_xlat16_1.x = u_xlat16_1.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_0.xyz, u_xlat16_1.x);
    u_xlat16_0.x = u_xlat16_1.w + -1.0;
    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
    u_xlat16_0.xw = max(u_xlat16_0.xw, vec2(0.0, 0.0078125));
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.y;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_0.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_8 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_14 = (-u_xlat16_8) + _Smoothness;
    u_xlat16_14 = u_xlat16_14 + 1.0;
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = vec3(u_xlat16_14) + (-u_xlat16_3.xyz);
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_21 = u_xlat16_0.w * u_xlat16_0.w + 1.0;
    u_xlat16_21 = float(1.0) / u_xlat16_21;
    u_xlat5.xyz = u_xlat16_2.xzw * vec3(u_xlat16_21);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat5.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_20 = u_xlat16_20 * unity_LightData.z;
    u_xlat16_4.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_0.w * u_xlat16_0.w + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_0.w * 4.0 + 2.0;
    u_xlat16_18 = u_xlat16_0.w * u_xlat16_0.w;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_18 / u_xlat5.x;
    u_xlat16_18 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_18) + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_5.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_5.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;
    u_xlatb5 = _Surface==1.0;
    SV_Target0.w = (u_xlatb5) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 2) out highp vec4 vs_TEXCOORD1;
layout(location = 3) out highp vec3 vs_TEXCOORD2;
layout(location = 4) out highp vec3 vs_TEXCOORD3;
layout(location = 5) out highp vec4 vs_TEXCOORD6;
layout(location = 6) out highp vec3 vs_TEXCOORD8;
layout(location = 7) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb21;
float u_xlat31;
bool u_xlatb31;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat0;
    u_xlat11.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat1.x = (-u_xlat11.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * unity_ParticleUVShiftData.z;
    u_xlat1.x = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = (-u_xlat11.x) * unity_ParticleUVShiftData.w + u_xlat1.x;
    u_xlat1.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat2.xy;
    u_xlatb21 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb21)) ? u_xlat1.xy : in_TEXCOORD0.xy;
    u_xlat1 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1 = vec4(unity_ParticleUseMeshColors) * u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu2.x = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat7.yzw = vec3(u_xlatu2.xyz);
    u_xlat1 = u_xlat1 * u_xlat7;
    u_xlat1 = u_xlat1 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat1;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat2.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat6.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat31 = float(1.0) / float(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat6.xyz);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat31) * u_xlat5.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, u_xlat4.xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = max(u_xlat31, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat31);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlatb31 = unity_OrthoParams.w==0.0;
    u_xlat3.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD3.xyz = u_xlat3.xyz * u_xlat16_8.xxx;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_8.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_8.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec4 vs_TEXCOORD1;
layout(location = 3) in highp vec3 vs_TEXCOORD2;
layout(location = 4) in highp vec3 vs_TEXCOORD3;
layout(location = 5) in highp vec4 vs_TEXCOORD6;
layout(location = 6) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat17;
mediump float u_xlat16_19;
float u_xlat25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat10 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10;
        u_xlat10 = u_xlat10 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat10) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat25 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_3 = u_xlat25 * u_xlat2.x;
    u_xlat16_11.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_19 = (-u_xlat16_11.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_11.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.x = (-_Smoothness) + 1.0;
    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_27 = max(u_xlat16_27, 0.0078125);
    u_xlat16_28 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_19 = u_xlat16_19 + 1.0;
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
    u_xlat1.x = u_xlat16_27 * 4.0 + 2.0;
    u_xlat9 = u_xlat16_27 * u_xlat16_27 + -1.0;
    u_xlat16_29 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_29)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
    u_xlat16_29 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_30 = (-u_xlat16_11.x) * 0.699999988 + 1.70000005;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_30;
    u_xlat16_11.x = u_xlat16_11.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_0.w + -1.0;
    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = log2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.y;
    u_xlat16_11.x = exp2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_11.xxx;
    u_xlat16_11.x = u_xlat16_27 * u_xlat16_27 + 1.0;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_19);
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_11.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_11.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = max(u_xlat17, 1.17549435e-38);
    u_xlat16_29 = inversesqrt(u_xlat17);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_29);
    u_xlat17 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat17 * u_xlat9 + 1.00001001;
    u_xlat16_29 = u_xlat25 * u_xlat25;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat17 = max(u_xlat16_29, 0.100000001);
    u_xlat9 = u_xlat17 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat1.x = u_xlat16_28 / u_xlat1.x;
    u_xlat16_28 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
    u_xlatb1 = _Surface==1.0;
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROCEDURAL_INSTANCING_ON" }
"#ifdef VERTEX
#version 310 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_ParticleUVShiftData;
uniform 	float unity_ParticleUseMeshColors;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
 struct unity_ParticleInstanceData_type {
	uint[14] value;
};

layout(std430, binding = 0) readonly buffer unity_ParticleInstanceData {
	unity_ParticleInstanceData_type unity_ParticleInstanceData_buf[];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
layout(location = 0) out highp vec2 vs_TEXCOORD0;
layout(location = 1) out mediump vec4 vs_COLOR0;
layout(location = 5) out highp vec4 vs_TEXCOORD1;
layout(location = 2) out highp vec3 vs_TEXCOORD2;
layout(location = 3) out highp vec3 vs_TEXCOORD3;
layout(location = 4) out highp vec3 vs_TEXCOORD8;
layout(location = 6) flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
uint u_xlatu1;
bvec3 u_xlatb1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
bool u_xlatb20;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlat2 = vec4(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(36 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat11.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(12 >> 2) + 2]));
    u_xlat3.y = u_xlat11.y;
    u_xlat4.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 1]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(24 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = vec3(uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 2]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 0]), uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(0 >> 2) + 1]));
    u_xlat1.x = uintBitsToFloat(unity_ParticleInstanceData_buf[u_xlati1].value[(52 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat6.y = dot(u_xlat3, u_xlat0);
    u_xlat7 = u_xlat6.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat11.x;
    u_xlat5.y = u_xlat11.z;
    u_xlat6.x = dot(u_xlat4, u_xlat0);
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat6.xxxx + u_xlat7;
    u_xlat5.w = u_xlat2.z;
    u_xlat6.z = dot(u_xlat5, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat6.zzzz + u_xlat7;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = u_xlat1.x / unity_ParticleUVShiftData.y;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10 = (-u_xlat0.x) * unity_ParticleUVShiftData.y + u_xlat1.x;
    u_xlat10 = floor(u_xlat10);
    u_xlat1.x = u_xlat10 * unity_ParticleUVShiftData.z;
    u_xlat10 = (-unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = (-u_xlat0.x) * unity_ParticleUVShiftData.w + u_xlat10;
    u_xlat0.xy = in_TEXCOORD0.xy * unity_ParticleUVShiftData.zw + u_xlat1.xy;
    u_xlatb20 = unity_ParticleUVShiftData.x!=0.0;
    vs_TEXCOORD0.xy = (bool(u_xlatb20)) ? u_xlat0.xy : in_TEXCOORD0.xy;
    u_xlat0 = in_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat0 = vec4(unity_ParticleUseMeshColors) * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlatu1 = uint(floatBitsToUint(u_xlat2.w)) & 255u;
    u_xlat1.x = float(u_xlatu1);
    u_xlatu2.x = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(8), int(8));
    u_xlatu2.y = bitfieldExtract(uint(floatBitsToUint(u_xlat2.w)), int(16), int(8));
    u_xlatu2.z = uint(floatBitsToUint(u_xlat2.w)) >> 24u;
    u_xlat1.yzw = vec3(u_xlatu2.xyz);
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat0 * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat0.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat1.xyz = u_xlat4.zxy * u_xlat5.yzx + (-u_xlat1.xyz);
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = u_xlat3.yzx * u_xlat5.zxy + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = float(1.0) / float(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, u_xlat1.xyz);
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat3.xyz = u_xlat4.yzx * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, u_xlat2.xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat30);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_8.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlatb30 = unity_OrthoParams.w==0.0;
    u_xlat2.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_8.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat16_8.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_8.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_8.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_8.xyz = unity_SHC.xyz * u_xlat16_8.xxx + u_xlat16_9.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_8.xyzx).xyz;
    u_xlat16_8.xyz = log2(abs(u_xlat16_8.xyz));
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_8;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_9.x : u_xlat16_8.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_9.y : u_xlat16_8.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_9.z : u_xlat16_8.z;
        u_xlat16_8 = hlslcc_movcTemp;
    }
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_8.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 310 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	mediump vec4 unity_WorldTransformParams;
	mediump vec4 unity_LightData;
	mediump vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	mediump vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	mediump vec4 unity_SHAr;
	mediump vec4 unity_SHAg;
	mediump vec4 unity_SHAb;
	mediump vec4 unity_SHBr;
	mediump vec4 unity_SHBg;
	mediump vec4 unity_SHBb;
	mediump vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityPerMaterial {
	vec4 _SoftParticleFadeParams;
	vec4 _CameraFadeParams;
	vec4 _BaseMap_ST;
	mediump vec4 _BaseColor;
	mediump vec4 _EmissionColor;
	mediump vec4 _BaseColorAddSubDiff;
	mediump float _Cutoff;
	mediump float _Metallic;
	mediump float _Smoothness;
	mediump float _BumpScale;
	mediump float _DistortionStrengthScaled;
	mediump float _DistortionBlend;
	mediump float _Surface;
};
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in mediump vec4 vs_COLOR0;
layout(location = 2) in highp vec3 vs_TEXCOORD2;
layout(location = 3) in highp vec3 vs_TEXCOORD3;
layout(location = 4) in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat23;
void main()
{
    u_xlat16_0.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_0.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_18 = (-_Smoothness) + 1.0;
    u_xlat16_1.x = (-u_xlat16_18) * 0.699999988 + 1.70000005;
    u_xlat16_1.x = u_xlat16_18 * u_xlat16_1.x;
    u_xlat16_0.w = u_xlat16_18 * u_xlat16_18;
    u_xlat16_1.x = u_xlat16_1.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_0.xyz, u_xlat16_1.x);
    u_xlat16_0.x = u_xlat16_1.w + -1.0;
    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
    u_xlat16_0.xw = max(u_xlat16_0.xw, vec2(0.0, 0.0078125));
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.y;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_0.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_8 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_14 = (-u_xlat16_8) + _Smoothness;
    u_xlat16_14 = u_xlat16_14 + 1.0;
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = vec3(u_xlat16_14) + (-u_xlat16_3.xyz);
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_21 = u_xlat16_0.w * u_xlat16_0.w + 1.0;
    u_xlat16_21 = float(1.0) / u_xlat16_21;
    u_xlat5.xyz = u_xlat16_2.xzw * vec3(u_xlat16_21);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat5.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
    u_xlat16_20 = u_xlat16_20 * unity_LightData.z;
    u_xlat16_4.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_0.w * u_xlat16_0.w + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_0.w * 4.0 + 2.0;
    u_xlat16_18 = u_xlat16_0.w * u_xlat16_0.w;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_18 / u_xlat5.x;
    u_xlat16_18 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_18) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlatb5 = _Surface==1.0;
    SV_Target0.w = (u_xlatb5) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat19;
mediump float u_xlat16_21;
float u_xlat28;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat11 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat11;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat11;
        u_xlat11 = u_xlat11 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat11) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat28 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat28 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_12.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_21 = (-u_xlat16_12.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_12.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.x = (-_Smoothness) + 1.0;
    u_xlat16_30 = u_xlat16_12.x * u_xlat16_12.x;
    u_xlat16_30 = max(u_xlat16_30, 0.0078125);
    u_xlat16_31 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_21 = u_xlat16_21 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_30 * 4.0 + 2.0;
    u_xlat10 = u_xlat16_30 * u_xlat16_30 + -1.0;
    u_xlat16_32 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_32)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_32 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_33 = (-u_xlat16_12.x) * 0.699999988 + 1.70000005;
    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_33;
    u_xlat16_12.x = u_xlat16_12.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_0.w + -1.0;
    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlat16_12.x = log2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.y;
    u_xlat16_12.x = exp2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_12.xxx;
    u_xlat16_12.x = u_xlat16_30 * u_xlat16_30 + 1.0;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_21);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_12.xxx * u_xlat16_7.xyz;
    u_xlat16_12.xyz = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_12.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat19 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat19 = max(u_xlat19, 1.17549435e-38);
    u_xlat16_32 = inversesqrt(u_xlat19);
    u_xlat8.xyz = vec3(u_xlat16_32) * u_xlat8.xyz;
    u_xlat19 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat19 * u_xlat10 + 1.00001001;
    u_xlat16_32 = u_xlat28 * u_xlat28;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat19 = max(u_xlat16_32, 0.100000001);
    u_xlat10 = u_xlat19 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat1.x = u_xlat16_31 / u_xlat1.x;
    u_xlat16_31 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_31 = max(u_xlat16_31, 0.0);
    u_xlat16_31 = min(u_xlat16_31, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;
    u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_12.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
bool u_xlatb5;
mediump float u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat23;
void main()
{
    u_xlat16_0.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_0.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_18 = (-_Smoothness) + 1.0;
    u_xlat16_1.x = (-u_xlat16_18) * 0.699999988 + 1.70000005;
    u_xlat16_1.x = u_xlat16_18 * u_xlat16_1.x;
    u_xlat16_0.w = u_xlat16_18 * u_xlat16_18;
    u_xlat16_1.x = u_xlat16_1.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_0.xyz, u_xlat16_1.x);
    u_xlat16_0.x = u_xlat16_1.w + -1.0;
    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
    u_xlat16_0.xw = max(u_xlat16_0.xw, vec2(0.0, 0.0078125));
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.y;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_0.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_8 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_14 = (-u_xlat16_8) + _Smoothness;
    u_xlat16_14 = u_xlat16_14 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = vec3(u_xlat16_14) + (-u_xlat16_3.xyz);
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_21 = u_xlat16_0.w * u_xlat16_0.w + 1.0;
    u_xlat16_21 = float(1.0) / u_xlat16_21;
    u_xlat5.xyz = u_xlat16_2.xzw * vec3(u_xlat16_21);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat5.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * unity_LightData.z;
    u_xlat16_4.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_0.w * u_xlat16_0.w + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_0.w * 4.0 + 2.0;
    u_xlat16_18 = u_xlat16_0.w * u_xlat16_0.w;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_18 / u_xlat5.x;
    u_xlat16_18 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_18) + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_5.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_5.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_Surface==1.0);
#else
    u_xlatb5 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb5) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
int u_xlati7;
bool u_xlatb7;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xxx;
    vs_TEXCOORD2.xyz = u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb7 = unity_OrthoParams.w==0.0;
#endif
    u_xlat5.x = (u_xlatb7) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb7) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb7) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat7 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7 = max(u_xlat7, 1.17549435e-38);
    u_xlat16_4.x = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = u_xlat16_4.xxx * u_xlat5.xyz;
    u_xlat7 = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat7 * 0.5;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat2.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_1 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat3.w = 1.0;
    u_xlat16_6.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat3);
    u_xlat16_6.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat3);
    u_xlat16_6.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_4.xyzx).xyz;
    u_xlat16_4.xyz = log2(abs(u_xlat16_4.xyz));
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_4;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_6.x : u_xlat16_4.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_6.y : u_xlat16_4.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_6.z : u_xlat16_4.z;
        u_xlat16_4 = hlslcc_movcTemp;
    }
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_4.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat17;
mediump float u_xlat16_19;
float u_xlat25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat10 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10;
        u_xlat10 = u_xlat10 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat10) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat25 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat25 * u_xlat2.x;
    u_xlat16_11.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_19 = (-u_xlat16_11.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_11.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.x = (-_Smoothness) + 1.0;
    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_27 = max(u_xlat16_27, 0.0078125);
    u_xlat16_28 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_19 = u_xlat16_19 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_27 * 4.0 + 2.0;
    u_xlat9 = u_xlat16_27 * u_xlat16_27 + -1.0;
    u_xlat16_29 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_29)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_30 = (-u_xlat16_11.x) * 0.699999988 + 1.70000005;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_30;
    u_xlat16_11.x = u_xlat16_11.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_0.w + -1.0;
    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = log2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.y;
    u_xlat16_11.x = exp2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_11.xxx;
    u_xlat16_11.x = u_xlat16_27 * u_xlat16_27 + 1.0;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_19);
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_11.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_11.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = max(u_xlat17, 1.17549435e-38);
    u_xlat16_29 = inversesqrt(u_xlat17);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_29);
    u_xlat17 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat17 * u_xlat9 + 1.00001001;
    u_xlat16_29 = u_xlat25 * u_xlat25;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat17 = max(u_xlat16_29, 0.100000001);
    u_xlat9 = u_xlat17 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat1.x = u_xlat16_28 / u_xlat1.x;
    u_xlat16_28 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(2) uniform UnityInstancing_PerDraw0 {
#endif
	UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
struct unity_Builtins2Array_Type {
	mediump vec4 unity_SHArArray;
	mediump vec4 unity_SHAgArray;
	mediump vec4 unity_SHAbArray;
	mediump vec4 unity_SHBrArray;
	mediump vec4 unity_SHBgArray;
	mediump vec4 unity_SHBbArray;
	mediump vec4 unity_SHCArray;
};
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(3) uniform UnityInstancing_PerDraw2 {
#endif
	UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
int u_xlati0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = int(u_xlati0 << 3);
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb6 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb6) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb6) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb6) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
    u_xlat16_3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat2);
    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat2);
    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat23;
void main()
{
    u_xlat16_0.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_0.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_18 = (-_Smoothness) + 1.0;
    u_xlat16_1.x = (-u_xlat16_18) * 0.699999988 + 1.70000005;
    u_xlat16_1.x = u_xlat16_18 * u_xlat16_1.x;
    u_xlat16_0.w = u_xlat16_18 * u_xlat16_18;
    u_xlat16_1.x = u_xlat16_1.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_0.xyz, u_xlat16_1.x);
    u_xlat16_0.x = u_xlat16_1.w + -1.0;
    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
    u_xlat16_0.xw = max(u_xlat16_0.xw, vec2(0.0, 0.0078125));
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.y;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_0.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_8 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_14 = (-u_xlat16_8) + _Smoothness;
    u_xlat16_14 = u_xlat16_14 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = vec3(u_xlat16_14) + (-u_xlat16_3.xyz);
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_21 = u_xlat16_0.w * u_xlat16_0.w + 1.0;
    u_xlat16_21 = float(1.0) / u_xlat16_21;
    u_xlat5.xyz = u_xlat16_2.xzw * vec3(u_xlat16_21);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat5.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * unity_LightData.z;
    u_xlat16_4.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_0.w * u_xlat16_0.w + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_0.w * 4.0 + 2.0;
    u_xlat16_18 = u_xlat16_0.w * u_xlat16_0.w;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_18 / u_xlat5.x;
    u_xlat16_18 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_18) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_Surface==1.0);
#else
    u_xlatb5 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb5) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Local Keywords { "_EMISSION" "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
UNITY_LOCATION(3) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat19;
mediump float u_xlat16_21;
float u_xlat28;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat11 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat11;
        u_xlat11 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat11;
        u_xlat11 = u_xlat11 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat11) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat28 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat28 * u_xlat2.x;
    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_12.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_21 = (-u_xlat16_12.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_12.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_12.x = (-_Smoothness) + 1.0;
    u_xlat16_30 = u_xlat16_12.x * u_xlat16_12.x;
    u_xlat16_30 = max(u_xlat16_30, 0.0078125);
    u_xlat16_31 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_21 = u_xlat16_21 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_30 * 4.0 + 2.0;
    u_xlat10 = u_xlat16_30 * u_xlat16_30 + -1.0;
    u_xlat16_32 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_32)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_32 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = (-u_xlat16_32) + 1.0;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_33 = (-u_xlat16_12.x) * 0.699999988 + 1.70000005;
    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_33;
    u_xlat16_12.x = u_xlat16_12.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_0.w + -1.0;
    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlat16_12.x = log2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.y;
    u_xlat16_12.x = exp2(u_xlat16_12.x);
    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_12.xxx;
    u_xlat16_12.x = u_xlat16_30 * u_xlat16_30 + 1.0;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_21);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_12.xxx * u_xlat16_7.xyz;
    u_xlat16_12.xyz = u_xlat16_6.xyz * u_xlat8.xyz;
    u_xlat16_12.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;
    u_xlat8.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat19 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat19 = max(u_xlat19, 1.17549435e-38);
    u_xlat16_32 = inversesqrt(u_xlat19);
    u_xlat8.xyz = vec3(u_xlat16_32) * u_xlat8.xyz;
    u_xlat19 = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat19 * u_xlat10 + 1.00001001;
    u_xlat16_32 = u_xlat28 * u_xlat28;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat19 = max(u_xlat16_32, 0.100000001);
    u_xlat10 = u_xlat19 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat1.x = u_xlat16_31 / u_xlat1.x;
    u_xlat16_31 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_31 = max(u_xlat16_31, 0.0);
    u_xlat16_31 = min(u_xlat16_31, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;
    u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_12.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Local Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
bool u_xlatb5;
mediump float u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat23;
void main()
{
    u_xlat16_0.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_0.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_18 = (-_Smoothness) + 1.0;
    u_xlat16_1.x = (-u_xlat16_18) * 0.699999988 + 1.70000005;
    u_xlat16_1.x = u_xlat16_18 * u_xlat16_1.x;
    u_xlat16_0.w = u_xlat16_18 * u_xlat16_18;
    u_xlat16_1.x = u_xlat16_1.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_0.xyz, u_xlat16_1.x);
    u_xlat16_0.x = u_xlat16_1.w + -1.0;
    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
    u_xlat16_0.xw = max(u_xlat16_0.xw, vec2(0.0, 0.0078125));
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.y;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_0.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_8 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_14 = (-u_xlat16_8) + _Smoothness;
    u_xlat16_14 = u_xlat16_14 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = vec3(u_xlat16_14) + (-u_xlat16_3.xyz);
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_21 = u_xlat16_0.w * u_xlat16_0.w + 1.0;
    u_xlat16_21 = float(1.0) / u_xlat16_21;
    u_xlat5.xyz = u_xlat16_2.xzw * vec3(u_xlat16_21);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat5.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * unity_LightData.z;
    u_xlat16_4.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_0.w * u_xlat16_0.w + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_0.w * 4.0 + 2.0;
    u_xlat16_18 = u_xlat16_0.w * u_xlat16_0.w;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_18 / u_xlat5.x;
    u_xlat16_18 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_18) + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_5.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;
    SV_Target0.xyz = u_xlat16_5.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_Surface==1.0);
#else
    u_xlatb5 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb5) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Local Keywords { "_FADING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb18 = unity_OrthoParams.w==0.0;
#endif
    u_xlat4.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_3.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_3.xxx * u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_0 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat2.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;
    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_3.z;
        u_xlat16_3 = hlslcc_movcTemp;
    }
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat17;
mediump float u_xlat16_19;
float u_xlat25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * _BaseColor;
    u_xlat1 = u_xlat16_0 * vs_COLOR0;
    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), _SoftParticleFadeParams.xyxx).xy;
    u_xlatb2.x = u_xlatb2.y || u_xlatb2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
        u_xlat2.x = texture(_CameraDepthTexture, u_xlat2.xy).x;
        u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat10 = vs_TEXCOORD1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat10;
        u_xlat10 = hlslcc_mtx4x4unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat10;
        u_xlat10 = u_xlat10 + hlslcc_mtx4x4unity_MatrixV[3].z;
        u_xlat2.x = u_xlat2.x + (-_SoftParticleFadeParams.x);
        u_xlat2.x = -abs(u_xlat10) + u_xlat2.x;
        u_xlat2.x = u_xlat2.x * _SoftParticleFadeParams.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    } else {
        u_xlat2.x = 1.0;
    }
    u_xlat25 = u_xlat1.w * u_xlat2.x;
    u_xlat2.x = vs_TEXCOORD6.z / vs_TEXCOORD6.w;
    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x + (-_CameraFadeParams.x);
    u_xlat2.x = u_xlat2.x * _CameraFadeParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat25 * u_xlat2.x;
    u_xlat16_11.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_19 = (-u_xlat16_11.x) + _Smoothness;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_11.xxx;
    u_xlat16_5.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.x = (-_Smoothness) + 1.0;
    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_27 = max(u_xlat16_27, 0.0078125);
    u_xlat16_28 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_19 = u_xlat16_19 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat16_27 * 4.0 + 2.0;
    u_xlat9 = u_xlat16_27 * u_xlat16_27 + -1.0;
    u_xlat16_29 = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;
    u_xlat16_6.xyz = vs_TEXCOORD2.xyz * (-vec3(u_xlat16_29)) + (-vs_TEXCOORD3.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_30 = (-u_xlat16_11.x) * 0.699999988 + 1.70000005;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_30;
    u_xlat16_11.x = u_xlat16_11.x * 6.0;
    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_0.w + -1.0;
    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = log2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.y;
    u_xlat16_11.x = exp2(u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_11.xxx;
    u_xlat16_11.x = u_xlat16_27 * u_xlat16_27 + 1.0;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_19);
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat2.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat16_6.xyz;
    u_xlat16_11.xyz = vs_TEXCOORD8.xyz * u_xlat16_4.xyz + u_xlat16_11.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * unity_LightData.z;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * _MainLightColor.xyz;
    u_xlat2.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = max(u_xlat17, 1.17549435e-38);
    u_xlat16_29 = inversesqrt(u_xlat17);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_29);
    u_xlat17 = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat17 * u_xlat9 + 1.00001001;
    u_xlat16_29 = u_xlat25 * u_xlat25;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat17 = max(u_xlat16_29, 0.100000001);
    u_xlat9 = u_xlat17 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat1.x = u_xlat16_28 / u_xlat1.x;
    u_xlat16_28 = u_xlat1.x + -6.10351562e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_Surface==1.0);
#else
    u_xlatb1 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb1) ? u_xlat16_3 : 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec3 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(unity_OrthoParams.w==0.0);
#else
    u_xlatb15 = unity_OrthoParams.w==0.0;
#endif
    u_xlat3.x = (u_xlatb15) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = (u_xlatb15) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = (u_xlatb15) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat16_2.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;
    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    {
        vec3 hlslcc_movcTemp = u_xlat16_2;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_2.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_2.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_2.z;
        u_xlat16_2 = hlslcc_movcTemp;
    }
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD8.xyz = u_xlat16_2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SoftParticleFadeParams;
	UNITY_UNIFORM vec4 _CameraFadeParams;
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump vec4 _EmissionColor;
	UNITY_UNIFORM mediump vec4 _BaseColorAddSubDiff;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Metallic;
	UNITY_UNIFORM mediump float _Smoothness;
	UNITY_UNIFORM mediump float _BumpScale;
	UNITY_UNIFORM mediump float _DistortionStrengthScaled;
	UNITY_UNIFORM mediump float _DistortionBlend;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
in mediump vec4 vs_COLOR0;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_8;
float u_xlat11;
mediump float u_xlat16_14;
float u_xlat17;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat23;
void main()
{
    u_xlat16_0.x = dot((-vs_TEXCOORD3.xyz), vs_TEXCOORD2.xyz);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.xyz = vs_TEXCOORD2.xyz * (-u_xlat16_0.xxx) + (-vs_TEXCOORD3.xyz);
    u_xlat16_18 = (-_Smoothness) + 1.0;
    u_xlat16_1.x = (-u_xlat16_18) * 0.699999988 + 1.70000005;
    u_xlat16_1.x = u_xlat16_18 * u_xlat16_1.x;
    u_xlat16_0.w = u_xlat16_18 * u_xlat16_18;
    u_xlat16_1.x = u_xlat16_1.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_0.xyz, u_xlat16_1.x);
    u_xlat16_0.x = u_xlat16_1.w + -1.0;
    u_xlat16_0.x = unity_SpecCube0_HDR.w * u_xlat16_0.x + 1.0;
    u_xlat16_0.xw = max(u_xlat16_0.xw, vec2(0.0, 0.0078125));
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.y;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * unity_SpecCube0_HDR.x;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_0.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_8 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat16_14 = (-u_xlat16_8) + _Smoothness;
    u_xlat16_14 = u_xlat16_14 + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * _BaseColor;
    u_xlat16_3.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat1 = u_xlat16_1 * vs_COLOR0;
    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = vec3(u_xlat16_14) + (-u_xlat16_3.xyz);
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_21 = u_xlat16_0.w * u_xlat16_0.w + 1.0;
    u_xlat16_21 = float(1.0) / u_xlat16_21;
    u_xlat5.xyz = u_xlat16_2.xzw * vec3(u_xlat16_21);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat5.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * unity_LightData.z;
    u_xlat16_4.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.xyz + _MainLightPosition.xyz;
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = max(u_xlat23, 1.17549435e-38);
    u_xlat16_20 = inversesqrt(u_xlat23);
    u_xlat5.xyz = vec3(u_xlat16_20) * u_xlat5.xyz;
    u_xlat23 = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = max(u_xlat16_20, 0.100000001);
    u_xlat11 = u_xlat23 * u_xlat23;
    u_xlat17 = u_xlat16_0.w * u_xlat16_0.w + -1.0;
    u_xlat11 = u_xlat11 * u_xlat17 + 1.00001001;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat5.x = u_xlat5.x * u_xlat11;
    u_xlat11 = u_xlat16_0.w * 4.0 + 2.0;
    u_xlat16_18 = u_xlat16_0.w * u_xlat16_0.w;
    u_xlat5.x = u_xlat11 * u_xlat5.x;
    u_xlat5.x = u_xlat16_18 / u_xlat5.x;
    u_xlat16_18 = u_xlat5.x + -6.10351562e-05;
    u_xlat16_18 = max(u_xlat16_18, 0.0);
    u_xlat16_18 = min(u_xlat16_18, 100.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_18) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_Surface==1.0);
#else
    u_xlatb5 = _Surface==1.0;
#endif
    SV_Target0.w = (u_xlatb5) ? u_xlat1.w : 1.0;
    return;
}

#endif
"
}
}
}
 Pass {
  Name "Universal2D"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "Universal2D" "PerformanceChecks" = "False" "PreviewType" = "Plane" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" "UniversalMaterialType" = "Lit" }
  Blend Zero Zero, Zero Zero
  ZWrite Off
  Cull Off
  GpuProgramID 263201
Program "vp" {
SubProgram "gles " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BaseMap_ST;
attribute highp vec4 in_POSITION0;
attribute highp vec2 in_TEXCOORD0;
varying highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _BaseColor;
uniform lowp sampler2D _BaseMap;
varying highp vec2 vs_TEXCOORD0;
#define SV_Target0 gl_FragData[0]
lowp vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat10_0 * _BaseColor;
    return;
}

#endif
"
}
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _BaseMap_ST;
	UNITY_UNIFORM mediump vec4 _BaseColor;
	UNITY_UNIFORM mediump float _Cutoff;
	UNITY_UNIFORM mediump float _Surface;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat16_0 * _BaseColor;
    return;
}

#endif
"
}
}
}
}
Fallback "Universal Render Pipeline/Particles/Simple Lit"
CustomEditor "UnityEditor.Rendering.Universal.ShaderGUI.ParticlesLitShader"
}